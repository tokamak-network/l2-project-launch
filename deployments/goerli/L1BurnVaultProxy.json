{
  "address": "0xAB901F0800ED2c151f3392EaA2d10E88cc67C933",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "alive",
          "type": "bool"
        }
      ],
      "name": "SetAliveImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "SetSelectorImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        }
      ],
      "name": "getSelectorImplementation2",
      "outputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "implementation2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "l1TokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "l2Info",
      "outputs": [
        {
          "internalType": "address",
          "name": "l2TokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2ProjectManager",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "depositMinGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sendMsgMinGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "l2Type",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "publicInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "minPercents",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "maxPercents",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "delayTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "setAliveImplementation2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_alive",
          "type": "bool"
        }
      ],
      "name": "setImplementation2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "setProxyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "_selectors",
          "type": "bytes4[]"
        },
        {
          "internalType": "address",
          "name": "_imp",
          "type": "address"
        }
      ],
      "name": "setSelectorImplementations2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe0db20b2cc6fc9861ab50a15a3561547a747cb67ef89cc0a98d7a5f4ce82aca9",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xAB901F0800ED2c151f3392EaA2d10E88cc67C933",
    "transactionIndex": 14,
    "gasUsed": "1665536",
    "logsBloom": "0x
    "blockHash": "0x463c6613ee51742b0043d17a4ac6464232df17e8dca9cb012afc19701d92298e",
    "transactionHash": "0xe0db20b2cc6fc9861ab50a15a3561547a747cb67ef89cc0a98d7a5f4ce82aca9",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 10430175,
        "transactionHash": "0xe0db20b2cc6fc9861ab50a15a3561547a747cb67ef89cc0a98d7a5f4ce82aca9",
        "address": "0xAB901F0800ED2c151f3392EaA2d10E88cc67C933",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0x463c6613ee51742b0043d17a4ac6464232df17e8dca9cb012afc19701d92298e"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 10430175,
        "transactionHash": "0xe0db20b2cc6fc9861ab50a15a3561547a747cb67ef89cc0a98d7a5f4ce82aca9",
        "address": "0xAB901F0800ED2c151f3392EaA2d10E88cc67C933",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x463c6613ee51742b0043d17a4ac6464232df17e8dca9cb012afc19701d92298e"
      }
    ],
    "blockNumber": 10430175,
    "cumulativeGasUsed": "6776318",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d04a6cdccfcb7febd8e3a19d630a74b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"alive\",\"type\":\"bool\"}],\"name\":\"SetAliveImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"SetSelectorImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"getSelectorImplementation2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"implementation2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"l1TokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"l2Info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l2TokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2ProjectManager\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"depositMinGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sendMsgMinGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"l2Type\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"publicInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"minPercents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercents\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"delayTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"setAliveImplementation2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_alive\",\"type\":\"bool\"}],\"name\":\"setImplementation2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setProxyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"},{\"internalType\":\"address\",\"name\":\"_imp\",\"type\":\"address\"}],\"name\":\"setSelectorImplementations2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSelectorImplementation2(bytes4)\":{\"details\":\"view implementation address of selector of function\",\"params\":{\"_selector\":\"selector of function\"},\"returns\":{\"impl\":\"address of the implementation\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"implementation()\":{\"details\":\"returns the implementation\"},\"implementation2(uint256)\":{\"details\":\"view implementation address of the proxy[index]\",\"params\":{\"_index\":\"index of proxy\"},\"returns\":{\"_0\":\"address of the implementation\"}},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAliveImplementation2(address,bool)\":{\"details\":\"set alive status of implementation\",\"params\":{\"_alive\":\"alive status\",\"newImplementation\":\"Address of the new implementation.\"}},\"setImplementation2(address,uint256,bool)\":{\"details\":\"set the implementation address and status of the proxy[index]\",\"params\":{\"_alive\":\"_alive\",\"_index\":\"index\",\"newImplementation\":\"Address of the new implementation.\"}},\"setProxyPause(bool)\":{\"params\":{\"_pause\":\"true:pause or false:resume\"}},\"setSelectorImplementations2(bytes4[],address)\":{\"details\":\"set selectors of Implementation\",\"params\":{\"_imp\":\"implementation address\",\"_selectors\":\"being added selectors\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}},\"upgradeTo(address)\":{\"params\":{\"impl\":\"New implementation contract address\"}}},\"title\":\"L1BurnVaultProxy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setProxyPause(bool)\":{\"notice\":\"Set pause state\"},\"upgradeTo(address)\":{\"notice\":\"Set implementation contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1BurnVaultProxy.sol\":\"L1BurnVaultProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L1/L1BurnVaultProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../proxy/Proxy.sol\\\";\\nimport \\\"./L1ProjectManagerStorage.sol\\\";\\n\\n\\n/**\\n * @title L1BurnVaultProxy\\n * @dev\\n */\\ncontract L1BurnVaultProxy is Proxy, L1ProjectManagerStorage {\\n\\n}\",\"keccak256\":\"0x5cf78a3c236559f08a44534ca1bcb4d1e2aaf6bd6f6f7e6bc246bf39f3b7d191\",\"license\":\"MIT\"},\"contracts/L1/L1ProjectManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\n\\n/**\\n * @title L1ProjectManagerStorage\\n * @dev\\n */\\ncontract L1ProjectManagerStorage {\\n\\n    bool internal free = true;\\n\\n    uint256 public projectCount;\\n\\n    // TOKEN_TYPE - l1TokenFactory\\n    mapping(uint8 => address) public l1TokenFactory;\\n\\n    // projectIndex - ProjectInfo\\n    mapping(uint256 => LibProject.ProjectInfo) public projects;\\n\\n    // l1TokenAddress - projectIndex\\n    mapping(address => uint256) public projectTokens;\\n\\n    // l2type - l2TokenFactory\\n    mapping(uint8 => LibProject.L2Info) public l2Info;\\n\\n    // PublicSaleCheck\\n    mapping(uint8 => LibProject.PublicSaleSet) public publicInfo;\\n\\n\\n    modifier onlyProjectOwner(uint256 projectid) {\\n        require(projects[projectid].projectOwner != address(0) &&\\n            msg.sender == projects[projectid].projectOwner, \\\"caller is not projectOwner.\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n}\",\"keccak256\":\"0xd343696a5c618e9489952341e603eab748aea6c5a38c5c41c0ebe069b573138f\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyAction.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyAction\\ninterface IProxyAction {\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index\\n    /// @param _alive _alive\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external;\\n\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        external;\\n\\n\\n    /// @dev set selectors of Implementation\\n    /// @param _selectors being added selectors\\n    /// @param _imp implementation address\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) external  ;\\n\\n\\n\\n    /// onlyOwner\\n\\n    /// @notice Set pause state\\n    /// @param _pause true:pause or false:resume\\n    function setProxyPause(bool _pause) external ;\\n\\n\\n    /// anybody\\n\\n    /// @dev view implementation address of selector of function\\n    /// @param _selector selector of function\\n    /// @return impl address of the implementation\\n    function getSelectorImplementation2(bytes4 _selector)\\n        external\\n        view\\n        returns (address impl);\\n\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return address of the implementation\\n    function implementation2(uint256 _index) external view returns (address) ;\\n}\\n\\n\",\"keccak256\":\"0x16ff956d9ccccadd56ce168390a7daa64883fda68f00dbf5110ae67bceaa6fcb\",\"license\":\"Unlicense\"},\"contracts/interfaces/IProxyEvent.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\n\\n/// @title IProxyEvent\\ninterface IProxyEvent {\\n\\n    event Upgraded(address indexed implementation);\\n\\n    event SetAliveImplementation(address indexed impl, bool alive);\\n    event SetSelectorImplementation(bytes4 indexed selector, address indexed impl);\\n\\n\\n}\\n\",\"keccak256\":\"0x2a1e50808aa448c7a64fdea7ab2a7a2aa614e66ce974cc9e081bb70187716754\",\"license\":\"Unlicense\"},\"contracts/libraries/LibPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibPool {\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n}\",\"keccak256\":\"0x4f96e027ec71a0666159676b2426fbb90bd9de37076c03e225e533df8ff30ab5\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./LibPool.sol\\\";\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardTonTosPoolParams;\\n        InitalParameterLiquidityRewardVault rewardProjectTosPoolParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n        InitalParameterVestingFundVault vestingParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256 claimCounts;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundInterval;\\n    }\\n\\n    struct InitalParameterVestingFundVault {\\n        address receiveAddress;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundIntervalTime;\\n        uint24 fee;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        LibPool.PoolInfo poolParams;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    struct PublicSaleSet {\\n        uint8 minPercents;\\n        uint8 maxPercents;\\n        uint256 delayTime;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n            tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n            tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n            tokamakVaults.initialVaultParams.startTime == 0 ||\\n            tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime < tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime < tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime < tokamakVaults.tosAirdropParams.firstClaimTime ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime < tokamakVaults.tonAirdropParams.firstClaimTime\\n            )\\n            return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier1 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier2 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier3 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier4 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier1Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.payTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.changeTOSPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.startWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.snapshotTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.claimCounts == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.roundInterval == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.totalClaimCount == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.roundIntervalTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.fee == 0 \\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.tier1Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents) != 10000\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) < (\\n                tokamakVaults.publicSaleParams.vaultParams.hardcapAmount *\\n                tokamakVaults.publicSaleParams.vaultParams.payTokenPrice /\\n                tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice \\n            )\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime < tokamakVaults.publicSaleParams.vaultParams.startWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime < tokamakVaults.publicSaleParams.vaultParams.endWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime < tokamakVaults.publicSaleParams.vaultParams.start1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime < tokamakVaults.publicSaleParams.vaultParams.end1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime < tokamakVaults.publicSaleParams.vaultParams.start2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime < tokamakVaults.publicSaleParams.vaultParams.end2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime < tokamakVaults.publicSaleParams.claimParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime < tokamakVaults.publicSaleParams.vestingParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0 ||\\n                    (customs[i].params.secondClaimTime < customs[i].params.firstClaimTime)\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x50ab41457d7f54d1b4ece50e5bc611fbf6cb47856f1ba98018458fc546bcb117\",\"license\":\"MIT\"},\"contracts/proxy/Proxy.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../interfaces/IProxyEvent.sol\\\";\\nimport \\\"../interfaces/IProxyAction.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Proxy is ProxyStorage, AccessibleCommon, IProxyEvent, IProxyAction\\n{\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor () {\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n\\n    /* ========== onlyOwner ========== */\\n\\n    /// @inheritdoc IProxyAction\\n    function setProxyPause(bool _pause) external onlyOwner {\\n        pauseProxy = _pause;\\n    }\\n\\n    /// @notice Set implementation contract\\n    /// @param impl New implementation contract address\\n    function upgradeTo(address impl) external onlyOwner {\\n        require(impl != address(0), \\\"input is zero\\\");\\n        require(\\n            _implementation2(0) != impl,\\n            \\\"same addr\\\"\\n        );\\n        _setImplementation2(impl, 0, true);\\n        emit Upgraded(impl);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) external override onlyOwner {\\n        _setImplementation2(newImplementation, _index, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setAliveImplementation2(address newImplementation, bool _alive)\\n        public override onlyOwner\\n    {\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function setSelectorImplementations2(\\n        bytes4[] calldata _selectors,\\n        address _imp\\n    ) public override onlyOwner {\\n        require(\\n            _selectors.length > 0,\\n            \\\"Proxy: _selectors's size is zero\\\"\\n        );\\n        require(aliveImplementation[_imp], \\\"Proxy: _imp is not alive\\\");\\n\\n        for (uint256 i = 0; i < _selectors.length; i++) {\\n            require(\\n                selectorImplementation[_selectors[i]] != _imp,\\n                \\\"LiquidityVaultProxy: same imp\\\"\\n            );\\n            selectorImplementation[_selectors[i]] = _imp;\\n            emit SetSelectorImplementation(_selectors[i], _imp);\\n        }\\n    }\\n\\n    /* ========== Anyone can   ========== */\\n\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    /// @dev returns the implementation\\n    function implementation() external view returns (address) {\\n        return _implementation2(0);\\n    }\\n\\n    /// @inheritdoc IProxyAction\\n    function implementation2(uint256 _index) external override view returns (address) {\\n        return _implementation2(_index);\\n    }\\n\\n\\n    /// @inheritdoc IProxyAction\\n    function getSelectorImplementation2(bytes4 _selector)\\n        public override\\n        view\\n        returns (address impl)\\n    {\\n        if (selectorImplementation[_selector] == address(0))\\n            return proxyImplementation[0];\\n        else if (aliveImplementation[selectorImplementation[_selector]]){\\n            return selectorImplementation[_selector];\\n        }\\n        else return proxyImplementation[0];\\n    }\\n\\n\\n    /// @dev receive ether\\n    receive() external payable {\\n        revert(\\\"cannot receive Ether\\\");\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n    /// @dev view implementation address of the proxy[index]\\n    /// @param _index index of proxy\\n    /// @return impl address of the implementation\\n    function _implementation2(uint256 _index)\\n        internal\\n        view\\n        returns (address impl)\\n    {\\n        return proxyImplementation[_index];\\n    }\\n\\n    /// @dev fallback function , execute on undefined function call\\n    function _fallback() internal {\\n        address _impl = getSelectorImplementation2(msg.sig);\\n\\n        require(\\n            _impl != address(0) && !pauseProxy,\\n            \\\"Proxy: impl OR proxy is false\\\"\\n        );\\n\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n                // delegatecall returns 0 on error.\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    /// @dev set the implementation address and status of the proxy[index]\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _index index of proxy\\n    /// @param _alive alive status\\n    function _setImplementation2(\\n        address newImplementation,\\n        uint256 _index,\\n        bool _alive\\n    ) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Proxy: not contract address\\\"\\n        );\\n        if (_alive) proxyImplementation[_index] = newImplementation;\\n        _setAliveImplementation2(newImplementation, _alive);\\n    }\\n\\n    /// @dev set alive status of implementation\\n    /// @param newImplementation Address of the new implementation.\\n    /// @param _alive alive status\\n    function _setAliveImplementation2(address newImplementation, bool _alive)\\n        internal\\n    {\\n        aliveImplementation[newImplementation] = _alive;\\n        emit SetAliveImplementation(newImplementation, _alive);\\n    }\\n\\n}\",\"keccak256\":\"0x93a991e14e887e148f44924608e0fd480a62be79a72522bf1cb4c83b9ef85d85\",\"license\":\"Unlicense\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff191660011790553480156200001e57600080fd5b506200003a60008051602062001d37833981519152806200005b565b6200005560008051602062001d3783398151915233620000a6565b6200015a565b600082815260046020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620000b28282620000b6565b5050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16620000b25760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001163390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611bcd806200016a6000396000f3fe6080604052600436106101dc5760003560e01c80635cc797d8116101025780638d4fdb4011610095578063a217fddf11610064578063a217fddf14610752578063b4a35e0f14610767578063b911135f1461079d578063d547741f146107d35761022e565b80638d4fdb401461061d578063902293ab1461063d57806391d14854146106df5780639cba9848146107255761022e565b806375b238fc116100d157806375b238fc146105895780637cb00d25146105bd5780637cd5f663146105dd5780638b8f4a65146105fd5761022e565b80635cc797d81461050f57806363a8fd891461052f578063704802751461054957806375829def146105695761022e565b80632f2ff15d1161017a5780634a5df50f116101495780634a5df50f1461042b57806350d2a2761461044b578063550d01a3146104995780635c60da1b146104c95761022e565b80632f2ff15d146103b557806336568abe146103d55780633659cfe6146103f557806336fbad26146104155761022e565b806322985246116101b657806322985246146102c2578063248a9ca31461030457806324d3e6471461033457806324d7806c146103955761022e565b806301ffc9a714610238578063107046bd1461026d5780631785f53c146102a25761022e565b3661022e5760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b6102366107f3565b005b34801561024457600080fd5b506102586102533660046117a8565b61089c565b60405190151581526020015b60405180910390f35b34801561027957600080fd5b5061028d6102883660046117d2565b6108d3565b6040516102649998979695949392919061183b565b3480156102ae57600080fd5b506102366102bd3660046118c0565b6109c1565b3480156102ce57600080fd5b506102f67ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b604051908152602001610264565b34801561031057600080fd5b506102f661031f3660046117d2565b60009081526004602052604090206001015490565b34801561034057600080fd5b5061037561034f3660046118db565b600b602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff948516815293909216602084015290820152606001610264565b3480156103a157600080fd5b506102586103b03660046118c0565b610a3c565b3480156103c157600080fd5b506102366103d03660046118fe565b610a7c565b3480156103e157600080fd5b506102366103f03660046118fe565b610aa1565b34801561040157600080fd5b506102366104103660046118c0565b610b2d565b34801561042157600080fd5b506102f660065481565b34801561043757600080fd5b5061023661044636600461192a565b610c86565b34801561045757600080fd5b506104816104663660046117a8565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610264565b3480156104a557600080fd5b506102586104b43660046118c0565b60026020526000908152604090205460ff1681565b3480156104d557600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b0316610481565b34801561051b57600080fd5b5061023661052a3660046119be565b610f33565b34801561053b57600080fd5b506000546102589060ff1681565b34801561055557600080fd5b506102366105643660046118c0565b610f8b565b34801561057557600080fd5b506102366105843660046118c0565b611003565b34801561059557600080fd5b506102f67fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b3480156105c957600080fd5b506102366105d83660046119e8565b611153565b3480156105e957600080fd5b506102366105f8366004611a03565b6111b4565b34801561060957600080fd5b506104816106183660046117d2565b61120d565b34801561062957600080fd5b506104816106383660046117a8565b61122a565b34801561064957600080fd5b506106a86106583660046118db565b600a60205260009081526040902080546001909101546001600160a01b039182169181169063ffffffff740100000000000000000000000000000000000000008204811691600160c01b90041684565b604080516001600160a01b03958616815294909316602085015263ffffffff91821692840192909252166060820152608001610264565b3480156106eb57600080fd5b506102586106fa3660046118fe565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561073157600080fd5b506102f66107403660046118c0565b60096020526000908152604090205481565b34801561075e57600080fd5b506102f6600081565b34801561077357600080fd5b506104816107823660046118db565b6007602052600090815260409020546001600160a01b031681565b3480156107a957600080fd5b506104816107b83660046117d2565b6001602052600090815260409020546001600160a01b031681565b3480156107df57600080fd5b506102366107ee3660046118fe565b611326565b600061080a6000356001600160e01b03191661122a565b90506001600160a01b03811615801590610827575060005460ff16155b6108735760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c73650000006044820152606401610225565b3660008037600080366000845af43d6000803e808015610892573d6000f35b3d6000fd5b505050565b60006001600160e01b03198216637965db0b60e01b14806108cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160a01b039889169997891698968716979587169690941694929360ff808416946101009094041692919061093e90611a36565b80601f016020809104026020016040519081016040528092919081815260200182805461096a90611a36565b80156109b75780601f1061098c576101008083540402835291602001916109b7565b820191906000526020600020905b81548152906001019060200180831161099a57829003601f168201915b5050505050905089565b6109ca33610a3c565b610a0f5760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610aa1565b50565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff166108cd565b600082815260046020526040902060010154610a978161134b565b6108978383611355565b6001600160a01b0381163314610b1f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610225565b610b2982826113f7565b5050565b610b3633610a3c565b610b7b5760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6001600160a01b038116610bd15760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f000000000000000000000000000000000000006044820152606401610225565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610c425760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610225565b610c4f816000600161147a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610c8f33610a3c565b610cd45760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b81610d215760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f6044820152606401610225565b6001600160a01b03811660009081526002602052604090205460ff16610d895760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c69766500000000000000006044820152606401610225565b60005b82811015610f2d57816001600160a01b031660036000868685818110610db457610db4611a70565b9050602002016020810190610dc991906117a8565b6001600160e01b03191681526020810191909152604001600020546001600160a01b031603610e3a5760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d700000006044820152606401610225565b8160036000868685818110610e5157610e51611a70565b9050602002016020810190610e6691906117a8565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558216848483818110610ebb57610ebb611a70565b9050602002016020810190610ed091906117a8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a380610f2581611a9c565b915050610d8c565b50505050565b610f3c33610a3c565b610f815760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610b298282611512565b610f9433610a3c565b610fd95760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610a7c565b61100c33610a3c565b6110515760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6001600160a01b0381166110a75760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610225565b6001600160a01b03811633036110ff5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610225565b6111297fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610a7c565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610aa1565b61115c33610a3c565b6111a15760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6000805460ff1916911515919091179055565b6111bd33610a3c565b6112025760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b61089783838361147a565b6000818152600160205260408120546001600160a01b03166108cd565b6001600160e01b031981166000908152600360205260408120546001600160a01b031661128a5750506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160e01b031982166000908152600360209081526040808320546001600160a01b03168352600290915290205460ff16156112e857506001600160e01b0319166000908152600360205260409020546001600160a01b031690565b50506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b919050565b6000828152600460205260409020600101546113418161134b565b61089783836113f7565b610a398133611571565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b295760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113b33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610b295760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b6114d15760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e7472616374206164647265737300000000006044820152606401610225565b801561150c576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b61089783825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b29576115a4816115e6565b6115af8360206115f8565b6040516020016115c0929190611ab5565b60408051601f198184030181529082905262461bcd60e51b825261022591600401611b36565b60606108cd6001600160a01b03831660145b60606000611607836002611b49565b611612906002611b60565b67ffffffffffffffff81111561162a5761162a611b73565b6040519080825280601f01601f191660200182016040528015611654576020820181803683370190505b509050600360fc1b8160008151811061166f5761166f611a70565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061169e5761169e611a70565b60200101906001600160f81b031916908160001a90535060006116c2846002611b49565b6116cd906001611b60565b90505b6001811115611752577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061170e5761170e611a70565b1a60f81b82828151811061172457611724611a70565b60200101906001600160f81b031916908160001a90535060049490941c9361174b81611b89565b90506116d0565b5083156117a15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610225565b9392505050565b6000602082840312156117ba57600080fd5b81356001600160e01b0319811681146117a157600080fd5b6000602082840312156117e457600080fd5b5035919050565b60005b838110156118065781810151838201526020016117ee565b50506000910152565b600081518084526118278160208601602086016117eb565b601f01601f19169290920160200192915050565b60006101206001600160a01b03808d168452808c166020850152808b166040850152808a1660608501528089166080850152508660a084015260ff861660c084015260ff851660e0840152806101008401526118998184018561180f565b9c9b505050505050505050505050565b80356001600160a01b038116811461132157600080fd5b6000602082840312156118d257600080fd5b6117a1826118a9565b6000602082840312156118ed57600080fd5b813560ff811681146117a157600080fd5b6000806040838503121561191157600080fd5b82359150611921602084016118a9565b90509250929050565b60008060006040848603121561193f57600080fd5b833567ffffffffffffffff8082111561195757600080fd5b818601915086601f83011261196b57600080fd5b81358181111561197a57600080fd5b8760208260051b850101111561198f57600080fd5b6020928301955093506119a591860190506118a9565b90509250925092565b8035801515811461132157600080fd5b600080604083850312156119d157600080fd5b6119da836118a9565b9150611921602084016119ae565b6000602082840312156119fa57600080fd5b6117a1826119ae565b600080600060608486031215611a1857600080fd5b611a21846118a9565b9250602084013591506119a5604085016119ae565b600181811c90821680611a4a57607f821691505b602082108103611a6a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611aae57611aae611a86565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611aed8160178501602088016117eb565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b2a8160288401602088016117eb565b01602801949350505050565b6020815260006117a1602083018461180f565b80820281158282048414176108cd576108cd611a86565b808201808211156108cd576108cd611a86565b634e487b7160e01b600052604160045260246000fd5b600081611b9857611b98611a86565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000adf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
  "deployedBytecode": "0x6080604052600436106101dc5760003560e01c80635cc797d8116101025780638d4fdb4011610095578063a217fddf11610064578063a217fddf14610752578063b4a35e0f14610767578063b911135f1461079d578063d547741f146107d35761022e565b80638d4fdb401461061d578063902293ab1461063d57806391d14854146106df5780639cba9848146107255761022e565b806375b238fc116100d157806375b238fc146105895780637cb00d25146105bd5780637cd5f663146105dd5780638b8f4a65146105fd5761022e565b80635cc797d81461050f57806363a8fd891461052f578063704802751461054957806375829def146105695761022e565b80632f2ff15d1161017a5780634a5df50f116101495780634a5df50f1461042b57806350d2a2761461044b578063550d01a3146104995780635c60da1b146104c95761022e565b80632f2ff15d146103b557806336568abe146103d55780633659cfe6146103f557806336fbad26146104155761022e565b806322985246116101b657806322985246146102c2578063248a9ca31461030457806324d3e6471461033457806324d7806c146103955761022e565b806301ffc9a714610238578063107046bd1461026d5780631785f53c146102a25761022e565b3661022e5760405162461bcd60e51b815260206004820152601460248201527f63616e6e6f74207265636569766520457468657200000000000000000000000060448201526064015b60405180910390fd5b6102366107f3565b005b34801561024457600080fd5b506102586102533660046117a8565b61089c565b60405190151581526020015b60405180910390f35b34801561027957600080fd5b5061028d6102883660046117d2565b6108d3565b6040516102649998979695949392919061183b565b3480156102ae57600080fd5b506102366102bd3660046118c0565b6109c1565b3480156102ce57600080fd5b506102f67ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b604051908152602001610264565b34801561031057600080fd5b506102f661031f3660046117d2565b60009081526004602052604090206001015490565b34801561034057600080fd5b5061037561034f3660046118db565b600b602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff948516815293909216602084015290820152606001610264565b3480156103a157600080fd5b506102586103b03660046118c0565b610a3c565b3480156103c157600080fd5b506102366103d03660046118fe565b610a7c565b3480156103e157600080fd5b506102366103f03660046118fe565b610aa1565b34801561040157600080fd5b506102366104103660046118c0565b610b2d565b34801561042157600080fd5b506102f660065481565b34801561043757600080fd5b5061023661044636600461192a565b610c86565b34801561045757600080fd5b506104816104663660046117a8565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610264565b3480156104a557600080fd5b506102586104b43660046118c0565b60026020526000908152604090205460ff1681565b3480156104d557600080fd5b506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b0316610481565b34801561051b57600080fd5b5061023661052a3660046119be565b610f33565b34801561053b57600080fd5b506000546102589060ff1681565b34801561055557600080fd5b506102366105643660046118c0565b610f8b565b34801561057557600080fd5b506102366105843660046118c0565b611003565b34801561059557600080fd5b506102f67fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b3480156105c957600080fd5b506102366105d83660046119e8565b611153565b3480156105e957600080fd5b506102366105f8366004611a03565b6111b4565b34801561060957600080fd5b506104816106183660046117d2565b61120d565b34801561062957600080fd5b506104816106383660046117a8565b61122a565b34801561064957600080fd5b506106a86106583660046118db565b600a60205260009081526040902080546001909101546001600160a01b039182169181169063ffffffff740100000000000000000000000000000000000000008204811691600160c01b90041684565b604080516001600160a01b03958616815294909316602085015263ffffffff91821692840192909252166060820152608001610264565b3480156106eb57600080fd5b506102586106fa3660046118fe565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561073157600080fd5b506102f66107403660046118c0565b60096020526000908152604090205481565b34801561075e57600080fd5b506102f6600081565b34801561077357600080fd5b506104816107823660046118db565b6007602052600090815260409020546001600160a01b031681565b3480156107a957600080fd5b506104816107b83660046117d2565b6001602052600090815260409020546001600160a01b031681565b3480156107df57600080fd5b506102366107ee3660046118fe565b611326565b600061080a6000356001600160e01b03191661122a565b90506001600160a01b03811615801590610827575060005460ff16155b6108735760405162461bcd60e51b815260206004820152601d60248201527f50726f78793a20696d706c204f522070726f78792069732066616c73650000006044820152606401610225565b3660008037600080366000845af43d6000803e808015610892573d6000f35b3d6000fd5b505050565b60006001600160e01b03198216637965db0b60e01b14806108cd57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160a01b039889169997891698968716979587169690941694929360ff808416946101009094041692919061093e90611a36565b80601f016020809104026020016040519081016040528092919081815260200182805461096a90611a36565b80156109b75780601f1061098c576101008083540402835291602001916109b7565b820191906000526020600020905b81548152906001019060200180831161099a57829003601f168201915b5050505050905089565b6109ca33610a3c565b610a0f5760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610aa1565b50565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff166108cd565b600082815260046020526040902060010154610a978161134b565b6108978383611355565b6001600160a01b0381163314610b1f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610225565b610b2982826113f7565b5050565b610b3633610a3c565b610b7b5760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6001600160a01b038116610bd15760405162461bcd60e51b815260206004820152600d60248201527f696e707574206973207a65726f000000000000000000000000000000000000006044820152606401610225565b6000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b03828116911603610c425760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610225565b610c4f816000600161147a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b610c8f33610a3c565b610cd45760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b81610d215760405162461bcd60e51b815260206004820181905260248201527f50726f78793a205f73656c6563746f727327732073697a65206973207a65726f6044820152606401610225565b6001600160a01b03811660009081526002602052604090205460ff16610d895760405162461bcd60e51b815260206004820152601860248201527f50726f78793a205f696d70206973206e6f7420616c69766500000000000000006044820152606401610225565b60005b82811015610f2d57816001600160a01b031660036000868685818110610db457610db4611a70565b9050602002016020810190610dc991906117a8565b6001600160e01b03191681526020810191909152604001600020546001600160a01b031603610e3a5760405162461bcd60e51b815260206004820152601d60248201527f4c69717569646974795661756c7450726f78793a2073616d6520696d700000006044820152606401610225565b8160036000868685818110610e5157610e51611a70565b9050602002016020810190610e6691906117a8565b6001600160e01b03191681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039283161790558216848483818110610ebb57610ebb611a70565b9050602002016020810190610ed091906117a8565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167f14ebc1c32aa68f4d766e89f3e546cee249f7df25183fc10ab1568d91c2ce9b7b60405160405180910390a380610f2581611a9c565b915050610d8c565b50505050565b610f3c33610a3c565b610f815760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610b298282611512565b610f9433610a3c565b610fd95760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610a7c565b61100c33610a3c565b6110515760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6001600160a01b0381166110a75760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610225565b6001600160a01b03811633036110ff5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610225565b6111297fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610a7c565b610a397fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610aa1565b61115c33610a3c565b6111a15760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b6000805460ff1916911515919091179055565b6111bd33610a3c565b6112025760405162461bcd60e51b81526020600482015260226024820152600080516020611ba183398151915260448201526134b760f11b6064820152608401610225565b61089783838361147a565b6000818152600160205260408120546001600160a01b03166108cd565b6001600160e01b031981166000908152600360205260408120546001600160a01b031661128a5750506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b6001600160e01b031982166000908152600360209081526040808320546001600160a01b03168352600290915290205460ff16156112e857506001600160e01b0319166000908152600360205260409020546001600160a01b031690565b50506000805260016020527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49546001600160a01b031690565b919050565b6000828152600460205260409020600101546113418161134b565b61089783836113f7565b610a398133611571565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b295760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556113b33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610b295760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0383163b6114d15760405162461bcd60e51b815260206004820152601b60248201527f50726f78793a206e6f7420636f6e7472616374206164647265737300000000006044820152606401610225565b801561150c576000828152600160205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b61089783825b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f72558d9bfba4210f9ef095c782589484151f6d90f7a81bb3cb9b33efc695d324910160405180910390a25050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b29576115a4816115e6565b6115af8360206115f8565b6040516020016115c0929190611ab5565b60408051601f198184030181529082905262461bcd60e51b825261022591600401611b36565b60606108cd6001600160a01b03831660145b60606000611607836002611b49565b611612906002611b60565b67ffffffffffffffff81111561162a5761162a611b73565b6040519080825280601f01601f191660200182016040528015611654576020820181803683370190505b509050600360fc1b8160008151811061166f5761166f611a70565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061169e5761169e611a70565b60200101906001600160f81b031916908160001a90535060006116c2846002611b49565b6116cd906001611b60565b90505b6001811115611752577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061170e5761170e611a70565b1a60f81b82828151811061172457611724611a70565b60200101906001600160f81b031916908160001a90535060049490941c9361174b81611b89565b90506116d0565b5083156117a15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610225565b9392505050565b6000602082840312156117ba57600080fd5b81356001600160e01b0319811681146117a157600080fd5b6000602082840312156117e457600080fd5b5035919050565b60005b838110156118065781810151838201526020016117ee565b50506000910152565b600081518084526118278160208601602086016117eb565b601f01601f19169290920160200192915050565b60006101206001600160a01b03808d168452808c166020850152808b166040850152808a1660608501528089166080850152508660a084015260ff861660c084015260ff851660e0840152806101008401526118998184018561180f565b9c9b505050505050505050505050565b80356001600160a01b038116811461132157600080fd5b6000602082840312156118d257600080fd5b6117a1826118a9565b6000602082840312156118ed57600080fd5b813560ff811681146117a157600080fd5b6000806040838503121561191157600080fd5b82359150611921602084016118a9565b90509250929050565b60008060006040848603121561193f57600080fd5b833567ffffffffffffffff8082111561195757600080fd5b818601915086601f83011261196b57600080fd5b81358181111561197a57600080fd5b8760208260051b850101111561198f57600080fd5b6020928301955093506119a591860190506118a9565b90509250925092565b8035801515811461132157600080fd5b600080604083850312156119d157600080fd5b6119da836118a9565b9150611921602084016119ae565b6000602082840312156119fa57600080fd5b6117a1826119ae565b600080600060608486031215611a1857600080fd5b611a21846118a9565b9250602084013591506119a5604085016119ae565b600181811c90821680611a4a57607f821691505b602082108103611a6a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611aae57611aae611a86565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611aed8160178501602088016117eb565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611b2a8160288401602088016117eb565b01602801949350505050565b6020815260006117a1602083018461180f565b80820281158282048414176108cd576108cd611a86565b808201808211156108cd576108cd611a86565b634e487b7160e01b600052604160045260246000fd5b600081611b9857611b98611a86565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSelectorImplementation2(bytes4)": {
        "details": "view implementation address of selector of function",
        "params": {
          "_selector": "selector of function"
        },
        "returns": {
          "impl": "address of the implementation"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "implementation()": {
        "details": "returns the implementation"
      },
      "implementation2(uint256)": {
        "details": "view implementation address of the proxy[index]",
        "params": {
          "_index": "index of proxy"
        },
        "returns": {
          "_0": "address of the implementation"
        }
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAliveImplementation2(address,bool)": {
        "details": "set alive status of implementation",
        "params": {
          "_alive": "alive status",
          "newImplementation": "Address of the new implementation."
        }
      },
      "setImplementation2(address,uint256,bool)": {
        "details": "set the implementation address and status of the proxy[index]",
        "params": {
          "_alive": "_alive",
          "_index": "index",
          "newImplementation": "Address of the new implementation."
        }
      },
      "setProxyPause(bool)": {
        "params": {
          "_pause": "true:pause or false:resume"
        }
      },
      "setSelectorImplementations2(bytes4[],address)": {
        "details": "set selectors of Implementation",
        "params": {
          "_imp": "implementation address",
          "_selectors": "being added selectors"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      },
      "upgradeTo(address)": {
        "params": {
          "impl": "New implementation contract address"
        }
      }
    },
    "title": "L1BurnVaultProxy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setProxyPause(bool)": {
        "notice": "Set pause state"
      },
      "upgradeTo(address)": {
        "notice": "Set implementation contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 32384,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 32388,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 32392,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 32396,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7035,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7037,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "projectCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7041,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "l1TokenFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 7046,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "projects",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(ProjectInfo)28858_storage)"
      },
      {
        "astId": 7050,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "projectTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7055,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "l2Info",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint8,t_struct(L2Info)28867_storage)"
      },
      {
        "astId": 7060,
        "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
        "label": "publicInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint8,t_struct(PublicSaleSet)29031_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ProjectInfo)28858_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibProject.ProjectInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectInfo)28858_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(L2Info)28867_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LibProject.L2Info)",
        "numberOfBytes": "32",
        "value": "t_struct(L2Info)28867_storage"
      },
      "t_mapping(t_uint8,t_struct(PublicSaleSet)29031_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LibProject.PublicSaleSet)",
        "numberOfBytes": "32",
        "value": "t_struct(PublicSaleSet)29031_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(L2Info)28867_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.L2Info",
        "members": [
          {
            "astId": 28860,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "l2TokenFactory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 28862,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "l2ProjectManager",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28864,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "depositMinGasLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 28866,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "sendMsgMinGasLimit",
            "offset": 24,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProjectInfo)28858_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.ProjectInfo",
        "members": [
          {
            "astId": 28841,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "projectOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 28843,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "tokenOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 28845,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "l1Token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 28847,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "l2Token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 28849,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "addressManager",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 28851,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "initialTotalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 28853,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "tokenType",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 28855,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "l2Type",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 28857,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "projectName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(PublicSaleSet)29031_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.PublicSaleSet",
        "members": [
          {
            "astId": 29026,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "minPercents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29028,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "maxPercents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 29030,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "delayTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L1/L1BurnVaultProxy.sol:L1BurnVaultProxy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}