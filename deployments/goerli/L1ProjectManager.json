{
  "address": "0x16402516FB7FDccAB08Cb52a83011e7A5bCF281D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTotalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "CreatedProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "LaunchedProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "l2Type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2TokenFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2ProjectManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "depositMinGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "sendMsgMinGasLimit",
          "type": "uint32"
        }
      ],
      "name": "SetL2Infos",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "l2Type",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        }
      ],
      "name": "SetL2Token",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "name": "createProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "l1TokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "l2Info",
      "outputs": [
        {
          "internalType": "address",
          "name": "l2TokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2ProjectManager",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "depositMinGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sendMsgMinGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "launchProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "launchProjectExceptCheckPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "l2Type",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "publicInfo",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "minPercents",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "maxPercents",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "delayTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "tokenTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_l1TokenFactorys",
          "type": "address[]"
        }
      ],
      "name": "setL1TokenFactories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "l2Type",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_l2TokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2ProjectManager",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_depositMinGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_sendMsgMinGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setL2Infos",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "setL2PublicSaleValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        }
      ],
      "name": "validateTokamakVaultsExceptPublic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "boolValidate",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stosTier1",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stosTier2",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stosTier3",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stosTier4",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tier1Percents",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tier2Percents",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tier3Percents",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tier4Percents",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "total1roundSaleAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "total2roundSaleAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "saleTokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payTokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "hardcapAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "changeTOSPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "startWhiteTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endWhiteTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start1roundTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end1roundTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "snapshotTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "start2roundTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "end2roundTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSaleVault",
              "name": "vaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "claimCounts",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "secondClaimTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "roundInterval",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
              "name": "claimParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receiveAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "secondClaimTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "roundIntervalTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint24",
                  "name": "fee",
                  "type": "uint24"
                }
              ],
              "internalType": "struct LibProject.InitalParameterVestingFundVault",
              "name": "vestingParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterPublicSale",
          "name": "publicSaleParams",
          "type": "tuple"
        }
      ],
      "name": "validationPublicSaleVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "resean",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "validationVaultsParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "resean",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "validationVaultsParametersExceptPublic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "resean",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_l2Type",
          "type": "uint8"
        }
      ],
      "name": "viewL2Info",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "l2TokenFactory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2ProjectManager",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "depositMinGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sendMsgMinGasLimit",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibProject.L2Info",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa0592fe4300d89e98c968f24239c2b9ef48e39ea1f7e1c50e40e90a94abffd3",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x16402516FB7FDccAB08Cb52a83011e7A5bCF281D",
    "transactionIndex": 24,
    "gasUsed": "4420015",
    "logsBloom": "0x
    "blockHash": "0x6e881cada4053a142963a7e80ae135738866a68946ac2528ea392a121a1ac6d2",
    "transactionHash": "0xfa0592fe4300d89e98c968f24239c2b9ef48e39ea1f7e1c50e40e90a94abffd3",
    "logs": [],
    "blockNumber": 10561289,
    "cumulativeGasUsed": "6979431",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "b8bc7b679201ac60ddff5f0367816a76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"CreatedProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"LaunchedProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"l2Type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2TokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2ProjectManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositMinGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sendMsgMinGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetL2Infos\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"l2Type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"}],\"name\":\"SetL2Token\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"createProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"l1TokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"l2Info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"l2TokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2ProjectManager\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"depositMinGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sendMsgMinGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"launchProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"launchProjectExceptCheckPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"l2Type\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"publicInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"minPercents\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPercents\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"delayTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"tokenTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_l1TokenFactorys\",\"type\":\"address[]\"}],\"name\":\"setL1TokenFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"l2Type\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_l2TokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2ProjectManager\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_depositMinGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_sendMsgMinGasLimit\",\"type\":\"uint32\"}],\"name\":\"setL2Infos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_delayTime\",\"type\":\"uint256\"}],\"name\":\"setL2PublicSaleValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"}],\"name\":\"validateTokamakVaultsExceptPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"boolValidate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"}],\"name\":\"validationPublicSaleVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"resean\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"validationVaultsParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"resean\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"validationVaultsParametersExceptPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"resean\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_l2Type\",\"type\":\"uint8\"}],\"name\":\"viewL2Info\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"l2TokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2ProjectManager\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"depositMinGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sendMsgMinGasLimit\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.L2Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"createProject(address,address,address,uint256,uint8,string,string,string)\":{\"details\":\"\\ud504\\ub85c\\uc81d\\ud2b8 \\uc0dd\\uc131\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"title\":\"L1ProjectManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1ProjectManager.sol\":\"L1ProjectManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L1/L1ProjectManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\nimport \\\"./L1ProjectManagerStorage.sol\\\";\\n\\nimport { IERC20Factory } from \\\"./interfaces/IERC20Factory.sol\\\";\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface L2ProjectManagerI {\\n    function distributesL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    ) external;\\n}\\n\\ninterface L1CrossDomainMessengerI {\\n    function sendMessage(\\n        address _target,\\n        bytes memory _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\\ninterface L1BridgeI {\\n    function depositERC20To(\\n        address _l1Token,\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external;\\n}\\n\\ninterface IIERC20 {\\n    function mint(address account, uint256 amount) external;\\n}\\n\\n/**\\n * @title L1ProjectManager\\n * @dev\\n */\\ncontract L1ProjectManager is ProxyStorage, AccessibleCommon, L1ProjectManagerStorage {\\n    using SafeERC20 for IERC20;\\n\\n    event CreatedProject(\\n        address l1Token,\\n        uint256 projectId,\\n        address tokenOwner,\\n        address projectOwner,\\n        address addressManager,\\n        uint256 initialTotalSupply,\\n        string projectName, string tokenName, string tokenSymbol);\\n\\n    event SetL2Token(uint256 projectId, uint8 l2Type, address addressManager, address l2Token);\\n    event SetL2Infos(uint8 l2Type, address l2TokenFactory, address l2ProjectManager, uint32 depositMinGasLimit, uint32 sendMsgMinGasLimit);\\n    event LaunchedProject(\\n        uint256 projectId,\\n        address l1Token,\\n        address l2Token,\\n        uint256 totalAmount);\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor() {\\n    }\\n\\n    /* ========== onlyOwner ========== */\\n\\n    function setL2Infos(\\n        uint8 l2Type,\\n        address _l2TokenFactory,\\n        address _l2ProjectManager,\\n        uint32 _depositMinGasLimit,\\n        uint32 _sendMsgMinGasLimit\\n    )\\n        external\\n        nonZeroAddress(_l2TokenFactory) nonZeroAddress(_l2ProjectManager)\\n        nonZero(_depositMinGasLimit) nonZero(_sendMsgMinGasLimit)\\n        onlyOwner\\n    {\\n        require(l2Type < uint8(LibProject.L2_TYPE.NONE), \\\"unsupported l2Type\\\");\\n        require(\\n            l2Info[l2Type].l2TokenFactory != _l2TokenFactory\\n            || l2Info[l2Type].l2ProjectManager != _l2ProjectManager\\n            || l2Info[l2Type].depositMinGasLimit != _depositMinGasLimit\\n            || l2Info[l2Type].sendMsgMinGasLimit != _sendMsgMinGasLimit , \\\"same\\\");\\n\\n        LibProject.L2Info memory info = LibProject.L2Info({\\n                l2TokenFactory: _l2TokenFactory,\\n                l2ProjectManager: _l2ProjectManager,\\n                depositMinGasLimit: _depositMinGasLimit,\\n                sendMsgMinGasLimit: _sendMsgMinGasLimit\\n        });\\n\\n        l2Info[l2Type] = info;\\n\\n        emit SetL2Infos(l2Type, _l2TokenFactory, _l2ProjectManager, _depositMinGasLimit, _sendMsgMinGasLimit);\\n    }\\n\\n    function setL1TokenFactories(uint8[] memory tokenTypes, address[] memory _l1TokenFactorys)\\n        external onlyOwner\\n    {\\n        require(tokenTypes.length != 0 && tokenTypes.length == _l1TokenFactorys.length, \\\"wrong length\\\");\\n        uint256 len = tokenTypes.length;\\n\\n        for (uint256 i = 0; i < len; i++){\\n            require(tokenTypes[i] < uint8(LibProject.TOKEN_TYPE.NONE), \\\"unsupported token type\\\");\\n            require(l1TokenFactory[tokenTypes[i]] != _l1TokenFactorys[i], \\\"same address\\\");\\n            l1TokenFactory[tokenTypes[i]] = _l1TokenFactorys[i];\\n        }\\n    }\\n\\n    function setL2PublicSaleValue(\\n        uint8 _min,\\n        uint8 _max,\\n        uint256 _delayTime\\n    )\\n        external\\n        onlyOwner\\n    {\\n        LibProject.PublicSaleSet memory set = LibProject.PublicSaleSet({\\n            minPercents: _min,\\n            maxPercents: _max,\\n            delayTime: _delayTime\\n        });\\n\\n        publicInfo[0] = set;\\n    }\\n\\n    /* ========== Only ProjectOwner ========== */\\n\\n    /// @dev \\ud504\\ub85c\\uc81d\\ud2b8 \\uc0dd\\uc131\\n    function createProject(\\n        address tokenOwner,\\n        address projectOwner,\\n        address addressManager,\\n        uint256 initialTotalSupply,\\n        uint8 tokenType,\\n        string memory projectName,\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    )\\n        external\\n        returns (uint256)\\n    {\\n        require(tokenOwner != address(0) && projectOwner != address(0) && addressManager != address(0),\\n            \\\"zero address\\\");\\n        require(bytes(projectName).length != 0, \\\"projectName is null\\\");\\n        require(bytes(tokenName).length != 0, \\\"tokenName is null\\\");\\n        require(bytes(tokenSymbol).length != 0, \\\"tokenSymbol is null\\\");\\n        require(tokenType < uint8(LibProject.TOKEN_TYPE.NONE)\\n            && address(l1TokenFactory[tokenType]) != address(0), \\\"wrong tokenType or zero l1TokenFactory\\\");\\n\\n        address projectToken = IERC20Factory(l1TokenFactory[tokenType]).create(\\n            tokenName, tokenSymbol, initialTotalSupply, address(this)\\n        );\\n\\n        require(projectToken != address(0), \\\"zero projectToken\\\");\\n        uint256 projectId = ++projectCount;\\n        // address _tokenOwner = tokenOwner;\\n\\n        projects[projectId] = LibProject.ProjectInfo({\\n            projectOwner: projectOwner,\\n            tokenOwner : tokenOwner,\\n            l1Token : projectToken,\\n            l2Token : address(0),\\n            addressManager : addressManager,\\n            initialTotalSupply : initialTotalSupply,\\n            tokenType : tokenType,\\n            l2Type : uint8(0),\\n            projectName : projectName\\n        });\\n\\n        projectTokens[projectToken] = projectId;\\n\\n        emit CreatedProject(\\n            projectToken, projectId, tokenOwner, projectOwner, addressManager, initialTotalSupply,\\n            projectName,  tokenName, tokenSymbol );\\n        return projectId;\\n    }\\n\\n    function launchProjectExceptCheckPublic(\\n        uint256 projectId,\\n        address l2Token,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external nonZeroAddress(l2Token) nonZero(totalAmount)\\n    {\\n        LibProject.ProjectInfo memory info = projects[projectId];\\n        require(info.projectOwner != address(0) && msg.sender == info.projectOwner, \\\"caller is not projectOwner.\\\");\\n        require(info.l2Token == address(0), \\\"already launched\\\");\\n        require(projectTokens[info.l1Token] == projectId, \\\"wrong l1Token\\\");\\n\\n        address l1Messenger = LibProject.getL1CommunicationMessenger(info.addressManager);\\n        require(l1Messenger != address(0), \\\"l1Messenger is ZeroAddress\\\");\\n        bytes memory  callData = abi.encodeWithSelector(\\n                    L2ProjectManagerI.distributesL2Token.selector,\\n                    info.l1Token,\\n                    l2Token,\\n                    projectId,\\n                    totalAmount,\\n                    tokamakVaults,\\n                    customScheduleVaults,\\n                    customNonScheduleVaults\\n                ) ;\\n        uint256 totalAllocatedAmount = 0;\\n\\n        // \\uc785\\ub825 \\ub370\\uc774\\ud0c0 \\uac80\\uc99d\\n        // (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = LibProject.validateTokamakVaults(tokamakVaults);\\n        (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = validateTokamakVaultsExceptPublic(tokamakVaults);\\n\\n        require(boolValidateTokamakVaults, \\\"TokamakVaults vaildate fail\\\");\\n\\n        (bool boolValidatePublicVaults,) = validationPublicSaleVaults(tokamakVaults.publicSaleParams);\\n        require(boolValidatePublicVaults, \\\"PublicVault vaildate fail\\\");\\n\\n        totalAllocatedAmount += tokamakVaultsTotalAmount;\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom1, uint256 custom1TotalAmount) = LibProject.validateScheduleVault(customScheduleVaults);\\n            require(boolValidateCustom1, \\\"customScheduleVaults vaildate fail\\\");\\n            totalAllocatedAmount += custom1TotalAmount;\\n        }\\n\\n        if(customNonScheduleVaults.length != 0){\\n            (bool boolValidateCustom2, uint256 custom2TotalAmount) = LibProject.validateNonScheduleVault(customNonScheduleVaults);\\n            require(boolValidateCustom2, \\\"customNonScheduleVaults vaildate fail\\\");\\n            totalAllocatedAmount += custom2TotalAmount;\\n        }\\n        require(totalAllocatedAmount == totalAmount, \\\"totalAmount is different from vaults allocated amount\\\");\\n\\n        uint256 id = projectId;\\n\\n        // 1. L2\\ud1a0\\ud070 \\uc815\\ubcf4\\ub97c \\uc800\\uc7a5\\ud55c\\ub2e4.\\n        projects[id].l2Token = l2Token;\\n        info.l2Token = l2Token;\\n\\n        uint256 balance = IERC20(projects[id].l1Token).balanceOf(address(this));\\n\\n        // 2. L1 \\ud1a0\\ud070 \\ubc1c\\ud589\\ud558\\uace0,\\n        if (balance <= info.initialTotalSupply && info.tokenType != 0) {\\n            IIERC20(info.l1Token).mint(address(this), info.initialTotalSupply - balance);\\n            balance = IERC20(projects[id].l1Token).balanceOf(address(this));\\n        }\\n\\n        require(balance >= info.initialTotalSupply, \\\"balance is insufficient\\\");\\n\\n        LibProject.L2Info memory _l2Info = l2Info[info.l2Type];\\n\\n        // 3. L2\\ub85c \\ub514\\ud30c\\uc9d3 \\ud55c\\ub2e4.\\n        _depositL1TokenToL2(\\n            info.addressManager,\\n            info.l1Token,\\n            info.l2Token,\\n            _l2Info.l2ProjectManager,\\n            info.initialTotalSupply,\\n            _l2Info.depositMinGasLimit,\\n            abi.encode(id)\\n        );\\n        // bytes memory callData = abi.encodeWithSelector(L2ProjectManagerI.distributesL2Token.selector, functionParams);\\n\\n        // 4. \\ucee4\\uc2a4\\ud140 \\ubc30\\ud3ec\\uc815\\ubcf4\\ub97c L2\\uc5d0 \\ubcf4\\ub0b8\\ub2e4.\\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\\n                _l2Info.l2ProjectManager,\\n                callData,\\n                _l2Info.sendMsgMinGasLimit\\n            );\\n\\n        emit LaunchedProject(id, info.l1Token, info.l2Token, info.initialTotalSupply);\\n    }\\n\\n    function launchProject(\\n        uint256 projectId,\\n        address l2Token,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external nonZeroAddress(l2Token) nonZero(totalAmount)\\n    {\\n        LibProject.ProjectInfo memory info = projects[projectId];\\n        require(info.projectOwner != address(0) && msg.sender == info.projectOwner, \\\"caller is not projectOwner.\\\");\\n        require(info.l2Token == address(0), \\\"already launched\\\");\\n        require(projectTokens[info.l1Token] == projectId, \\\"wrong l1Token\\\");\\n\\n        address l1Messenger = LibProject.getL1CommunicationMessenger(info.addressManager);\\n        require(l1Messenger != address(0), \\\"l1Messenger is ZeroAddress\\\");\\n        bytes memory  callData = abi.encodeWithSelector(\\n                    L2ProjectManagerI.distributesL2Token.selector,\\n                    info.l1Token,\\n                    l2Token,\\n                    projectId,\\n                    totalAmount,\\n                    tokamakVaults,\\n                    customScheduleVaults,\\n                    customNonScheduleVaults\\n                ) ;\\n        uint256 totalAllocatedAmount = 0;\\n\\n        // \\uc785\\ub825 \\ub370\\uc774\\ud0c0 \\uac80\\uc99d\\n        (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = LibProject.validateTokamakVaults(tokamakVaults);\\n        require(boolValidateTokamakVaults, \\\"TokamakVaults vaildate fail\\\");\\n\\n        (bool boolValidatePublicVaults,) = validationPublicSaleVaults(tokamakVaults.publicSaleParams);\\n        require(boolValidatePublicVaults, \\\"PublicVault vaildate fail\\\");\\n\\n        totalAllocatedAmount += tokamakVaultsTotalAmount;\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom1, uint256 custom1TotalAmount) = LibProject.validateScheduleVault(customScheduleVaults);\\n            require(boolValidateCustom1, \\\"customScheduleVaults vaildate fail\\\");\\n            totalAllocatedAmount += custom1TotalAmount;\\n        }\\n\\n        if(customNonScheduleVaults.length != 0){\\n            (bool boolValidateCustom2, uint256 custom2TotalAmount) = LibProject.validateNonScheduleVault(customNonScheduleVaults);\\n            require(boolValidateCustom2, \\\"customNonScheduleVaults vaildate fail\\\");\\n            totalAllocatedAmount += custom2TotalAmount;\\n        }\\n        require(totalAllocatedAmount == totalAmount, \\\"totalAmount is different from vaults allocated amount\\\");\\n\\n        uint256 id = projectId;\\n\\n        // 1. L2\\ud1a0\\ud070 \\uc815\\ubcf4\\ub97c \\uc800\\uc7a5\\ud55c\\ub2e4.\\n        projects[id].l2Token = l2Token;\\n        info.l2Token = l2Token;\\n\\n        uint256 balance = IERC20(projects[id].l1Token).balanceOf(address(this));\\n\\n        // 2. L1 \\ud1a0\\ud070 \\ubc1c\\ud589\\ud558\\uace0,\\n        if (balance <= info.initialTotalSupply && info.tokenType != 0) {\\n            IIERC20(info.l1Token).mint(address(this), info.initialTotalSupply - balance);\\n            balance = IERC20(projects[id].l1Token).balanceOf(address(this));\\n        }\\n\\n        require(balance >= info.initialTotalSupply, \\\"balance is insufficient\\\");\\n\\n        LibProject.L2Info memory _l2Info = l2Info[info.l2Type];\\n\\n        // 3. L2\\ub85c \\ub514\\ud30c\\uc9d3 \\ud55c\\ub2e4.\\n        _depositL1TokenToL2(\\n            info.addressManager,\\n            info.l1Token,\\n            info.l2Token,\\n            _l2Info.l2ProjectManager,\\n            info.initialTotalSupply,\\n            _l2Info.depositMinGasLimit,\\n            abi.encode(id)\\n        );\\n        // bytes memory callData = abi.encodeWithSelector(L2ProjectManagerI.distributesL2Token.selector, functionParams);\\n\\n        // 4. \\ucee4\\uc2a4\\ud140 \\ubc30\\ud3ec\\uc815\\ubcf4\\ub97c L2\\uc5d0 \\ubcf4\\ub0b8\\ub2e4.\\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\\n                _l2Info.l2ProjectManager,\\n                callData,\\n                _l2Info.sendMsgMinGasLimit\\n            );\\n\\n        emit LaunchedProject(id, info.l1Token, info.l2Token, info.initialTotalSupply);\\n    }\\n\\n    /* ========== VIEW ========== */\\n    function viewL2Info(uint8 _l2Type) external view returns (LibProject.L2Info memory) {\\n        return l2Info[_l2Type];\\n    }\\n\\n    function validationVaultsParameters(\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    ) external view returns(bool valid, string memory resean) {\\n\\n        uint256 totalAllocatedAmount = 0;\\n\\n        (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = LibProject.validateTokamakVaults(tokamakVaults);\\n        if(!boolValidateTokamakVaults) {\\n            return (false, \\\"F1\\\");\\n        }\\n\\n        (bool boolValidatePublicVaults,) = validationPublicSaleVaults(tokamakVaults.publicSaleParams);\\n        require(boolValidatePublicVaults, \\\"F1-1\\\");\\n\\n        totalAllocatedAmount += tokamakVaultsTotalAmount;\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom1, uint256 custom1TotalAmount) = LibProject.validateScheduleVault(customScheduleVaults);\\n            totalAllocatedAmount += custom1TotalAmount;\\n            if(!boolValidateCustom1) {\\n                return (false, \\\"F2\\\");\\n            }\\n        }\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom2, uint256 custom2TotalAmount) = LibProject.validateNonScheduleVault(customNonScheduleVaults);\\n            totalAllocatedAmount += custom2TotalAmount;\\n            if(!boolValidateCustom2) {\\n                return (false, \\\"F3\\\");\\n            }\\n        }\\n\\n        if(totalAmount != totalAllocatedAmount) return (false, 'F4');\\n        return (true, '');\\n    }\\n\\n\\n    function validationVaultsParametersExceptPublic(\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    ) external view returns(bool valid, string memory resean) {\\n\\n        uint256 totalAllocatedAmount = 0;\\n\\n        (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = validateTokamakVaultsExceptPublic(tokamakVaults);\\n        if(!boolValidateTokamakVaults) {\\n            return (false, \\\"F0\\\");\\n        }\\n\\n        (bool boolValidatePublicVaults,) = validationPublicSaleVaults(tokamakVaults.publicSaleParams);\\n        require(boolValidatePublicVaults, \\\"F1-1\\\");\\n\\n        totalAllocatedAmount += tokamakVaultsTotalAmount;\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom1, uint256 custom1TotalAmount) = LibProject.validateScheduleVault(customScheduleVaults);\\n            totalAllocatedAmount += custom1TotalAmount;\\n            if(!boolValidateCustom1) {\\n                return (false, \\\"F2\\\");\\n            }\\n        }\\n\\n        if(customScheduleVaults.length != 0){\\n            (bool boolValidateCustom2, uint256 custom2TotalAmount) = LibProject.validateNonScheduleVault(customNonScheduleVaults);\\n            totalAllocatedAmount += custom2TotalAmount;\\n            if(!boolValidateCustom2) {\\n                return (false, \\\"F3\\\");\\n            }\\n        }\\n\\n        if(totalAmount != totalAllocatedAmount) return (false, 'F4');\\n        return (true, '');\\n    }\\n\\n    function validationPublicSaleVaults(\\n        LibProject.InitalParameterPublicSale memory publicSaleParams\\n    ) public view returns(bool valid, string memory resean) {\\n        LibProject.PublicSaleSet memory sale = publicInfo[0];\\n\\n        if (\\n            sale.minPercents > publicSaleParams.vaultParams.changeTOSPercent ||\\n            sale.maxPercents < publicSaleParams.vaultParams.changeTOSPercent\\n        ) return (false, \\\"F1\\\");\\n\\n        if (\\n            (block.timestamp + sale.delayTime) > publicSaleParams.vaultParams.startWhiteTime\\n        ) return (false, \\\"F1\\\");\\n\\n\\n        return (true, '');\\n    }\\n\\n    /* === ======= internal ========== */\\n    function _depositL1TokenToL2(\\n        address addressManager, address l1Token, address l2Token, address depositTo,\\n        uint256 amount, uint32 _minGasLimit, bytes memory data)\\n        internal\\n    {\\n        address l1Bridge = LibProject.getL1Bridge(addressManager);\\n        require(l1Bridge != address(0), \\\"l1Bridge is ZeroAddress\\\");\\n\\n        uint256 allowance = IERC20(l1Token).allowance(address(this), l1Bridge);\\n\\n        if (allowance < amount) IERC20(l1Token).approve(l1Bridge, type(uint256).max);\\n\\n        L1BridgeI(l1Bridge).depositERC20To(\\n            l1Token,\\n            l2Token,\\n            depositTo,\\n            amount,\\n            _minGasLimit,\\n            data\\n        );\\n    }\\n\\n    function validateTokamakVaultsExceptPublic(LibProject.TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n            tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n            tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n            tokamakVaults.initialVaultParams.startTime == 0 ||\\n            tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime < tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime < tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime < tokamakVaults.tosAirdropParams.firstClaimTime ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime < tokamakVaults.tonAirdropParams.firstClaimTime\\n            )\\n            return (boolValidate, totalAmount);\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n}\",\"keccak256\":\"0x5ec264e8122e94e95ef89f1a2f03927eda513d7dee87fc863b004b9ad5b37a94\",\"license\":\"MIT\"},\"contracts/L1/L1ProjectManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\n\\n/**\\n * @title L1ProjectManagerStorage\\n * @dev\\n */\\ncontract L1ProjectManagerStorage {\\n\\n    bool internal free = true;\\n\\n    uint256 public projectCount;\\n\\n    // TOKEN_TYPE - l1TokenFactory\\n    mapping(uint8 => address) public l1TokenFactory;\\n\\n    // projectIndex - ProjectInfo\\n    mapping(uint256 => LibProject.ProjectInfo) public projects;\\n\\n    // l1TokenAddress - projectIndex\\n    mapping(address => uint256) public projectTokens;\\n\\n    // l2type - l2TokenFactory\\n    mapping(uint8 => LibProject.L2Info) public l2Info;\\n\\n    // PublicSaleCheck\\n    mapping(uint8 => LibProject.PublicSaleSet) public publicInfo;\\n\\n\\n    modifier onlyProjectOwner(uint256 projectid) {\\n        require(projects[projectid].projectOwner != address(0) &&\\n            msg.sender == projects[projectid].projectOwner, \\\"caller is not projectOwner.\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n}\",\"keccak256\":\"0xd343696a5c618e9489952341e603eab748aea6c5a38c5c41c0ebe069b573138f\",\"license\":\"MIT\"},\"contracts/L1/interfaces/IERC20Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20Factory {\\n\\n    /// @dev Create a ERC20Factory\\n    /// @param name name\\n    /// @param symbol symbol\\n    /// @param initialSupply initialSupply\\n    /// @param owner  owner address\\n    /// @return contract address\\n    function create(\\n        string calldata name,\\n        string calldata symbol,\\n        uint256 initialSupply,\\n        address owner\\n    ) external returns (address) ;\\n\\n    /// @dev Last generated contract information\\n    function lastestCreated() external view returns (address contractAddress, string memory name, string memory symbol);\\n\\n    /// @dev Contract information stored in the index\\n    function getContracts(uint256 _index) external view returns (address contractAddress, string memory name, string memory symbol);\\n\\n\\n}\\n\",\"keccak256\":\"0x1de3e46b7b7bb4885fb7a23affe7c4258a9b92ad36a5677618c6afa45b3d4be4\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/LibPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibPool {\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n}\",\"keccak256\":\"0x4f96e027ec71a0666159676b2426fbb90bd9de37076c03e225e533df8ff30ab5\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./LibPool.sol\\\";\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardTonTosPoolParams;\\n        InitalParameterLiquidityRewardVault rewardProjectTosPoolParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n        InitalParameterVestingFundVault vestingParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256 claimCounts;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundInterval;\\n    }\\n\\n    struct InitalParameterVestingFundVault {\\n        address receiveAddress;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundIntervalTime;\\n        uint24 fee;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        LibPool.PoolInfo poolParams;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    struct PublicSaleSet {\\n        uint8 minPercents;\\n        uint8 maxPercents;\\n        uint256 delayTime;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n            tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n            tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n            tokamakVaults.initialVaultParams.startTime == 0 ||\\n            tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime < tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime < tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime < tokamakVaults.tosAirdropParams.firstClaimTime ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime < tokamakVaults.tonAirdropParams.firstClaimTime\\n            )\\n            return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier1 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier2 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier3 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier4 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier1Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.payTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.changeTOSPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.startWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.snapshotTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.claimCounts == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.roundInterval == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.totalClaimCount == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.roundIntervalTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.fee == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.tier1Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents) != 10000\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) < (\\n                tokamakVaults.publicSaleParams.vaultParams.hardcapAmount *\\n                tokamakVaults.publicSaleParams.vaultParams.payTokenPrice /\\n                tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice\\n            )\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime < tokamakVaults.publicSaleParams.vaultParams.startWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime < tokamakVaults.publicSaleParams.vaultParams.endWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime < tokamakVaults.publicSaleParams.vaultParams.start1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime < tokamakVaults.publicSaleParams.vaultParams.end1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime < tokamakVaults.publicSaleParams.vaultParams.start2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime < tokamakVaults.publicSaleParams.vaultParams.end2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime < tokamakVaults.publicSaleParams.claimParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime < tokamakVaults.publicSaleParams.vestingParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0 ||\\n                    (customs[i].params.secondClaimTime < customs[i].params.firstClaimTime)\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x703396a30650c65636770ff0712ade52385643050c6d5f2738924c4a03b5bf53\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff1916600117905534801561001d57600080fd5b50614e9a8061002d6000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806368f52eb31161012a57806391d14854116100bd578063b4a35e0f1161008c578063b911135f11610071578063b911135f146106fb578063d547741f14610724578063eeff1eb21461073757600080fd5b8063b4a35e0f146105f1578063b851550c1461061a57600080fd5b806391d148541461057d5780639cba9848146105b6578063a217fddf146105d6578063a902c63a146105de57600080fd5b806375b238fc116100f957806375b238fc146104ac5780637e56a80f146104d3578063846fa8f8146104e6578063902293ab146104f957600080fd5b806368f52eb314610460578063704802751461047357806374918e841461048657806375829def1461049957600080fd5b806324d7806c116101bd57806336fbad261161018c578063516688ea11610171578063516688ea14610406578063550d01a31461043057806363a8fd891461045357600080fd5b806336fbad26146103bc57806350d2a276146103c557600080fd5b806324d7806c146103705780632f2ff15d146103835780632f791a211461039657806336568abe146103a957600080fd5b806320a32b63116101f957806320a32b63146102b157806322985246146102c4578063248a9ca3146102f957806324d3e6471461031c57600080fd5b806301ffc9a71461022b5780630e8a820514610253578063107046bd146102745780631785f53c1461029c575b600080fd5b61023e6102393660046136d6565b61074a565b60405190151581526020015b60405180910390f35b610266610261366004613a59565b610781565b60405161024a929190613ac6565b610287610282366004613ae9565b6108a7565b60405161024a99989796959493929190613b02565b6102af6102aa366004613b70565b610995565b005b6102af6102bf366004613fcc565b610a27565b6102eb7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161024a565b6102eb610307366004613ae9565b60009081526004602052604090206001015490565b61035061032a36600461407a565b600b602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff94851681529390921660208401529082015260600161024a565b61023e61037e366004613b70565b611613565b6102af610391366004614095565b611653565b6102af6103a4366004613fcc565b61167d565b6102af6103b7366004614095565b611a6d565b6102eb60065481565b6103ee6103d33660046136d6565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b6104196104143660046140c5565b611af9565b60408051921515835260208301919091520161024a565b61023e61043e366004613b70565b60026020526000908152604090205460ff1681565b60005461023e9060ff1681565b6102af61046e3660046140e2565b611f53565b6102af610481366004613b70565b612361565b6102eb61049436600461414b565b6123eb565b6102af6104a7366004613b70565b612921565b6102eb7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6102666104e1366004614220565b612a83565b6102af6104f4366004614306565b612cfd565b61054661050736600461407a565b600a60205260009081526040902080546001909101546001600160a01b039182169181169063ffffffff600160a01b8204811691600160c01b90041684565b604080516001600160a01b03958616815294909316602085015263ffffffff9182169284019290925216606082015260800161024a565b61023e61058b366004614095565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102eb6105c4366004613b70565b60096020526000908152604090205481565b6102eb600081565b6102af6105ec3660046143c6565b612f6c565b6103ee6105ff36600461407a565b6007602052600090815260409020546001600160a01b031681565b6106b061062836600461407a565b6040805160808101825260008082526020820181905291810182905260608101919091525060ff166000908152600a6020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b8204811693830193909352600160c01b9004909116606082015290565b6040805182516001600160a01b039081168252602080850151909116908201528282015163ffffffff908116928201929092526060928301519091169181019190915260800161024a565b6103ee610709366004613ae9565b6001602052600090815260409020546001600160a01b031681565b6102af610732366004614095565b61305c565b610266610745366004614220565b613081565b60006001600160e01b03198216637965db0b60e01b148061077b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000808052600b602090815260408051606081810183527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765460ff81811680855261010090920416948301949094527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f77549282019290925284516101a0015191929091108061081c575083516101a00151602082015160ff16105b1561084857600060405180604001604052806002815260200161463160f01b8152509250925050915091565b83516101c00151604082015161085e9042614418565b111561088b57600060405180604001604052806002815260200161463160f01b8152509250925050915091565b6001604051806020016040528060008152509250925050915091565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160a01b039889169997891698968716979587169690941694929360ff80841694610100909404169291906109129061442b565b80601f016020809104026020016040519081016040528092919081815260200182805461093e9061442b565b801561098b5780601f106109605761010080835404028352916020019161098b565b820191906000526020600020905b81548152906001019060200180831161096e57829003601f168201915b5050505050905089565b61099e33611613565b6109fa5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611a6d565b50565b846001600160a01b038116610a635760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b8480600003610a995760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b600088815260086020908152604080832081516101208101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260038101548316606083015260048101549092166080820152600582015460a0820152600682015460ff80821660c0840152610100918290041660e083015260078301805492939291840191610b339061442b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f9061442b565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b5050509190925250508151919250506001600160a01b031615801590610bdb575080516001600160a01b031633145b610c275760405162461bcd60e51b815260206004820152601b60248201527f63616c6c6572206973206e6f742070726f6a6563744f776e65722e000000000060448201526064016109f1565b60608101516001600160a01b031615610c755760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064016109f1565b6040808201516001600160a01b03166000908152600960205220548914610cce5760405162461bcd60e51b815260206004820152600d60248201526c3bb937b733903618aa37b5b2b760991b60448201526064016109f1565b608081015160405163507c8bd160e01b81526001600160a01b039091166004820152600090732b13778E63f0f0Af46258841e45da3DE48A6482D9063507c8bd190602401602060405180830381865af4158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d539190614465565b90506001600160a01b038116610dab5760405162461bcd60e51b815260206004820152601a60248201527f6c314d657373656e676572206973205a65726f4164647265737300000000000060448201526064016109f1565b600063589b8ec960e01b83604001518b8d8c8c8c8c604051602401610dd697969594939291906146dd565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b038381831617835250505050905060008080732b13778E63f0f0Af46258841e45da3DE48A6482D63f6266b748c6040518263ffffffff1660e01b8152600401610e469190614875565b6040805180830381865af4158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8691906149cc565b9150915081610ed75760405162461bcd60e51b815260206004820152601b60248201527f546f6b616d616b5661756c7473207661696c64617465206661696c000000000060448201526064016109f1565b6000610ee68c60000151610781565b50905080610f365760405162461bcd60e51b815260206004820152601960248201527f5075626c69635661756c74207661696c64617465206661696c0000000000000060448201526064016109f1565b610f408285614418565b93508a5160001461103057600080732b13778E63f0f0Af46258841e45da3DE48A6482D6308d8b1ac8e6040518263ffffffff1660e01b8152600401610f8591906149f8565b6040805180830381865af4158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc591906149cc565b91509150816110215760405162461bcd60e51b815260206004820152602260248201527f637573746f6d5363686564756c655661756c7473207661696c646174652066616044820152611a5b60f21b60648201526084016109f1565b61102b8187614418565b955050505b89511561111f57600080732b13778E63f0f0Af46258841e45da3DE48A6482D63a95614d68d6040518263ffffffff1660e01b81526004016110719190614a7b565b6040805180830381865af415801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b191906149cc565b91509150816111105760405162461bcd60e51b815260206004820152602560248201527f637573746f6d4e6f6e5363686564756c655661756c7473207661696c646174656044820152640819985a5b60da1b60648201526084016109f1565b61111a8187614418565b955050505b8c84146111945760405162461bcd60e51b815260206004820152603560248201527f746f74616c416d6f756e7420697320646966666572656e742066726f6d20766160448201527f756c747320616c6c6f636174656420616d6f756e74000000000000000000000060648201526084016109f1565b60008f90508e6008600083815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e88606001906001600160a01b031690816001600160a01b03168152505060006008600083815260200190815260200160002060020160009054906101000a90046001600160a01b03166001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161125891906001600160a01b0391909116815260200190565b602060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190614b05565b90508860a0015181111580156112b5575060c089015160ff1615155b156113bb5788604001516001600160a01b03166340c10f1930838c60a001516112de9190614b1e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561132457600080fd5b505af1158015611338573d6000803e3d6000fd5b505050600083815260086020526040908190206002015490516370a0823160e01b81523060048201526001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190614b05565b90505b8860a0015181101561140f5760405162461bcd60e51b815260206004820152601760248201527f62616c616e636520697320696e73756666696369656e7400000000000000000060448201526064016109f1565b6000600a60008b60e0015160ff1660ff1681526020019081526020016000206040518060800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160189054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905061152d8a608001518b604001518c6060015184602001518e60a0015186604001518960405160200161151991815260200190565b604051602081830303815290604052613132565b60208101516060820151604051633dbb202b60e01b81526001600160a01b038c1692633dbb202b92611564928d9190600401614b31565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050507f79fdfe585876a2a3eed99468134317d55495d4fd731029da495b24da1266fa70838b604001518c606001518d60a001516040516115f794939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a1505050505050505050505050505050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661077b565b60008281526004602052604090206001015461166e81613370565b611678838361337a565b505050565b846001600160a01b0381166116b95760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b84806000036116ef5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b600088815260086020908152604080832081516101208101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260038101548316606083015260048101549092166080820152600582015460a0820152600682015460ff80821660c0840152610100918290041660e0830152600783018054929392918401916117899061442b565b80601f01602080910402602001604051908101604052809291908181526020018280546117b59061442b565b80156118025780601f106117d757610100808354040283529160200191611802565b820191906000526020600020905b8154815290600101906020018083116117e557829003601f168201915b5050509190925250508151919250506001600160a01b031615801590611831575080516001600160a01b031633145b61187d5760405162461bcd60e51b815260206004820152601b60248201527f63616c6c6572206973206e6f742070726f6a6563744f776e65722e000000000060448201526064016109f1565b60608101516001600160a01b0316156118cb5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064016109f1565b6040808201516001600160a01b031660009081526009602052205489146119245760405162461bcd60e51b815260206004820152600d60248201526c3bb937b733903618aa37b5b2b760991b60448201526064016109f1565b608081015160405163507c8bd160e01b81526001600160a01b039091166004820152600090732b13778E63f0f0Af46258841e45da3DE48A6482D9063507c8bd190602401602060405180830381865af4158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190614465565b90506001600160a01b038116611a015760405162461bcd60e51b815260206004820152601a60248201527f6c314d657373656e676572206973205a65726f4164647265737300000000000060448201526064016109f1565b600063589b8ec960e01b83604001518b8d8c8c8c8c604051602401611a2c97969594939291906146dd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905060008080610e868b611af9565b6001600160a01b0381163314611aeb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109f1565b611af5828261341c565b5050565b60208101515160009081901580611b1c5750826040015160200151602001516000145b80611b335750826060015160200151602001516000145b80611b445750608083015160200151155b80611b55575060a083015160200151155b15611b5f57915091565b60208084015101511580611b795750602083015160400151155b80611b8a5750602083015160600151155b80611ba1575060208301516080015163ffffffff16155b80611bb65750602083015160a0015161ffff16155b15611bc057915091565b604083015151516001600160a01b03161580611bec5750604083015151602001516001600160a01b0316155b80611c02575060408084015151015162ffffff16155b80611c165750604080840151602001510151155b80611c2b575060408301516020015160600151155b80611c4657506040830151602001516080015163ffffffff16155b80611c61575060408301516020015160a0015163ffffffff16155b80611c7c575060408301516020015160c0015163ffffffff16155b15611c8657915091565b606083015151516001600160a01b03161580611cb25750606083015151602001516001600160a01b0316155b80611cc957506060830151516040015162ffffff16155b80611cde575060608301516020015160400151155b80611cf25750606080840151602001510151155b80611d0d57506060830151602001516080015163ffffffff16155b80611d28575060608301516020015160a0015163ffffffff16155b80611d43575060608301516020015160c0015163ffffffff16155b15611d4d57915091565b6080830151604001511580611d685750608083015160600151155b80611d7e5750608080840151015163ffffffff16155b80611d955750608083015160a0015163ffffffff16155b80611dac5750608083015160c0015163ffffffff16155b15611db657915091565b60a0830151604001511580611dd1575060a083015160600151155b80611de8575060a08301516080015163ffffffff16155b80611dfe575060a080840151015163ffffffff16155b80611e15575060a083015160c0015163ffffffff16155b15611e1f57915091565b604083015160200151608081015160a09091015163ffffffff91821691161080611e645750606083015160200151608081015160a09091015163ffffffff9182169116105b80611e8a575082608001516080015163ffffffff16836080015160a0015163ffffffff16105b80611eb057508260a001516080015163ffffffff168360a0015160a0015163ffffffff16105b15611eba57915091565b60a083015160209081015160808501518201516060860151830151830151604087015184015184015193870151518751516101208101516101009091015194959394929392611f099190614418565b611f139190614418565b611f1d9190614418565b611f279190614418565b611f319190614418565b611f3b9190614418565b905080600003611f4a57915091565b60019150915091565b836001600160a01b038116611f8f5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b836001600160a01b038116611fcb5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b8363ffffffff16806000036120075760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b8363ffffffff16806000036120435760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b61204c33611613565b6120a35760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b600260ff8a16106120f65760405162461bcd60e51b815260206004820152601260248201527f756e737570706f72746564206c3254797065000000000000000000000000000060448201526064016109f1565b60ff89166000908152600a60205260409020546001600160a01b038981169116141580612144575060ff89166000908152600a60205260409020600101546001600160a01b03888116911614155b80612174575060ff89166000908152600a602052604090206001015463ffffffff878116600160a01b9092041614155b806121a4575060ff89166000908152600a602052604090206001015463ffffffff868116600160c01b9092041614155b6121d95760405162461bcd60e51b81526004016109f19060208082526004908201526373616d6560e01b604082015260600190565b600060405180608001604052808a6001600160a01b03168152602001896001600160a01b031681526020018863ffffffff1681526020018763ffffffff16815250905080600a60008c60ff1660ff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060608201518160010160186101000a81548163ffffffff021916908363ffffffff1602179055509050507f5e8ef59fdf78b3376941ed3157b8c3d49139b1f4c1857bf531766c1c1e3a97c98a8a8a8a8a60405161234d95949392919060ff9590951685526001600160a01b03938416602086015291909216604084015263ffffffff918216606084015216608082015260a00190565b60405180910390a150505050505050505050565b61236a33611613565b6123c15760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611653565b60006001600160a01b0389161580159061240d57506001600160a01b03881615155b801561242157506001600160a01b03871615155b61246d5760405162461bcd60e51b815260206004820152600c60248201527f7a65726f2061646472657373000000000000000000000000000000000000000060448201526064016109f1565b83516000036124be5760405162461bcd60e51b815260206004820152601360248201527f70726f6a6563744e616d65206973206e756c6c0000000000000000000000000060448201526064016109f1565b825160000361250f5760405162461bcd60e51b815260206004820152601160248201527f746f6b656e4e616d65206973206e756c6c00000000000000000000000000000060448201526064016109f1565b81516000036125605760405162461bcd60e51b815260206004820152601360248201527f746f6b656e53796d626f6c206973206e756c6c0000000000000000000000000060448201526064016109f1565b600460ff861610801561258d575060ff85166000908152600760205260409020546001600160a01b031615155b6125e85760405162461bcd60e51b815260206004820152602660248201527f77726f6e6720746f6b656e54797065206f72207a65726f206c31546f6b656e466044820152656163746f727960d01b60648201526084016109f1565b60ff8516600090815260076020526040808220549051634692ed6760e01b81526001600160a01b0390911690634692ed679061262e90879087908c903090600401614b69565b6020604051808303816000875af115801561264d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126719190614465565b90506001600160a01b0381166126c95760405162461bcd60e51b815260206004820152601160248201527f7a65726f2070726f6a656374546f6b656e00000000000000000000000000000060448201526064016109f1565b60006006600081546126da90614baf565b91905081905590506040518061012001604052808b6001600160a01b031681526020018c6001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b031681526020018a6001600160a01b031681526020018981526020018860ff168152602001600060ff168152602001878152506008600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908360ff16021790555060e08201518160060160016101000a81548160ff021916908360ff1602179055506101008201518160070190816128ad9190614c16565b5050506001600160a01b03821660009081526009602052604090819020829055517fe6f52bbfc9201025b3af0483a2cb6b38980deee467b4cea0217319cae691d3a39061290b90849084908f908f908f908f908e908e908e90614cd6565b60405180910390a19a9950505050505050505050565b61292a33611613565b6129815760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b6001600160a01b0381166129d75760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016109f1565b6001600160a01b0381163303612a2f5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016109f1565b612a597fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611653565b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233611a6d565b6000606060008080612a9488611af9565b9150915081612ac657600060405180604001604052806002815260200161046360f41b81525094509450505050612cf4565b6000612ad58960000151610781565b50905080612b0e5760405162461bcd60e51b81526004016109f19060208082526004908201526346312d3160e01b604082015260600190565b612b188285614418565b93508751600014612be257600080732b13778E63f0f0Af46258841e45da3DE48A6482D6308d8b1ac8b6040518263ffffffff1660e01b8152600401612b5d91906149f8565b6040805180830381865af4158015612b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9d91906149cc565b9092509050612bac8187614418565b955081612bdf57600060405180604001604052806002815260200161231960f11b81525097509750505050505050612cf4565b50505b875115612ca857600080732b13778E63f0f0Af46258841e45da3DE48A6482D63a95614d68a6040518263ffffffff1660e01b8152600401612c239190614a7b565b6040805180830381865af4158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6391906149cc565b9092509050612c728187614418565b955081612ca557600060405180604001604052806002815260200161463360f01b81525097509750505050505050612cf4565b50505b838a14612cd957600060405180604001604052806002815260200161118d60f21b8152509550955050505050612cf4565b60016040518060200160405280600081525095509550505050505b94509492505050565b612d0633611613565b612d5d5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b815115801590612d6e575080518251145b612dba5760405162461bcd60e51b815260206004820152600c60248201527f77726f6e67206c656e677468000000000000000000000000000000000000000060448201526064016109f1565b815160005b81811015612f6657600460ff16848281518110612dde57612dde614d48565b602002602001015160ff1610612e365760405162461bcd60e51b815260206004820152601660248201527f756e737570706f7274656420746f6b656e20747970650000000000000000000060448201526064016109f1565b828181518110612e4857612e48614d48565b60200260200101516001600160a01b031660076000868481518110612e6f57612e6f614d48565b60209081029190910181015160ff168252810191909152604001600020546001600160a01b031603612ee35760405162461bcd60e51b815260206004820152600c60248201527f73616d652061646472657373000000000000000000000000000000000000000060448201526064016109f1565b828181518110612ef557612ef5614d48565b602002602001015160076000868481518110612f1357612f13614d48565b602002602001015160ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080612f5e90614baf565b915050612dbf565b50505050565b612f7533611613565b612fcc5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b6040805160608101825260ff9485168152928416602080850191825291840192835260008052600b90915291517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f768054935185166101000261ffff19909416919094161791909117909155517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7755565b60008281526004602052604090206001015461307781613370565b611678838361341c565b6000606060008080732b13778E63f0f0Af46258841e45da3DE48A6482D63f6266b74896040518263ffffffff1660e01b81526004016130c09190614875565b6040805180830381865af41580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310091906149cc565b9150915081612ac657600060405180604001604052806002815260200161463160f01b81525094509450505050612cf4565b604051639da3176160e01b81526001600160a01b0388166004820152600090732b13778E63f0f0Af46258841e45da3DE48A6482D90639da3176190602401602060405180830381865af415801561318d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b19190614465565b90506001600160a01b0381166132095760405162461bcd60e51b815260206004820152601760248201527f6c31427269646765206973205a65726f4164647265737300000000000000000060448201526064016109f1565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919089169063dd62ed3e90604401602060405180830381865afa158015613259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327d9190614b05565b9050848110156132fd5760405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015289169063095ea7b3906044016020604051808303816000875af11580156132d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fb9190614d5e565b505b60405163041c592960e51b81526001600160a01b0383169063838b252090613333908b908b908b908b908b908b90600401614d79565b600060405180830381600087803b15801561334d57600080fd5b505af1158015613361573d6000803e3d6000fd5b50505050505050505050505050565b610a24813361349f565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16611af55760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133d83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615611af55760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16611af5576134d281613514565b6134dd836020613526565b6040516020016134ee929190614dcb565b60408051601f198184030181529082905262461bcd60e51b82526109f191600401614e4c565b606061077b6001600160a01b03831660145b60606000613535836002614e5f565b613540906002614418565b67ffffffffffffffff81111561355857613558613700565b6040519080825280601f01601f191660200182016040528015613582576020820181803683370190505b509050600360fc1b8160008151811061359d5761359d614d48565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106135cc576135cc614d48565b60200101906001600160f81b031916908160001a90535060006135f0846002614e5f565b6135fb906001614418565b90505b6001811115613680577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061363c5761363c614d48565b1a60f81b82828151811061365257613652614d48565b60200101906001600160f81b031916908160001a90535060049490941c9361367981614e76565b90506135fe565b5083156136cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f1565b9392505050565b6000602082840312156136e857600080fd5b81356001600160e01b0319811681146136cf57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561373957613739613700565b60405290565b6040516060810167ffffffffffffffff8111828210171561373957613739613700565b6040516102a0810167ffffffffffffffff8111828210171561373957613739613700565b6040805190810167ffffffffffffffff8111828210171561373957613739613700565b60405160c0810167ffffffffffffffff8111828210171561373957613739613700565b604051601f8201601f1916810167ffffffffffffffff811182821017156137f5576137f5613700565b604052919050565b600060a0828403121561380f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561383257613832613700565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b6001600160a01b0381168114610a2457600080fd5b803561388d8161386d565b919050565b803562ffffff8116811461388d57600080fd5b600060e082840312156138b757600080fd5b6138bf613716565b905081356138cc8161386d565b808252506020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015261390e60c08301613892565b60c082015292915050565b600081830361042081121561392d57600080fd5b61393561373f565b91506102a08082121561394757600080fd5b61394f613762565b843581526020808601359082015260408086013590820152606080860135908201526080808601359082015260a0808601359082015260c0808601359082015260e08086013590820152610100808601359082015261012080860135908201526101408086013590820152610160808601359082015261018080860135908201526101a080860135908201526101c080860135908201526101e08086013590820152610200808601359082015261022080860135908201526102408086013590820152610260808601359082015261028080860135908201528084529150613a39858286016137fd565b60208401525050613a4e8361034084016138a5565b604082015292915050565b60006104208284031215613a6c57600080fd5b6136cf8383613919565b60005b83811015613a91578181015183820152602001613a79565b50506000910152565b60008151808452613ab2816020860160208601613a76565b601f01601f19169290920160200192915050565b8215158152604060208201526000613ae16040830184613a9a565b949350505050565b600060208284031215613afb57600080fd5b5035919050565b60006101206001600160a01b03808d168452808c166020850152808b166040850152808a1660608501528089166080850152508660a084015260ff861660c084015260ff851660e084015280610100840152613b6081840185613a9a565b9c9b505050505050505050505050565b600060208284031215613b8257600080fd5b81356136cf8161386d565b803563ffffffff8116811461388d57600080fd5b600060e08284031215613bb357600080fd5b613bbb613716565b90508135613bc88161386d565b80825250602082013560208201526040820135604082015260608201356060820152613bf660808301613b8d565b6080820152613c0760a08301613b8d565b60a082015261390e60c08301613b8d565b6000818303610140811215613c2c57600080fd5b613c34613786565b91506060811215613c4457600080fd5b50613c4d61373f565b8235613c588161386d565b81526020830135613c688161386d565b6020820152613c7960408401613892565b60408201528152613c8d8360608401613ba1565b602082015292915050565b6000818303610920811215613cac57600080fd5b613cb46137a9565b9150613cc08484613919565b825260c061041f1982011215613cd557600080fd5b50613cde6137a9565b6104208301358152610440830135602082015261046083013560408201526104808301356060820152613d146104a08401613b8d565b60808201526104c083013561ffff81168114613d2f57600080fd5b60a08201526020820152613d47836104e08401613c18565b6040820152613d5a836106208401613c18565b6060820152613d6d836107608401613ba1565b6080820152613d80836108408401613ba1565b60a082015292915050565b600067ffffffffffffffff821115613da557613da5613700565b5060051b60200190565b600082601f830112613dc057600080fd5b813567ffffffffffffffff811115613dda57613dda613700565b613ded601f8201601f19166020016137cc565b818152846020838601011115613e0257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613e3057600080fd5b81356020613e45613e4083613d8b565b6137cc565b82815260059290921b84018101918181019086841115613e6457600080fd5b8286015b84811015613eee57803567ffffffffffffffff80821115613e895760008081fd5b90880190610100828b03601f19011215613ea35760008081fd5b613eab613786565b8683013582811115613ebd5760008081fd5b613ecb8c8983870101613daf565b825250613edb8b60408501613ba1565b8188015285525050918301918301613e68565b509695505050505050565b600082601f830112613f0a57600080fd5b81356020613f1a613e4083613d8b565b82815260059290921b84018101918181019086841115613f3957600080fd5b8286015b84811015613eee57803567ffffffffffffffff80821115613f5e5760008081fd5b908801906060828b03601f1901811315613f785760008081fd5b613f8061373f565b8784013583811115613f925760008081fd5b613fa08d8a83880101613daf565b8252506040925082840135613fb48161386d565b81890152920135908201528352918301918301613f3d565b6000806000806000806109c08789031215613fe657600080fd5b863595506020870135613ff88161386d565b94506040870135935061400e8860608901613c98565b925061098087013567ffffffffffffffff8082111561402c57600080fd5b6140388a838b01613e1f565b93506109a089013591508082111561404f57600080fd5b5061405c89828a01613ef9565b9150509295509295509295565b803560ff8116811461388d57600080fd5b60006020828403121561408c57600080fd5b6136cf82614069565b600080604083850312156140a857600080fd5b8235915060208301356140ba8161386d565b809150509250929050565b600061092082840312156140d857600080fd5b6136cf8383613c98565b600080600080600060a086880312156140fa57600080fd5b61410386614069565b945060208601356141138161386d565b935060408601356141238161386d565b925061413160608701613b8d565b915061413f60808701613b8d565b90509295509295909350565b600080600080600080600080610100898b03121561416857600080fd5b61417189613882565b975061417f60208a01613882565b965061418d60408a01613882565b9550606089013594506141a260808a01614069565b935060a089013567ffffffffffffffff808211156141bf57600080fd5b6141cb8c838d01613daf565b945060c08b01359150808211156141e157600080fd5b6141ed8c838d01613daf565b935060e08b013591508082111561420357600080fd5b506142108b828c01613daf565b9150509295985092959890939650565b600080600080610980858703121561423757600080fd5b843593506142488660208701613c98565b925061094085013567ffffffffffffffff8082111561426657600080fd5b61427288838901613e1f565b935061096087013591508082111561428957600080fd5b5061429687828801613ef9565b91505092959194509250565b600082601f8301126142b357600080fd5b813560206142c3613e4083613d8b565b82815260059290921b840181019181810190868411156142e257600080fd5b8286015b84811015613eee5780356142f98161386d565b83529183019183016142e6565b6000806040838503121561431957600080fd5b823567ffffffffffffffff8082111561433157600080fd5b818501915085601f83011261434557600080fd5b81356020614355613e4083613d8b565b82815260059290921b8401810191818101908984111561437457600080fd5b948201945b838610156143995761438a86614069565b82529482019490820190614379565b965050860135925050808211156143af57600080fd5b506143bc858286016142a2565b9150509250929050565b6000806000606084860312156143db57600080fd5b6143e484614069565b92506143f260208501614069565b9150604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561077b5761077b614402565b600181811c9082168061443f57607f821691505b60208210810361445f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561447757600080fd5b81516136cf8161386d565b805182526020808201519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028090810151910152565b6001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b80516001600160a01b038082511684528060208301511660208501525062ffffff6040820151166040840152506020810151611678606084018261455c565b600081518084526020808501808196508360051b8101915082860160005b8581101561465f5782840389528151610100815181875261463782880182613a9a565b91505086820151915061464c8787018361455c565b9986019994505090840190600101614614565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561465f5782840389528151606081518187526146ac82880182613a9a565b838901516001600160a01b0316888a015260409384015193909701929092525050978401979084019060010161468a565b60006109e06001600160a01b03808b168452808a166020850152508760408401528660608401528551614714608085018251614482565b6020818101518051610320870152808201516103408701526040808201516103608801526060808301516103808901526080928301516103a08901529381015180516001600160a01b03166103c0890152808401516103e089015280820151610400890152808501516104208901528083015161044089015260a0808201516104608a015260c09091015162ffffff166104808901528a84015180516104a08a0152938401516104c0890152838201516104e0890152938301516105008801529082015163ffffffff1661052087015291015161ffff166105408501528601516148026105608501826145b7565b5060608601516148166106a08501826145b7565b50608086015161482a6107e085018261455c565b5060a086015161483e6108c085018261455c565b50806109a0840152614852818401866145f6565b90508281036109c0840152614867818561466c565b9a9950505050505050505050565b600061092082019050825161488b838251614482565b60208181015180516102a0860152808201516102c08601526040808201516102e08701526060808301516103008801526080928301516103208801529381015180516001600160a01b03166103408801528084015161036088015280820151610380880152808501516103a0880152808301516103c088015260a0808201516103e089015260c09091015162ffffff166104008801528784015180516104208901529384015161044088015283820151610460880152938301516104808701529082015163ffffffff166104a086015291015161ffff166104c08401528301516149796104e08401826145b7565b50606083015161498d6106208401826145b7565b5060808301516149a161076084018261455c565b5060a08301516149b561084084018261455c565b5092915050565b8051801515811461388d57600080fd5b600080604083850312156149df57600080fd5b6149e8836149bc565b9150602083015190509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614a6e57603f1988860301845281516101008151818852614a4682890182613a9a565b915050878201519150614a5b8888018361455c565b9550509285019290850190600101614a1f565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614af757603f19898403018552815160608151818652614ac882870182613a9a565b838b01516001600160a01b0316878c015292890151958901959095525094870194925090860190600101614aa2565b509098975050505050505050565b600060208284031215614b1757600080fd5b5051919050565b8181038181111561077b5761077b614402565b6001600160a01b0384168152606060208201526000614b536060830185613a9a565b905063ffffffff83166040830152949350505050565b608081526000614b7c6080830187613a9a565b8281036020840152614b8e8187613a9a565b9150508360408301526001600160a01b038316606083015295945050505050565b600060018201614bc157614bc1614402565b5060010190565b601f82111561167857600081815260208120601f850160051c81016020861015614bef5750805b601f850160051c820191505b81811015614c0e57828155600101614bfb565b505050505050565b815167ffffffffffffffff811115614c3057614c30613700565b614c4481614c3e845461442b565b84614bc8565b602080601f831160018114614c795760008415614c615750858301515b600019600386901b1c1916600185901b178555614c0e565b600085815260208120601f198616915b82811015614ca857888601518255948401946001909101908401614c89565b5085821015614cc65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006101206001600160a01b03808d1684528b6020850152808b166040850152808a1660608501528089166080850152508660a08401528060c0840152614d1f81840187613a9a565b905082810360e0840152614d338186613a9a565b9050828103610100840152613b608185613a9a565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d7057600080fd5b6136cf826149bc565b60006001600160a01b038089168352808816602084015280871660408401525084606083015263ffffffff8416608083015260c060a0830152614dbf60c0830184613a9a565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e03816017850160208801613a76565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e40816028840160208801613a76565b01602801949350505050565b6020815260006136cf6020830184613a9a565b808202811582820484141761077b5761077b614402565b600081614e8557614e85614402565b50600019019056fea164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c806368f52eb31161012a57806391d14854116100bd578063b4a35e0f1161008c578063b911135f11610071578063b911135f146106fb578063d547741f14610724578063eeff1eb21461073757600080fd5b8063b4a35e0f146105f1578063b851550c1461061a57600080fd5b806391d148541461057d5780639cba9848146105b6578063a217fddf146105d6578063a902c63a146105de57600080fd5b806375b238fc116100f957806375b238fc146104ac5780637e56a80f146104d3578063846fa8f8146104e6578063902293ab146104f957600080fd5b806368f52eb314610460578063704802751461047357806374918e841461048657806375829def1461049957600080fd5b806324d7806c116101bd57806336fbad261161018c578063516688ea11610171578063516688ea14610406578063550d01a31461043057806363a8fd891461045357600080fd5b806336fbad26146103bc57806350d2a276146103c557600080fd5b806324d7806c146103705780632f2ff15d146103835780632f791a211461039657806336568abe146103a957600080fd5b806320a32b63116101f957806320a32b63146102b157806322985246146102c4578063248a9ca3146102f957806324d3e6471461031c57600080fd5b806301ffc9a71461022b5780630e8a820514610253578063107046bd146102745780631785f53c1461029c575b600080fd5b61023e6102393660046136d6565b61074a565b60405190151581526020015b60405180910390f35b610266610261366004613a59565b610781565b60405161024a929190613ac6565b610287610282366004613ae9565b6108a7565b60405161024a99989796959493929190613b02565b6102af6102aa366004613b70565b610995565b005b6102af6102bf366004613fcc565b610a27565b6102eb7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161024a565b6102eb610307366004613ae9565b60009081526004602052604090206001015490565b61035061032a36600461407a565b600b602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff94851681529390921660208401529082015260600161024a565b61023e61037e366004613b70565b611613565b6102af610391366004614095565b611653565b6102af6103a4366004613fcc565b61167d565b6102af6103b7366004614095565b611a6d565b6102eb60065481565b6103ee6103d33660046136d6565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b6104196104143660046140c5565b611af9565b60408051921515835260208301919091520161024a565b61023e61043e366004613b70565b60026020526000908152604090205460ff1681565b60005461023e9060ff1681565b6102af61046e3660046140e2565b611f53565b6102af610481366004613b70565b612361565b6102eb61049436600461414b565b6123eb565b6102af6104a7366004613b70565b612921565b6102eb7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6102666104e1366004614220565b612a83565b6102af6104f4366004614306565b612cfd565b61054661050736600461407a565b600a60205260009081526040902080546001909101546001600160a01b039182169181169063ffffffff600160a01b8204811691600160c01b90041684565b604080516001600160a01b03958616815294909316602085015263ffffffff9182169284019290925216606082015260800161024a565b61023e61058b366004614095565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102eb6105c4366004613b70565b60096020526000908152604090205481565b6102eb600081565b6102af6105ec3660046143c6565b612f6c565b6103ee6105ff36600461407a565b6007602052600090815260409020546001600160a01b031681565b6106b061062836600461407a565b6040805160808101825260008082526020820181905291810182905260608101919091525060ff166000908152600a6020908152604091829020825160808101845281546001600160a01b0390811682526001909201549182169281019290925263ffffffff600160a01b8204811693830193909352600160c01b9004909116606082015290565b6040805182516001600160a01b039081168252602080850151909116908201528282015163ffffffff908116928201929092526060928301519091169181019190915260800161024a565b6103ee610709366004613ae9565b6001602052600090815260409020546001600160a01b031681565b6102af610732366004614095565b61305c565b610266610745366004614220565b613081565b60006001600160e01b03198216637965db0b60e01b148061077b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000808052600b602090815260408051606081810183527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765460ff81811680855261010090920416948301949094527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f77549282019290925284516101a0015191929091108061081c575083516101a00151602082015160ff16105b1561084857600060405180604001604052806002815260200161463160f01b8152509250925050915091565b83516101c00151604082015161085e9042614418565b111561088b57600060405180604001604052806002815260200161463160f01b8152509250925050915091565b6001604051806020016040528060008152509250925050915091565b600860205260009081526040902080546001820154600283015460038401546004850154600586015460068701546007880180546001600160a01b039889169997891698968716979587169690941694929360ff80841694610100909404169291906109129061442b565b80601f016020809104026020016040519081016040528092919081815260200182805461093e9061442b565b801561098b5780601f106109605761010080835404028352916020019161098b565b820191906000526020600020905b81548152906001019060200180831161096e57829003601f168201915b5050505050905089565b61099e33611613565b6109fa5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611a6d565b50565b846001600160a01b038116610a635760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b8480600003610a995760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b600088815260086020908152604080832081516101208101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260038101548316606083015260048101549092166080820152600582015460a0820152600682015460ff80821660c0840152610100918290041660e083015260078301805492939291840191610b339061442b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f9061442b565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b5050509190925250508151919250506001600160a01b031615801590610bdb575080516001600160a01b031633145b610c275760405162461bcd60e51b815260206004820152601b60248201527f63616c6c6572206973206e6f742070726f6a6563744f776e65722e000000000060448201526064016109f1565b60608101516001600160a01b031615610c755760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064016109f1565b6040808201516001600160a01b03166000908152600960205220548914610cce5760405162461bcd60e51b815260206004820152600d60248201526c3bb937b733903618aa37b5b2b760991b60448201526064016109f1565b608081015160405163507c8bd160e01b81526001600160a01b03909116600482015260009073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__9063507c8bd190602401602060405180830381865af4158015610d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d539190614465565b90506001600160a01b038116610dab5760405162461bcd60e51b815260206004820152601a60248201527f6c314d657373656e676572206973205a65726f4164647265737300000000000060448201526064016109f1565b600063589b8ec960e01b83604001518b8d8c8c8c8c604051602401610dd697969594939291906146dd565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b03838183161783525050505090506000808073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__63f6266b748c6040518263ffffffff1660e01b8152600401610e469190614875565b6040805180830381865af4158015610e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8691906149cc565b9150915081610ed75760405162461bcd60e51b815260206004820152601b60248201527f546f6b616d616b5661756c7473207661696c64617465206661696c000000000060448201526064016109f1565b6000610ee68c60000151610781565b50905080610f365760405162461bcd60e51b815260206004820152601960248201527f5075626c69635661756c74207661696c64617465206661696c0000000000000060448201526064016109f1565b610f408285614418565b93508a516000146110305760008073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__6308d8b1ac8e6040518263ffffffff1660e01b8152600401610f8591906149f8565b6040805180830381865af4158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc591906149cc565b91509150816110215760405162461bcd60e51b815260206004820152602260248201527f637573746f6d5363686564756c655661756c7473207661696c646174652066616044820152611a5b60f21b60648201526084016109f1565b61102b8187614418565b955050505b89511561111f5760008073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__63a95614d68d6040518263ffffffff1660e01b81526004016110719190614a7b565b6040805180830381865af415801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b191906149cc565b91509150816111105760405162461bcd60e51b815260206004820152602560248201527f637573746f6d4e6f6e5363686564756c655661756c7473207661696c646174656044820152640819985a5b60da1b60648201526084016109f1565b61111a8187614418565b955050505b8c84146111945760405162461bcd60e51b815260206004820152603560248201527f746f74616c416d6f756e7420697320646966666572656e742066726f6d20766160448201527f756c747320616c6c6f636174656420616d6f756e74000000000000000000000060648201526084016109f1565b60008f90508e6008600083815260200190815260200160002060030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508e88606001906001600160a01b031690816001600160a01b03168152505060006008600083815260200190815260200160002060020160009054906101000a90046001600160a01b03166001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161125891906001600160a01b0391909116815260200190565b602060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190614b05565b90508860a0015181111580156112b5575060c089015160ff1615155b156113bb5788604001516001600160a01b03166340c10f1930838c60a001516112de9190614b1e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561132457600080fd5b505af1158015611338573d6000803e3d6000fd5b505050600083815260086020526040908190206002015490516370a0823160e01b81523060048201526001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b89190614b05565b90505b8860a0015181101561140f5760405162461bcd60e51b815260206004820152601760248201527f62616c616e636520697320696e73756666696369656e7400000000000000000060448201526064016109f1565b6000600a60008b60e0015160ff1660ff1681526020019081526020016000206040518060800160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160189054906101000a900463ffffffff1663ffffffff1663ffffffff1681525050905061152d8a608001518b604001518c6060015184602001518e60a0015186604001518960405160200161151991815260200190565b604051602081830303815290604052613132565b60208101516060820151604051633dbb202b60e01b81526001600160a01b038c1692633dbb202b92611564928d9190600401614b31565b600060405180830381600087803b15801561157e57600080fd5b505af1158015611592573d6000803e3d6000fd5b505050507f79fdfe585876a2a3eed99468134317d55495d4fd731029da495b24da1266fa70838b604001518c606001518d60a001516040516115f794939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a1505050505050505050505050505050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661077b565b60008281526004602052604090206001015461166e81613370565b611678838361337a565b505050565b846001600160a01b0381166116b95760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b84806000036116ef5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b600088815260086020908152604080832081516101208101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260038101548316606083015260048101549092166080820152600582015460a0820152600682015460ff80821660c0840152610100918290041660e0830152600783018054929392918401916117899061442b565b80601f01602080910402602001604051908101604052809291908181526020018280546117b59061442b565b80156118025780601f106117d757610100808354040283529160200191611802565b820191906000526020600020905b8154815290600101906020018083116117e557829003601f168201915b5050509190925250508151919250506001600160a01b031615801590611831575080516001600160a01b031633145b61187d5760405162461bcd60e51b815260206004820152601b60248201527f63616c6c6572206973206e6f742070726f6a6563744f776e65722e000000000060448201526064016109f1565b60608101516001600160a01b0316156118cb5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481b185d5b98da195960821b60448201526064016109f1565b6040808201516001600160a01b031660009081526009602052205489146119245760405162461bcd60e51b815260206004820152600d60248201526c3bb937b733903618aa37b5b2b760991b60448201526064016109f1565b608081015160405163507c8bd160e01b81526001600160a01b03909116600482015260009073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__9063507c8bd190602401602060405180830381865af4158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a99190614465565b90506001600160a01b038116611a015760405162461bcd60e51b815260206004820152601a60248201527f6c314d657373656e676572206973205a65726f4164647265737300000000000060448201526064016109f1565b600063589b8ec960e01b83604001518b8d8c8c8c8c604051602401611a2c97969594939291906146dd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905060008080610e868b611af9565b6001600160a01b0381163314611aeb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109f1565b611af5828261341c565b5050565b60208101515160009081901580611b1c5750826040015160200151602001516000145b80611b335750826060015160200151602001516000145b80611b445750608083015160200151155b80611b55575060a083015160200151155b15611b5f57915091565b60208084015101511580611b795750602083015160400151155b80611b8a5750602083015160600151155b80611ba1575060208301516080015163ffffffff16155b80611bb65750602083015160a0015161ffff16155b15611bc057915091565b604083015151516001600160a01b03161580611bec5750604083015151602001516001600160a01b0316155b80611c02575060408084015151015162ffffff16155b80611c165750604080840151602001510151155b80611c2b575060408301516020015160600151155b80611c4657506040830151602001516080015163ffffffff16155b80611c61575060408301516020015160a0015163ffffffff16155b80611c7c575060408301516020015160c0015163ffffffff16155b15611c8657915091565b606083015151516001600160a01b03161580611cb25750606083015151602001516001600160a01b0316155b80611cc957506060830151516040015162ffffff16155b80611cde575060608301516020015160400151155b80611cf25750606080840151602001510151155b80611d0d57506060830151602001516080015163ffffffff16155b80611d28575060608301516020015160a0015163ffffffff16155b80611d43575060608301516020015160c0015163ffffffff16155b15611d4d57915091565b6080830151604001511580611d685750608083015160600151155b80611d7e5750608080840151015163ffffffff16155b80611d955750608083015160a0015163ffffffff16155b80611dac5750608083015160c0015163ffffffff16155b15611db657915091565b60a0830151604001511580611dd1575060a083015160600151155b80611de8575060a08301516080015163ffffffff16155b80611dfe575060a080840151015163ffffffff16155b80611e15575060a083015160c0015163ffffffff16155b15611e1f57915091565b604083015160200151608081015160a09091015163ffffffff91821691161080611e645750606083015160200151608081015160a09091015163ffffffff9182169116105b80611e8a575082608001516080015163ffffffff16836080015160a0015163ffffffff16105b80611eb057508260a001516080015163ffffffff168360a0015160a0015163ffffffff16105b15611eba57915091565b60a083015160209081015160808501518201516060860151830151830151604087015184015184015193870151518751516101208101516101009091015194959394929392611f099190614418565b611f139190614418565b611f1d9190614418565b611f279190614418565b611f319190614418565b611f3b9190614418565b905080600003611f4a57915091565b60019150915091565b836001600160a01b038116611f8f5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b836001600160a01b038116611fcb5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f1565b8363ffffffff16806000036120075760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b8363ffffffff16806000036120435760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016109f1565b61204c33611613565b6120a35760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b600260ff8a16106120f65760405162461bcd60e51b815260206004820152601260248201527f756e737570706f72746564206c3254797065000000000000000000000000000060448201526064016109f1565b60ff89166000908152600a60205260409020546001600160a01b038981169116141580612144575060ff89166000908152600a60205260409020600101546001600160a01b03888116911614155b80612174575060ff89166000908152600a602052604090206001015463ffffffff878116600160a01b9092041614155b806121a4575060ff89166000908152600a602052604090206001015463ffffffff868116600160c01b9092041614155b6121d95760405162461bcd60e51b81526004016109f19060208082526004908201526373616d6560e01b604082015260600190565b600060405180608001604052808a6001600160a01b03168152602001896001600160a01b031681526020018863ffffffff1681526020018763ffffffff16815250905080600a60008c60ff1660ff16815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060608201518160010160186101000a81548163ffffffff021916908363ffffffff1602179055509050507f5e8ef59fdf78b3376941ed3157b8c3d49139b1f4c1857bf531766c1c1e3a97c98a8a8a8a8a60405161234d95949392919060ff9590951685526001600160a01b03938416602086015291909216604084015263ffffffff918216606084015216608082015260a00190565b60405180910390a150505050505050505050565b61236a33611613565b6123c15760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611653565b60006001600160a01b0389161580159061240d57506001600160a01b03881615155b801561242157506001600160a01b03871615155b61246d5760405162461bcd60e51b815260206004820152600c60248201527f7a65726f2061646472657373000000000000000000000000000000000000000060448201526064016109f1565b83516000036124be5760405162461bcd60e51b815260206004820152601360248201527f70726f6a6563744e616d65206973206e756c6c0000000000000000000000000060448201526064016109f1565b825160000361250f5760405162461bcd60e51b815260206004820152601160248201527f746f6b656e4e616d65206973206e756c6c00000000000000000000000000000060448201526064016109f1565b81516000036125605760405162461bcd60e51b815260206004820152601360248201527f746f6b656e53796d626f6c206973206e756c6c0000000000000000000000000060448201526064016109f1565b600460ff861610801561258d575060ff85166000908152600760205260409020546001600160a01b031615155b6125e85760405162461bcd60e51b815260206004820152602660248201527f77726f6e6720746f6b656e54797065206f72207a65726f206c31546f6b656e466044820152656163746f727960d01b60648201526084016109f1565b60ff8516600090815260076020526040808220549051634692ed6760e01b81526001600160a01b0390911690634692ed679061262e90879087908c903090600401614b69565b6020604051808303816000875af115801561264d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126719190614465565b90506001600160a01b0381166126c95760405162461bcd60e51b815260206004820152601160248201527f7a65726f2070726f6a656374546f6b656e00000000000000000000000000000060448201526064016109f1565b60006006600081546126da90614baf565b91905081905590506040518061012001604052808b6001600160a01b031681526020018c6001600160a01b03168152602001836001600160a01b0316815260200160006001600160a01b031681526020018a6001600160a01b031681526020018981526020018860ff168152602001600060ff168152602001878152506008600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816005015560c08201518160060160006101000a81548160ff021916908360ff16021790555060e08201518160060160016101000a81548160ff021916908360ff1602179055506101008201518160070190816128ad9190614c16565b5050506001600160a01b03821660009081526009602052604090819020829055517fe6f52bbfc9201025b3af0483a2cb6b38980deee467b4cea0217319cae691d3a39061290b90849084908f908f908f908f908e908e908e90614cd6565b60405180910390a19a9950505050505050505050565b61292a33611613565b6129815760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b6001600160a01b0381166129d75760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016109f1565b6001600160a01b0381163303612a2f5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016109f1565b612a597fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611653565b610a247fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233611a6d565b6000606060008080612a9488611af9565b9150915081612ac657600060405180604001604052806002815260200161046360f41b81525094509450505050612cf4565b6000612ad58960000151610781565b50905080612b0e5760405162461bcd60e51b81526004016109f19060208082526004908201526346312d3160e01b604082015260600190565b612b188285614418565b93508751600014612be25760008073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__6308d8b1ac8b6040518263ffffffff1660e01b8152600401612b5d91906149f8565b6040805180830381865af4158015612b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9d91906149cc565b9092509050612bac8187614418565b955081612bdf57600060405180604001604052806002815260200161231960f11b81525097509750505050505050612cf4565b50505b875115612ca85760008073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__63a95614d68a6040518263ffffffff1660e01b8152600401612c239190614a7b565b6040805180830381865af4158015612c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6391906149cc565b9092509050612c728187614418565b955081612ca557600060405180604001604052806002815260200161463360f01b81525097509750505050505050612cf4565b50505b838a14612cd957600060405180604001604052806002815260200161118d60f21b8152509550955050505050612cf4565b60016040518060200160405280600081525095509550505050505b94509492505050565b612d0633611613565b612d5d5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b815115801590612d6e575080518251145b612dba5760405162461bcd60e51b815260206004820152600c60248201527f77726f6e67206c656e677468000000000000000000000000000000000000000060448201526064016109f1565b815160005b81811015612f6657600460ff16848281518110612dde57612dde614d48565b602002602001015160ff1610612e365760405162461bcd60e51b815260206004820152601660248201527f756e737570706f7274656420746f6b656e20747970650000000000000000000060448201526064016109f1565b828181518110612e4857612e48614d48565b60200260200101516001600160a01b031660076000868481518110612e6f57612e6f614d48565b60209081029190910181015160ff168252810191909152604001600020546001600160a01b031603612ee35760405162461bcd60e51b815260206004820152600c60248201527f73616d652061646472657373000000000000000000000000000000000000000060448201526064016109f1565b828181518110612ef557612ef5614d48565b602002602001015160076000868481518110612f1357612f13614d48565b602002602001015160ff1660ff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080612f5e90614baf565b915050612dbf565b50505050565b612f7533611613565b612fcc5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f1565b6040805160608101825260ff9485168152928416602080850191825291840192835260008052600b90915291517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f768054935185166101000261ffff19909416919094161791909117909155517fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7755565b60008281526004602052604090206001015461307781613370565b611678838361341c565b600060606000808073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__63f6266b74896040518263ffffffff1660e01b81526004016130c09190614875565b6040805180830381865af41580156130dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310091906149cc565b9150915081612ac657600060405180604001604052806002815260200161463160f01b81525094509450505050612cf4565b604051639da3176160e01b81526001600160a01b038816600482015260009073__$b2d160aea0e65d5e83164dd2e3c22b89ec$__90639da3176190602401602060405180830381865af415801561318d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b19190614465565b90506001600160a01b0381166132095760405162461bcd60e51b815260206004820152601760248201527f6c31427269646765206973205a65726f4164647265737300000000000000000060448201526064016109f1565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919089169063dd62ed3e90604401602060405180830381865afa158015613259573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327d9190614b05565b9050848110156132fd5760405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015289169063095ea7b3906044016020604051808303816000875af11580156132d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132fb9190614d5e565b505b60405163041c592960e51b81526001600160a01b0383169063838b252090613333908b908b908b908b908b908b90600401614d79565b600060405180830381600087803b15801561334d57600080fd5b505af1158015613361573d6000803e3d6000fd5b50505050505050505050505050565b610a24813361349f565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16611af55760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556133d83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615611af55760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16611af5576134d281613514565b6134dd836020613526565b6040516020016134ee929190614dcb565b60408051601f198184030181529082905262461bcd60e51b82526109f191600401614e4c565b606061077b6001600160a01b03831660145b60606000613535836002614e5f565b613540906002614418565b67ffffffffffffffff81111561355857613558613700565b6040519080825280601f01601f191660200182016040528015613582576020820181803683370190505b509050600360fc1b8160008151811061359d5761359d614d48565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106135cc576135cc614d48565b60200101906001600160f81b031916908160001a90535060006135f0846002614e5f565b6135fb906001614418565b90505b6001811115613680577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061363c5761363c614d48565b1a60f81b82828151811061365257613652614d48565b60200101906001600160f81b031916908160001a90535060049490941c9361367981614e76565b90506135fe565b5083156136cf5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f1565b9392505050565b6000602082840312156136e857600080fd5b81356001600160e01b0319811681146136cf57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561373957613739613700565b60405290565b6040516060810167ffffffffffffffff8111828210171561373957613739613700565b6040516102a0810167ffffffffffffffff8111828210171561373957613739613700565b6040805190810167ffffffffffffffff8111828210171561373957613739613700565b60405160c0810167ffffffffffffffff8111828210171561373957613739613700565b604051601f8201601f1916810167ffffffffffffffff811182821017156137f5576137f5613700565b604052919050565b600060a0828403121561380f57600080fd5b60405160a0810181811067ffffffffffffffff8211171561383257613832613700565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b6001600160a01b0381168114610a2457600080fd5b803561388d8161386d565b919050565b803562ffffff8116811461388d57600080fd5b600060e082840312156138b757600080fd5b6138bf613716565b905081356138cc8161386d565b808252506020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015261390e60c08301613892565b60c082015292915050565b600081830361042081121561392d57600080fd5b61393561373f565b91506102a08082121561394757600080fd5b61394f613762565b843581526020808601359082015260408086013590820152606080860135908201526080808601359082015260a0808601359082015260c0808601359082015260e08086013590820152610100808601359082015261012080860135908201526101408086013590820152610160808601359082015261018080860135908201526101a080860135908201526101c080860135908201526101e08086013590820152610200808601359082015261022080860135908201526102408086013590820152610260808601359082015261028080860135908201528084529150613a39858286016137fd565b60208401525050613a4e8361034084016138a5565b604082015292915050565b60006104208284031215613a6c57600080fd5b6136cf8383613919565b60005b83811015613a91578181015183820152602001613a79565b50506000910152565b60008151808452613ab2816020860160208601613a76565b601f01601f19169290920160200192915050565b8215158152604060208201526000613ae16040830184613a9a565b949350505050565b600060208284031215613afb57600080fd5b5035919050565b60006101206001600160a01b03808d168452808c166020850152808b166040850152808a1660608501528089166080850152508660a084015260ff861660c084015260ff851660e084015280610100840152613b6081840185613a9a565b9c9b505050505050505050505050565b600060208284031215613b8257600080fd5b81356136cf8161386d565b803563ffffffff8116811461388d57600080fd5b600060e08284031215613bb357600080fd5b613bbb613716565b90508135613bc88161386d565b80825250602082013560208201526040820135604082015260608201356060820152613bf660808301613b8d565b6080820152613c0760a08301613b8d565b60a082015261390e60c08301613b8d565b6000818303610140811215613c2c57600080fd5b613c34613786565b91506060811215613c4457600080fd5b50613c4d61373f565b8235613c588161386d565b81526020830135613c688161386d565b6020820152613c7960408401613892565b60408201528152613c8d8360608401613ba1565b602082015292915050565b6000818303610920811215613cac57600080fd5b613cb46137a9565b9150613cc08484613919565b825260c061041f1982011215613cd557600080fd5b50613cde6137a9565b6104208301358152610440830135602082015261046083013560408201526104808301356060820152613d146104a08401613b8d565b60808201526104c083013561ffff81168114613d2f57600080fd5b60a08201526020820152613d47836104e08401613c18565b6040820152613d5a836106208401613c18565b6060820152613d6d836107608401613ba1565b6080820152613d80836108408401613ba1565b60a082015292915050565b600067ffffffffffffffff821115613da557613da5613700565b5060051b60200190565b600082601f830112613dc057600080fd5b813567ffffffffffffffff811115613dda57613dda613700565b613ded601f8201601f19166020016137cc565b818152846020838601011115613e0257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613e3057600080fd5b81356020613e45613e4083613d8b565b6137cc565b82815260059290921b84018101918181019086841115613e6457600080fd5b8286015b84811015613eee57803567ffffffffffffffff80821115613e895760008081fd5b90880190610100828b03601f19011215613ea35760008081fd5b613eab613786565b8683013582811115613ebd5760008081fd5b613ecb8c8983870101613daf565b825250613edb8b60408501613ba1565b8188015285525050918301918301613e68565b509695505050505050565b600082601f830112613f0a57600080fd5b81356020613f1a613e4083613d8b565b82815260059290921b84018101918181019086841115613f3957600080fd5b8286015b84811015613eee57803567ffffffffffffffff80821115613f5e5760008081fd5b908801906060828b03601f1901811315613f785760008081fd5b613f8061373f565b8784013583811115613f925760008081fd5b613fa08d8a83880101613daf565b8252506040925082840135613fb48161386d565b81890152920135908201528352918301918301613f3d565b6000806000806000806109c08789031215613fe657600080fd5b863595506020870135613ff88161386d565b94506040870135935061400e8860608901613c98565b925061098087013567ffffffffffffffff8082111561402c57600080fd5b6140388a838b01613e1f565b93506109a089013591508082111561404f57600080fd5b5061405c89828a01613ef9565b9150509295509295509295565b803560ff8116811461388d57600080fd5b60006020828403121561408c57600080fd5b6136cf82614069565b600080604083850312156140a857600080fd5b8235915060208301356140ba8161386d565b809150509250929050565b600061092082840312156140d857600080fd5b6136cf8383613c98565b600080600080600060a086880312156140fa57600080fd5b61410386614069565b945060208601356141138161386d565b935060408601356141238161386d565b925061413160608701613b8d565b915061413f60808701613b8d565b90509295509295909350565b600080600080600080600080610100898b03121561416857600080fd5b61417189613882565b975061417f60208a01613882565b965061418d60408a01613882565b9550606089013594506141a260808a01614069565b935060a089013567ffffffffffffffff808211156141bf57600080fd5b6141cb8c838d01613daf565b945060c08b01359150808211156141e157600080fd5b6141ed8c838d01613daf565b935060e08b013591508082111561420357600080fd5b506142108b828c01613daf565b9150509295985092959890939650565b600080600080610980858703121561423757600080fd5b843593506142488660208701613c98565b925061094085013567ffffffffffffffff8082111561426657600080fd5b61427288838901613e1f565b935061096087013591508082111561428957600080fd5b5061429687828801613ef9565b91505092959194509250565b600082601f8301126142b357600080fd5b813560206142c3613e4083613d8b565b82815260059290921b840181019181810190868411156142e257600080fd5b8286015b84811015613eee5780356142f98161386d565b83529183019183016142e6565b6000806040838503121561431957600080fd5b823567ffffffffffffffff8082111561433157600080fd5b818501915085601f83011261434557600080fd5b81356020614355613e4083613d8b565b82815260059290921b8401810191818101908984111561437457600080fd5b948201945b838610156143995761438a86614069565b82529482019490820190614379565b965050860135925050808211156143af57600080fd5b506143bc858286016142a2565b9150509250929050565b6000806000606084860312156143db57600080fd5b6143e484614069565b92506143f260208501614069565b9150604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561077b5761077b614402565b600181811c9082168061443f57607f821691505b60208210810361445f57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561447757600080fd5b81516136cf8161386d565b805182526020808201519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028090810151910152565b6001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b80516001600160a01b038082511684528060208301511660208501525062ffffff6040820151166040840152506020810151611678606084018261455c565b600081518084526020808501808196508360051b8101915082860160005b8581101561465f5782840389528151610100815181875261463782880182613a9a565b91505086820151915061464c8787018361455c565b9986019994505090840190600101614614565b5091979650505050505050565b600081518084526020808501808196508360051b8101915082860160005b8581101561465f5782840389528151606081518187526146ac82880182613a9a565b838901516001600160a01b0316888a015260409384015193909701929092525050978401979084019060010161468a565b60006109e06001600160a01b03808b168452808a166020850152508760408401528660608401528551614714608085018251614482565b6020818101518051610320870152808201516103408701526040808201516103608801526060808301516103808901526080928301516103a08901529381015180516001600160a01b03166103c0890152808401516103e089015280820151610400890152808501516104208901528083015161044089015260a0808201516104608a015260c09091015162ffffff166104808901528a84015180516104a08a0152938401516104c0890152838201516104e0890152938301516105008801529082015163ffffffff1661052087015291015161ffff166105408501528601516148026105608501826145b7565b5060608601516148166106a08501826145b7565b50608086015161482a6107e085018261455c565b5060a086015161483e6108c085018261455c565b50806109a0840152614852818401866145f6565b90508281036109c0840152614867818561466c565b9a9950505050505050505050565b600061092082019050825161488b838251614482565b60208181015180516102a0860152808201516102c08601526040808201516102e08701526060808301516103008801526080928301516103208801529381015180516001600160a01b03166103408801528084015161036088015280820151610380880152808501516103a0880152808301516103c088015260a0808201516103e089015260c09091015162ffffff166104008801528784015180516104208901529384015161044088015283820151610460880152938301516104808701529082015163ffffffff166104a086015291015161ffff166104c08401528301516149796104e08401826145b7565b50606083015161498d6106208401826145b7565b5060808301516149a161076084018261455c565b5060a08301516149b561084084018261455c565b5092915050565b8051801515811461388d57600080fd5b600080604083850312156149df57600080fd5b6149e8836149bc565b9150602083015190509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015614a6e57603f1988860301845281516101008151818852614a4682890182613a9a565b915050878201519150614a5b8888018361455c565b9550509285019290850190600101614a1f565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614af757603f19898403018552815160608151818652614ac882870182613a9a565b838b01516001600160a01b0316878c015292890151958901959095525094870194925090860190600101614aa2565b509098975050505050505050565b600060208284031215614b1757600080fd5b5051919050565b8181038181111561077b5761077b614402565b6001600160a01b0384168152606060208201526000614b536060830185613a9a565b905063ffffffff83166040830152949350505050565b608081526000614b7c6080830187613a9a565b8281036020840152614b8e8187613a9a565b9150508360408301526001600160a01b038316606083015295945050505050565b600060018201614bc157614bc1614402565b5060010190565b601f82111561167857600081815260208120601f850160051c81016020861015614bef5750805b601f850160051c820191505b81811015614c0e57828155600101614bfb565b505050505050565b815167ffffffffffffffff811115614c3057614c30613700565b614c4481614c3e845461442b565b84614bc8565b602080601f831160018114614c795760008415614c615750858301515b600019600386901b1c1916600185901b178555614c0e565b600085815260208120601f198616915b82811015614ca857888601518255948401946001909101908401614c89565b5085821015614cc65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006101206001600160a01b03808d1684528b6020850152808b166040850152808a1660608501528089166080850152508660a08401528060c0840152614d1f81840187613a9a565b905082810360e0840152614d338186613a9a565b9050828103610100840152613b608185613a9a565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d7057600080fd5b6136cf826149bc565b60006001600160a01b038089168352808816602084015280871660408401525084606083015263ffffffff8416608083015260c060a0830152614dbf60c0830184613a9a565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e03816017850160208801613a76565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e40816028840160208801613a76565b01602801949350505050565b6020815260006136cf6020830184613a9a565b808202811582820484141761077b5761077b614402565b600081614e8557614e85614402565b50600019019056fea164736f6c6343000812000a",
  "libraries": {
    "LibProject": "0x2b13778E63f0f0Af46258841e45da3DE48A6482D"
  },
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "createProject(address,address,address,uint256,uint8,string,string,string)": {
        "details": "프로젝트 생성"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "title": "L1ProjectManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7794,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7798,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7802,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7806,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3436,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 3438,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "projectCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3442,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "l1TokenFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 3447,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "projects",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(ProjectInfo)6408_storage)"
      },
      {
        "astId": 3451,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "projectTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3456,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "l2Info",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint8,t_struct(L2Info)6417_storage)"
      },
      {
        "astId": 3461,
        "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
        "label": "publicInfo",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint8,t_struct(PublicSaleSet)6581_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ProjectInfo)6408_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibProject.ProjectInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectInfo)6408_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_struct(L2Info)6417_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LibProject.L2Info)",
        "numberOfBytes": "32",
        "value": "t_struct(L2Info)6417_storage"
      },
      "t_mapping(t_uint8,t_struct(PublicSaleSet)6581_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct LibProject.PublicSaleSet)",
        "numberOfBytes": "32",
        "value": "t_struct(PublicSaleSet)6581_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(L2Info)6417_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.L2Info",
        "members": [
          {
            "astId": 6410,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "l2TokenFactory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6412,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "l2ProjectManager",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6414,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "depositMinGasLimit",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 6416,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "sendMsgMinGasLimit",
            "offset": 24,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProjectInfo)6408_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.ProjectInfo",
        "members": [
          {
            "astId": 6391,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "projectOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6393,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "tokenOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6395,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "l1Token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6397,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "l2Token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6399,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "addressManager",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6401,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "initialTotalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6403,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "tokenType",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 6405,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "l2Type",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 6407,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "projectName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(PublicSaleSet)6581_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.PublicSaleSet",
        "members": [
          {
            "astId": 6576,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "minPercents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6578,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "maxPercents",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6580,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "delayTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L1/L1ProjectManager.sol:L1ProjectManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}