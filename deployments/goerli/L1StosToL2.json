{
  "address": "0xF6340b66a7790e5bd4dE29F4575a6012D4126032",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "_manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "managerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lockTosAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addressManagerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLockCountPerRegister_",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "minGasLimitRegister_",
          "type": "uint32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Register",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockCountPerRegister",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "needSyncList",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "lockIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "lockIds",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Register_",
          "type": "address"
        }
      ],
      "name": "setL2Register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "syncInfoOfLockId",
      "outputs": [
        {
          "internalType": "int256",
          "name": "slope",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "bias",
          "type": "int256"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "syncTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "viewRegisterInfoOfLockId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "slope",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "bias",
              "type": "int256"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "syncTime",
              "type": "uint32"
            }
          ],
          "internalType": "struct LibLockId.SyncInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf25ac6244fef75484507da2ca08f725068b4d6fae655621cf5439696c45a978d",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xF6340b66a7790e5bd4dE29F4575a6012D4126032",
    "transactionIndex": 23,
    "gasUsed": "1342009",
    "logsBloom": "0x
    "blockHash": "0xca5dfbf5da4f3814067942adc3afddcd4f0634f21c22701b43f03c7ee8d07328",
    "transactionHash": "0xf25ac6244fef75484507da2ca08f725068b4d6fae655621cf5439696c45a978d",
    "logs": [],
    "blockNumber": 10007741,
    "cumulativeGasUsed": "6448136",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bada9199aa7c30da986f5334cd00c4a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockTosAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressManagerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLockCountPerRegister_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"minGasLimitRegister_\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockCountPerRegister\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"needSyncList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lockIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"lockIds\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Register_\",\"type\":\"address\"}],\"name\":\"setL2Register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syncInfoOfLockId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"viewRegisterInfoOfLockId\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"slope\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"bias\",\"type\":\"int256\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"syncTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibLockId.SyncInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1/L1StosToL2.sol\":\"L1StosToL2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"contracts/L1/L1StosToL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\nimport \\\"../libraries/LibLockTOS.sol\\\";\\nimport \\\"../proxy/ProxyStorage2.sol\\\";\\nimport \\\"./L1StosToL2Storage.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface ILockTos {\\n    function locksInfo(uint256 _lockId)\\n            external\\n            view\\n            returns (\\n                uint256 start,\\n                uint256 end,\\n                uint256 amount\\n            );\\n\\n    function locksOf(address _addr)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function pointHistoryOf(uint256 _lockId)\\n        external\\n        view\\n        returns (LibLockTOS.Point[] memory);\\n\\n}\\n\\ninterface IL1StosInL2 {\\n    function register(bytes memory data) external ;\\n}\\n\\ninterface L1CrossDomainMessengerI {\\n    function sendMessage(\\n        address _target,\\n        bytes memory _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\\n\\ncontract L1StosToL2 is ProxyStorage2, L1StosToL2Storage {\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor () {\\n\\n    }\\n\\n    function initialize (\\n        address managerAddress,\\n        address lockTosAddress,\\n        address addressManagerAddress,\\n        uint256 maxLockCountPerRegister_,\\n        uint32 minGasLimitRegister_\\n    ) external onlyManager {\\n        _manager = managerAddress;\\n        lockTos = lockTosAddress;\\n        addressManager = addressManagerAddress;\\n        maxLockCountPerRegister = maxLockCountPerRegister_;\\n        minGasLimitRegister = minGasLimitRegister_;\\n    }\\n\\n    function setL2Register(address l2Register_) external onlyManager {\\n        require(l2Register != l2Register_, \\\"same\\\");\\n        l2Register = l2Register_;\\n    }\\n\\n    /* ========== Anybody can ========== */\\n\\n    function register(address account) public {\\n        uint256[] memory lockIds = ILockTos(lockTos).locksOf(account);\\n        // console.log(\\\"register %s\\\", account);\\n        // console.log(\\\"lockIds.length %s\\\", lockIds.length);\\n        require(lockIds.length != 0, \\\"no register data\\\");\\n        require(lockIds.length <= maxLockCountPerRegister, \\\"exceeded the maximum number of register.\\\");\\n        _register(account, lockIds);\\n    }\\n\\n    function register(address account, uint256[] memory lockIds) public {\\n        require(lockIds.length <= maxLockCountPerRegister, \\\"exceeded the maximum number of register.\\\");\\n        require(lockIds.length != 0, \\\"no register data\\\");\\n        uint256[] memory userLockIds = ILockTos(lockTos).locksOf(account);\\n\\n        for(uint256 i = 0; i < lockIds.length; i++){\\n            bool unMatched = true;\\n            for(uint256 j = 0; j < userLockIds.length; j++){\\n                if(lockIds[i] == userLockIds[j]) {\\n                    unMatched = false;\\n                    if(j < userLockIds.length-1)\\n                        userLockIds[j] = userLockIds[userLockIds.length-1];\\n                    delete userLockIds[userLockIds.length-1];\\n                    break;\\n                }\\n            }\\n            require(!unMatched, \\\"owner is not account\\\");\\n        }\\n\\n        _register(account, lockIds);\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    function needSyncList(address account) public view returns (uint256[] memory lockIds) {\\n        uint256[] memory ids = ILockTos(lockTos).locksOf(account);\\n\\n        for(uint256 i = 0; i < ids.length; i++){\\n            LibLockId.SyncInfo memory curSync = syncInfoOfLockId[ids[i]];\\n            (, uint256 end, uint256 amount) = ILockTos(lockTos).locksInfo(ids[i]);\\n            if(amount != 0 && block.timestamp < end) {\\n                LibLockTOS.Point[] memory history = ILockTos(lockTos).pointHistoryOf(ids[i]);\\n                if(history.length != 0){\\n                    LibLockTOS.Point memory point = history[history.length-1];\\n                    if(curSync.timestamp < point.timestamp) lockIds[lockIds.length-1] = ids[i];\\n                }\\n            }\\n        }\\n    }\\n\\n    function viewRegisterInfoOfLockId(uint256 lockId) external view returns(LibLockId.SyncInfo memory) {\\n        return syncInfoOfLockId[lockId];\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n    function _register(address account, uint256[] memory lockIds) internal {\\n\\n        bytes memory syncPackets ;\\n        uint256 syncIdsCount ;\\n\\n        // packet {address: count to sync: 1st sync packet: 2nd sync packet: .....}\\n        // address : 20 bytes\\n        // count to sync : 1 byte (max 256 sync packets) but it is less than maxLockCountPerSync\\n        // sync packets : count to sync * 104 bytes ( count * 104 )\\n        // one sync packets : 104 bytes:  (32 byte) uint256 lockId, (32+32+4+4) syncInfo -> total 104\\n\\n        for(uint256 i = 0; i < lockIds.length; i++){\\n\\n            LibLockId.SyncInfo memory curSync = syncInfoOfLockId[lockIds[i]];\\n\\n            (, uint256 end, uint256 amount) = ILockTos(lockTos).locksInfo(lockIds[i]);\\n\\n            if (amount != 0 && block.timestamp < end){\\n                LibLockTOS.Point[] memory history = ILockTos(lockTos).pointHistoryOf(lockIds[i]);\\n\\n                if(history.length != 0){\\n                    LibLockTOS.Point memory point = history[history.length-1];\\n\\n                    if(curSync.timestamp < point.timestamp) {\\n                        LibLockId.SyncInfo memory newSync = LibLockId.SyncInfo(\\n                            {\\n                                slope: point.slope,\\n                                bias: point.bias,\\n                                timestamp: uint32(point.timestamp),\\n                                syncTime: uint32(block.timestamp)\\n                            }\\n                        );\\n\\n                        syncInfoOfLockId[lockIds[i]] = newSync;\\n                        syncIdsCount++;\\n\\n                        syncPackets = bytes.concat(syncPackets,\\n                            abi.encodePacked(lockIds[i], newSync.slope, newSync.bias, newSync.timestamp, newSync.syncTime));\\n\\n                    }\\n                }\\n            }\\n        }\\n\\n        require(syncPackets.length > 0, \\\"no register data\\\");\\n        // console.log('_register syncPackets.length  %s', syncPackets.length);\\n\\n        _sendMessage(\\n            l2Register,\\n            abi.encodePacked(account, syncPackets),\\n            // bytes.concat(abi.encodePacked(account), syncPackets),\\n            minGasLimitRegister\\n            );\\n    }\\n\\n\\n    function _sendMessage(address target, bytes memory data, uint32 minGasLimit) internal {\\n        address l1Messenger = LibProject.getL1CommunicationMessenger(addressManager);\\n        require(l1Messenger != address(0), \\\"l1Messenger is ZeroAddress\\\");\\n\\n        bytes memory callData = abi.encodeWithSelector(IL1StosInL2.register.selector, data);\\n\\n        // console.log('_sendMessage target %s', target, ' data.length %s', data.length);\\n        // console.logBytes(data);\\n        // console.log('_sendMessage l1Messenger %s', l1Messenger);\\n\\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\\n                target,\\n                callData,\\n                minGasLimit\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x6eca4d12b9538877798932387bb4d2b4e883cd5e9d877cc4ede4097e2d1f940a\",\"license\":\"MIT\"},\"contracts/L1/L1StosToL2Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../libraries/LibLockId.sol\\\";\\n\\ncontract L1StosToL2Storage  {\\n    uint256 public maxLockCountPerRegister;\\n    address public _manager;\\n    address public addressManager;\\n    address public lockTos;\\n    address public l2Register;\\n    uint32 minGasLimitRegister;\\n\\n    // account-lockId-sync\\ub41c \\uc815\\ubcf4 (\\ud788\\uc2a4\\ud1a0\\ub9ac\\uc758 \\uc778\\ub371\\uc2a4 \\ubc88\\ud638, time)\\n    mapping(uint256 => LibLockId.SyncInfo) public syncInfoOfLockId;\\n    bool internal _lock;\\n\\n    modifier onlyManager() {\\n        require(_manager == msg.sender, \\\"not manager\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(_lock != true, \\\"in use\\\");\\n        _lock = true;\\n        _;\\n        _lock = false;\\n    }\\n}\\n\",\"keccak256\":\"0x73870fa2e27b4e9a6c34ba2bfa7fbf818f70bc3340b86072b5e693061ed30c82\",\"license\":\"MIT\"},\"contracts/libraries/LibLockId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title LibLockId\\n */\\nlibrary LibLockId {\\n\\n    // LockId\\uc758 \\ud3ec\\uc778\\ud2b8 \\uc815\\ubcf4\\n    struct Point {\\n        int256 slope;\\n        int256 bias;\\n        uint256 timestamp; // \\ub4f1\\ub85d(\\uc2dc\\uc791)\\uc2dc\\uc810\\n    }\\n\\n    // LockId\\uc758 \\uc794\\uace0\\n    struct LockedInfo {\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        uint256 withdrawlTime;\\n    }\\n\\n    // SyncInfo\\n    struct SyncInfo {\\n        int256 slope;\\n        int256 bias;\\n        uint32 timestamp; // point \\uc815\\ubcf4\\uc5d0 \\uc788\\ub294 \\uc778\\ub371\\uc2a4\\uc5d0 \\ud574\\ub2f9\\ud558\\ub294 timestamp\\n        uint32 syncTime; // \\ub3d9\\uae30\\ud654 \\uc2dc\\uc810\\n    }\\n\\n    struct SyncPacket {\\n        uint256 lockId;\\n        SyncInfo packet;\\n    }\\n\\n    struct UnlimitedAmount {\\n        uint32 timestamp;\\n        uint256 amount;\\n    }\\n\\n}\",\"keccak256\":\"0xf1a7a0153b2bd0a20c1dd536adfa44e1c7c3dc7336a37eef2e3166c44285792e\",\"license\":\"MIT\"},\"contracts/libraries/LibLockTOS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary LibLockTOS {\\n    struct Point {\\n        int256 bias;\\n        int256 slope;\\n        uint256 timestamp;\\n    }\\n\\n    struct LockedBalance {\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        bool withdrawn;\\n    }\\n\\n    struct SlopeChange {\\n        int256 bias;\\n        int256 slope;\\n        uint256 changeTime;\\n    }\\n\\n    struct LockedBalanceInfo {\\n        uint256 id;\\n        uint256 start;\\n        uint256 end;\\n        uint256 amount;\\n        uint256 balance;\\n    }\\n}\\n\",\"keccak256\":\"0x2733692b11bb4a51fd4363155c6fe14ca14dc49ef00776014c90553fc738eee2\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n        uint256 claimCounts;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256[] claimTimes;\\n        uint256[] claimPercents;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        address poolAddress;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        // if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n        //     +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n        //     tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        // ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.startTime == 0 ||\\n        //     tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.rewardParams.poolAddress == address(0) ||\\n        //     tokamakVaults.rewardParams.params.totalClaimCount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.secondClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x70aa30ad2bdcc19fee1890162b02f21077efadb0da73a0898d2806f96ff0ffe5\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage2.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage2  {\\n\\n    address public _owner;\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n\\n}\",\"keccak256\":\"0x143792b4a69ee77d8ac3bf521938acc34f9e6800751d4db9bae90333b4749a4a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$b2d160aea0e65d5e83164dd2e3c22b89ec$__9063507c8bd190602401602060405180830381865af415801561108d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b191906116af565b90506001600160a01b0381166111095760405162461bcd60e51b815260206004820152601a60248201527f6c314d657373656e676572206973205a65726f416464726573730000000000006044820152606401610424565b60006382fbdc9c60e01b8460405160240161112491906116f8565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051633dbb202b60e01b81529091506001600160a01b03831690633dbb202b9061119d9088908590889060040161170b565b600060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b505050505050505050565b6001600160a01b03811681146111eb57600080fd5b50565b60006020828403121561120057600080fd5b813561120b816111d6565b9392505050565b60006020828403121561122457600080fd5b81356001600160e01b03198116811461120b57600080fd5b60006020828403121561124e57600080fd5b5035919050565b600080600080600060a0868803121561126d57600080fd5b8535611278816111d6565b94506020860135611288816111d6565b93506040860135611298816111d6565b925060608601359150608086013563ffffffff811681146112b857600080fd5b809150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156112ff576112ff6112c6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561132e5761132e6112c6565b604052919050565b600067ffffffffffffffff821115611350576113506112c6565b5060051b60200190565b6000806040838503121561136d57600080fd5b8235611378816111d6565b915060208381013567ffffffffffffffff81111561139557600080fd5b8401601f810186136113a657600080fd5b80356113b96113b482611336565b611305565b81815260059190911b820183019083810190888311156113d857600080fd5b928401925b828410156113f6578335825292840192908401906113dd565b80955050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561143d57835183529284019291840191600101611421565b50909695505050505050565b6000602080838503121561145c57600080fd5b825167ffffffffffffffff81111561147357600080fd5b8301601f8101851361148457600080fd5b80516114926113b482611336565b81815260059190911b820183019083810190878311156114b157600080fd5b928401925b828410156114cf578351825292840192908401906114b6565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115611519576115196114f0565b92915050565b600060018201611531576115316114f0565b5060010190565b60008060006060848603121561154d57600080fd5b8351925060208401519150604084015190509250925092565b6000602080838503121561157957600080fd5b825167ffffffffffffffff81111561159057600080fd5b8301601f810185136115a157600080fd5b80516115af6113b482611336565b818152606091820283018401918482019190888411156115ce57600080fd5b938501935b838510156116185780858a0312156115eb5760008081fd5b6115f36112dc565b85518152868601518782015260408087015190820152835293840193918501916115d3565b50979650505050505050565b60005b8381101561163f578181015183820152602001611627565b50506000910152565b6000835161165a818460208801611624565b83519083019061166e818360208801611624565b01949350505050565b6bffffffffffffffffffffffff198360601b168152600082516116a1816014850160208701611624565b919091016014019392505050565b6000602082840312156116c157600080fd5b815161120b816111d6565b600081518084526116e4816020860160208601611624565b601f01601f19169290920160200192915050565b60208152600061120b60208301846116cc565b6001600160a01b038416815260606020820152600061172d60608301856116cc565b905063ffffffff8316604083015294935050505056fea164736f6c6343000812000a",
  "libraries": {
    "LibProject": "0x5d85cD9D3e2864D4a156497083eb6E4394bF8aae"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4227,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4229,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "pauseProxy",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4233,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4237,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4241,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 2430,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "maxLockCountPerRegister",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2432,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "_manager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2434,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "addressManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2436,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "lockTos",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2438,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "l2Register",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2440,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "minGasLimitRegister",
        "offset": 20,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 2445,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "syncInfoOfLockId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(SyncInfo)3237_storage)"
      },
      {
        "astId": 2447,
        "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
        "label": "_lock",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(SyncInfo)3237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibLockId.SyncInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SyncInfo)3237_storage"
      },
      "t_struct(SyncInfo)3237_storage": {
        "encoding": "inplace",
        "label": "struct LibLockId.SyncInfo",
        "members": [
          {
            "astId": 3230,
            "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
            "label": "slope",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3232,
            "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
            "label": "bias",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 3234,
            "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 3236,
            "contract": "contracts/L1/L1StosToL2.sol:L1StosToL2",
            "label": "syncTime",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}