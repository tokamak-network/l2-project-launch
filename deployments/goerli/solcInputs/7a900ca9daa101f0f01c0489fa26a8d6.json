{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Storage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC165.sol\";\n\n/**\n * @dev Storage based implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165Storage is ERC165 {\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/common/AccessibleCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./AccessRoleCommon.sol\";\n\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\n    modifier onlyOwner() {\n        require(isAdmin(msg.sender), \"Accessible: Caller is not an admin\");\n        _;\n    }\n\n    /// @dev add admin\n    /// @param account  address to add\n    function addAdmin(address account) public virtual onlyOwner {\n        grantRole(ADMIN_ROLE, account);\n    }\n\n    /// @dev remove admin\n    /// @param account  address to remove\n    function removeAdmin(address account) public virtual onlyOwner {\n        renounceRole(ADMIN_ROLE, account);\n    }\n\n    /// @dev transfer admin\n    /// @param newAdmin new admin address\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\n        require(newAdmin != address(0), \"Accessible: zero address\");\n        require(msg.sender != newAdmin, \"Accessible: same admin\");\n\n        grantRole(ADMIN_ROLE, newAdmin);\n        renounceRole(ADMIN_ROLE, msg.sender);\n    }\n\n    /// @dev whether admin\n    /// @param account  address to check\n    function isAdmin(address account) public view virtual returns (bool) {\n        return hasRole(ADMIN_ROLE, account);\n    }\n}\n"
    },
    "contracts/common/AccessRoleCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AccessRoleCommon {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n    bytes32 public constant POLICY_ROLE = keccak256(\"POLICY_ROLE\");\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(address account, uint256 amount) external returns (bool);\n\n    function burn(address account, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IProxyAction.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n\n/// @title IProxyAction\ninterface IProxyAction {\n\n    /// @dev set the implementation address and status of the proxy[index]\n    /// @param newImplementation Address of the new implementation.\n    /// @param _index index\n    /// @param _alive _alive\n    function setImplementation2(\n        address newImplementation,\n        uint256 _index,\n        bool _alive\n    ) external;\n\n\n    /// @dev set alive status of implementation\n    /// @param newImplementation Address of the new implementation.\n    /// @param _alive alive status\n    function setAliveImplementation2(address newImplementation, bool _alive)\n        external;\n\n\n    /// @dev set selectors of Implementation\n    /// @param _selectors being added selectors\n    /// @param _imp implementation address\n    function setSelectorImplementations2(\n        bytes4[] calldata _selectors,\n        address _imp\n    ) external  ;\n\n\n\n    /// onlyOwner\n\n    /// @notice Set pause state\n    /// @param _pause true:pause or false:resume\n    function setProxyPause(bool _pause) external ;\n\n\n    /// anybody\n\n    /// @dev view implementation address of selector of function\n    /// @param _selector selector of function\n    /// @return impl address of the implementation\n    function getSelectorImplementation2(bytes4 _selector)\n        external\n        view\n        returns (address impl);\n\n\n    /// @dev view implementation address of the proxy[index]\n    /// @param _index index of proxy\n    /// @return address of the implementation\n    function implementation2(uint256 _index) external view returns (address) ;\n}\n\n"
    },
    "contracts/interfaces/IProxyEvent.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\n\n/// @title IProxyEvent\ninterface IProxyEvent {\n\n    event Upgraded(address indexed implementation);\n\n    event SetAliveImplementation(address indexed impl, bool alive);\n    event SetSelectorImplementation(bytes4 indexed selector, address indexed impl);\n\n\n}\n"
    },
    "contracts/L1/interfaces/IERC20Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC20Factory {\n\n    /// @dev Create a ERC20Factory\n    /// @param name name\n    /// @param symbol symbol\n    /// @param initialSupply initialSupply\n    /// @param owner  owner address\n    /// @return contract address\n    function create(\n        string calldata name,\n        string calldata symbol,\n        uint256 initialSupply,\n        address owner\n    ) external returns (address) ;\n\n    /// @dev Last generated contract information\n    function lastestCreated() external view returns (address contractAddress, string memory name, string memory symbol);\n\n    /// @dev Contract information stored in the index\n    function getContracts(uint256 _index) external view returns (address contractAddress, string memory name, string memory symbol);\n\n\n}\n"
    },
    "contracts/L1/interfaces/OnApprove.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\ninterface OnApprove {\n  function onApprove(address owner, address spender, uint256 amount, bytes calldata data) external returns (bool);\n}"
    },
    "contracts/L1/L1ProjectManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../common/AccessibleCommon.sol\";\nimport \"./L1ProjectManagerStorage.sol\";\n\nimport { IERC20Factory } from \"./interfaces/IERC20Factory.sol\";\nimport { LibProject } from \"../libraries/LibProject.sol\";\nimport \"../libraries/SafeERC20.sol\";\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ninterface L2ProjectManagerI {\n    function distributesL2Token(\n        address l1Token,\n        address l2Token,\n        uint256 projectId,\n        uint256 totalAmount,\n        LibProject.TokamakVaults[] memory tokamakVaults,\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\n    ) external;\n}\n\ninterface L1CrossDomainMessengerI {\n    function sendMessage(\n        address _target,\n        bytes memory _message,\n        uint32 _gasLimit\n    ) external;\n}\n\ninterface L1BridgeI {\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n}\n\ninterface IIERC20 {\n    function mint(address account, uint256 amount) external;\n}\n\n/**\n * @title L1ProjectManager\n * @dev\n */\ncontract L1ProjectManager is ProxyStorage, AccessibleCommon, L1ProjectManagerStorage {\n    using SafeERC20 for IERC20;\n\n    event CreatedProject(\n        address l1Token,\n        uint256 projectId,\n        address tokenOwner,\n        address projectOwner,\n        address addressManager,\n        uint256 initialTotalSupply,\n        string projectName, string tokenName, string tokenSymbol);\n\n    event SetL2Token(uint256 projectId, uint8 l2Type, address addressManager, address l2Token);\n    event SetL2Infos(uint8 l2Type, address l2TokenFactory, address l2ProjectManager, uint32 depositMinGasLimit, uint32 sendMsgMinGasLimit);\n    event LaunchedProject(\n        uint256 projectId,\n        address l1Token,\n        address l2Token,\n        uint256 totalAmount);\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() {\n    }\n\n    /* ========== onlyOwner ========== */\n\n    function setL2Infos(\n        uint8 l2Type,\n        address _l2TokenFactory,\n        address _l2ProjectManager,\n        uint32 _depositMinGasLimit,\n        uint32 _sendMsgMinGasLimit\n    )\n        external\n        nonZeroAddress(_l2TokenFactory) nonZeroAddress(_l2ProjectManager)\n        nonZero(_depositMinGasLimit) nonZero(_sendMsgMinGasLimit)\n        onlyOwner\n    {\n        require(l2Type < uint8(LibProject.L2_TYPE.NONE), \"unsupported l2Type\");\n        require(\n            l2Info[l2Type].l2TokenFactory != _l2TokenFactory\n            || l2Info[l2Type].l2ProjectManager != _l2ProjectManager\n            || l2Info[l2Type].depositMinGasLimit != _depositMinGasLimit\n            || l2Info[l2Type].sendMsgMinGasLimit != _sendMsgMinGasLimit , \"same\");\n\n        LibProject.L2Info memory info = LibProject.L2Info({\n                l2TokenFactory: _l2TokenFactory,\n                l2ProjectManager: _l2ProjectManager,\n                depositMinGasLimit: _depositMinGasLimit,\n                sendMsgMinGasLimit: _sendMsgMinGasLimit\n        });\n\n        l2Info[l2Type] = info;\n\n        emit SetL2Infos(l2Type, _l2TokenFactory, _l2ProjectManager, _depositMinGasLimit, _sendMsgMinGasLimit);\n    }\n\n    function setL1TokenFactories(uint8[] memory tokenTypes, address[] memory _l1TokenFactorys)\n        external onlyOwner\n    {\n        require(tokenTypes.length != 0 && tokenTypes.length == _l1TokenFactorys.length, \"wrong length\");\n        uint256 len = tokenTypes.length;\n\n        for (uint256 i = 0; i < len; i++){\n            require(tokenTypes[i] < uint8(LibProject.TOKEN_TYPE.NONE), \"unsupported token type\");\n            require(l1TokenFactory[tokenTypes[i]] != _l1TokenFactorys[i], \"same address\");\n            l1TokenFactory[tokenTypes[i]] = _l1TokenFactorys[i];\n        }\n    }\n\n    /* ========== Only ProjectOwner ========== */\n\n    /// @dev 프로젝트 생성\n    function createProject(\n        address tokenOwner,\n        address projectOwner,\n        address addressManager,\n        uint256 initialTotalSupply,\n        uint8 tokenType,\n        string memory projectName,\n        string memory tokenName,\n        string memory tokenSymbol\n    )\n        external\n        returns (uint256)\n    {\n        require(tokenOwner != address(0) && projectOwner != address(0) && addressManager != address(0),\n            \"zero address\");\n        require(bytes(projectName).length != 0, \"projectName is null\");\n        require(bytes(tokenName).length != 0, \"tokenName is null\");\n        require(bytes(tokenSymbol).length != 0, \"tokenSymbol is null\");\n        require(tokenType < uint8(LibProject.TOKEN_TYPE.NONE)\n            && address(l1TokenFactory[tokenType]) != address(0), \"wrong tokenType or zero l1TokenFactory\");\n\n        address projectToken = IERC20Factory(l1TokenFactory[tokenType]).create(\n            tokenName, tokenSymbol, initialTotalSupply, address(this)\n        );\n\n        require(projectToken != address(0), \"zero projectToken\");\n        uint256 projectId = ++projectCount;\n        // address _tokenOwner = tokenOwner;\n\n        projects[projectId] = LibProject.ProjectInfo({\n            projectOwner: projectOwner,\n            tokenOwner : tokenOwner,\n            l1Token : projectToken,\n            l2Token : address(0),\n            addressManager : addressManager,\n            initialTotalSupply : initialTotalSupply,\n            tokenType : tokenType,\n            l2Type : uint8(0),\n            projectName : projectName\n        });\n\n        projectTokens[projectToken] = projectId;\n\n        emit CreatedProject(\n            projectToken, projectId, tokenOwner, projectOwner, addressManager, initialTotalSupply,\n            projectName,  tokenName, tokenSymbol );\n        return projectId;\n    }\n\n    function launchProject(\n        uint256 projectId,\n        address l2Token,\n        uint256 totalAmount,\n        LibProject.TokamakVaults memory tokamakVaults,\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\n    )\n        external nonZeroAddress(l2Token) nonZero(totalAmount)\n    {\n\n        LibProject.ProjectInfo memory info = projects[projectId];\n        require(info.projectOwner != address(0) && msg.sender == info.projectOwner, \"caller is not projectOwner.\");\n        require(info.l2Token == address(0), \"already launched\");\n        require(projectTokens[info.l1Token] == projectId, \"wrong l1Token\");\n\n        address l1Messenger = LibProject.getL1CommunicationMessenger(info.addressManager);\n        require(l1Messenger != address(0), \"l1Messenger is ZeroAddress\");\n\n        uint256 totalAllocatedAmount = 0;\n\n        // 입력 데이타 검증\n        (bool boolValidateTokamakVaults, uint256 tokamakVaultsTotalAmount) = LibProject.validateTokamakVaults(tokamakVaults);\n        require(boolValidateTokamakVaults, \"TokamakVaults vaildate fail\");\n        totalAllocatedAmount += tokamakVaultsTotalAmount;\n\n        if(customScheduleVaults.length != 0){\n            (bool boolValidateCustom1, uint256 custom1TotalAmount) = LibProject.validateScheduleVault(customScheduleVaults);\n            require(boolValidateCustom1, \"customScheduleVaults vaildate fail\");\n            totalAllocatedAmount += custom1TotalAmount;\n        }\n\n        if(customScheduleVaults.length != 0){\n            (bool boolValidateCustom2, uint256 custom2TotalAmount) = LibProject.validateNonScheduleVault(customNonScheduleVaults);\n            require(boolValidateCustom2, \"customNonScheduleVaults vaildate fail\");\n            totalAllocatedAmount += custom2TotalAmount;\n        }\n        require(totalAllocatedAmount == totalAmount, \"totalAmount is different from vaults allocated amount\");\n\n        uint256 id = projectId;\n\n        // 1. L2토큰 정보를 저장한다.\n        projects[id].l2Token = l2Token;\n        info.l2Token = l2Token;\n\n        bytes memory functionParams = abi.encode(\n            info.l1Token,\n            info.l2Token,\n            id,\n            totalAmount,\n            tokamakVaults,\n            customScheduleVaults,\n            customNonScheduleVaults\n        );\n        uint256 balance = IERC20(projects[id].l1Token).balanceOf(address(this));\n\n        // 2. L1 토큰 발행하고,\n        if (balance <= info.initialTotalSupply && info.tokenType != 0) {\n            IIERC20(info.l1Token).mint(address(this), info.initialTotalSupply - balance);\n            balance = IERC20(projects[id].l1Token).balanceOf(address(this));\n        }\n\n        require(balance >= info.initialTotalSupply, \"balance is insufficient\");\n\n        LibProject.L2Info memory _l2Info = l2Info[info.l2Type];\n\n        // 3. L2로 디파짓 한다.\n        _depositL1TokenToL2(\n            address(this),\n            info.addressManager,\n            info.l1Token,\n            info.l2Token,\n            _l2Info.l2ProjectManager,\n            info.initialTotalSupply,\n            _l2Info.depositMinGasLimit,\n            abi.encode(id)\n        );\n        // bytes memory callData = abi.encodeWithSelector(L2ProjectManagerI.distributesL2Token.selector, functionParams);\n\n        // 4. 커스텀 배포정보를 L2에 보낸다.\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\n                _l2Info.l2ProjectManager,\n                abi.encodeWithSelector(L2ProjectManagerI.distributesL2Token.selector, functionParams),\n                _l2Info.sendMsgMinGasLimit\n            );\n\n        emit LaunchedProject(id, info.l1Token, info.l2Token, info.initialTotalSupply);\n    }\n\n    /* ========== VIEW ========== */\n    function viewL2Info(uint8 _l2Type) external view returns (LibProject.L2Info memory) {\n        return l2Info[_l2Type];\n    }\n\n\n    /* === ======= internal ========== */\n    function _depositL1TokenToL2(\n        address sender,\n        address addressManager, address l1Token, address l2Token, address depositTo,\n        uint256 amount, uint32 _minGasLimit, bytes memory data)\n        internal\n    {\n        address l1Bridge = LibProject.getL1Bridge(addressManager);\n        require(l1Bridge != address(0), \"l1Bridge is ZeroAddress\");\n\n        uint256 allowance = IERC20(l1Token).allowance(address(this), l1Bridge);\n\n        if (allowance < amount) IERC20(l1Token).approve(l1Bridge, type(uint256).max);\n\n        L1BridgeI(l1Bridge).depositERC20To(\n            l1Token,\n            l2Token,\n            depositTo,\n            amount,\n            _minGasLimit,\n            data\n        );\n    }\n}"
    },
    "contracts/L1/L1ProjectManagerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../proxy/Proxy.sol\";\nimport \"./L1ProjectManagerStorage.sol\";\n\n\n/**\n * @title L1ProjectManagerProxy\n * @dev\n */\ncontract L1ProjectManagerProxy is Proxy, L1ProjectManagerStorage {\n\n}"
    },
    "contracts/L1/L1ProjectManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport { LibProject } from \"../libraries/LibProject.sol\";\n\n/**\n * @title L1ProjectManagerStorage\n * @dev\n */\ncontract L1ProjectManagerStorage {\n\n    bool internal free = true;\n\n    uint256 public projectCount;\n\n    // TOKEN_TYPE - l1TokenFactory\n    mapping(uint8 => address) public l1TokenFactory;\n\n    // projectIndex - ProjectInfo\n    mapping(uint256 => LibProject.ProjectInfo) public projects;\n\n    // l1TokenAddress - projectIndex\n    mapping(address => uint256) public projectTokens;\n\n    // l2type - l2TokenFactory\n    mapping(uint8 => LibProject.L2Info) public l2Info;\n\n\n    modifier onlyProjectOwner(uint256 projectid) {\n        require(projects[projectid].projectOwner != address(0) &&\n            msg.sender == projects[projectid].projectOwner, \"caller is not projectOwner.\");\n        _;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"Z1\");\n        _;\n    }\n\n    modifier nonZeroAddress(address account) {\n        require(account != address(0), \"Z2\");\n        _;\n    }\n\n    modifier ifFree {\n        require(free, \"lock\");\n        free = false;\n        _;\n        free = true;\n    }\n\n}"
    },
    "contracts/L1/L1StosToL2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport { LibProject } from \"../libraries/LibProject.sol\";\nimport \"../libraries/LibLockTOS.sol\";\nimport \"../proxy/ProxyStorage2.sol\";\nimport \"./L1StosToL2Storage.sol\";\nimport \"hardhat/console.sol\";\n\ninterface ILockTos {\n    function locksInfo(uint256 _lockId)\n            external\n            view\n            returns (\n                uint256 start,\n                uint256 end,\n                uint256 amount\n            );\n\n    function locksOf(address _addr)\n        external\n        view\n        returns (uint256[] memory);\n\n    function pointHistoryOf(uint256 _lockId)\n        external\n        view\n        returns (LibLockTOS.Point[] memory);\n\n}\n\ninterface IL1StosInL2 {\n    function register(bytes memory data) external ;\n}\n\ninterface L1CrossDomainMessengerI {\n    function sendMessage(\n        address _target,\n        bytes memory _message,\n        uint32 _gasLimit\n    ) external;\n}\n\n\ncontract L1StosToL2 is ProxyStorage2, L1StosToL2Storage {\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor (\n        address managerAddress,\n        address lockTosAddress,\n        address addressManagerAddress,\n        uint256 maxLockCountPerRegister_,\n        uint32 minGasLimitRegister_\n    ) {\n        _manager = managerAddress;\n        lockTos = lockTosAddress;\n        addressManager = addressManagerAddress;\n        maxLockCountPerRegister = maxLockCountPerRegister_;\n        minGasLimitRegister = minGasLimitRegister_;\n    }\n\n    function setL2Register(address l2Register_) external onlyManager {\n        require(l2Register != l2Register_, \"same\");\n        l2Register = l2Register_;\n    }\n\n    /* ========== Anybody can ========== */\n\n    function register(address account) public {\n        uint256[] memory lockIds = ILockTos(lockTos).locksOf(account);\n        // console.log(\"register %s\", account);\n        // console.log(\"lockIds.length %s\", lockIds.length);\n        require(lockIds.length != 0, \"no register data\");\n        require(lockIds.length <= maxLockCountPerRegister, \"exceeded the maximum number of register.\");\n        _register(account, lockIds);\n    }\n\n    function register(address account, uint256[] memory lockIds) public {\n        require(lockIds.length <= maxLockCountPerRegister, \"exceeded the maximum number of register.\");\n        require(lockIds.length != 0, \"no register data\");\n        uint256[] memory userLockIds = ILockTos(lockTos).locksOf(account);\n\n        for(uint256 i = 0; i < lockIds.length; i++){\n            bool unMatched = true;\n            for(uint256 j = 0; j < userLockIds.length; j++){\n                if(lockIds[i] == userLockIds[j]) {\n                    unMatched = false;\n                    if(j < userLockIds.length-1)\n                        userLockIds[j] = userLockIds[userLockIds.length-1];\n                    delete userLockIds[userLockIds.length-1];\n                    break;\n                }\n            }\n            require(!unMatched, \"owner is not account\");\n        }\n\n        _register(account, lockIds);\n    }\n\n    /* ========== VIEW ========== */\n\n    function needSyncList(address account) public view returns (uint256[] memory lockIds) {\n        uint256[] memory ids = ILockTos(lockTos).locksOf(account);\n\n        for(uint256 i = 0; i < ids.length; i++){\n            LibLockId.SyncInfo memory curSync = syncInfoOfLockId[ids[i]];\n            (, uint256 end, uint256 amount) = ILockTos(lockTos).locksInfo(ids[i]);\n            if(amount != 0 && block.timestamp < end) {\n                LibLockTOS.Point[] memory history = ILockTos(lockTos).pointHistoryOf(ids[i]);\n                if(history.length != 0){\n                    LibLockTOS.Point memory point = history[history.length-1];\n                    if(curSync.timestamp < point.timestamp) lockIds[lockIds.length-1] = ids[i];\n                }\n            }\n        }\n    }\n\n    function viewRegisterInfoOfLockId(uint256 lockId) external view returns(LibLockId.SyncInfo memory) {\n        return syncInfoOfLockId[lockId];\n    }\n\n    /* === ======= internal ========== */\n\n    function _register(address account, uint256[] memory lockIds) internal {\n\n        bytes memory syncPackets ;\n        uint256 syncIdsCount ;\n\n        // packet {address: count to sync: 1st sync packet: 2nd sync packet: .....}\n        // address : 20 bytes\n        // count to sync : 1 byte (max 256 sync packets) but it is less than maxLockCountPerSync\n        // sync packets : count to sync * 104 bytes ( count * 104 )\n        // one sync packets : 104 bytes:  (32 byte) uint256 lockId, (32+32+4+4) syncInfo -> total 104\n\n        for(uint256 i = 0; i < lockIds.length; i++){\n\n            LibLockId.SyncInfo memory curSync = syncInfoOfLockId[lockIds[i]];\n\n            (, uint256 end, uint256 amount) = ILockTos(lockTos).locksInfo(lockIds[i]);\n\n            if (amount != 0 && block.timestamp < end){\n                LibLockTOS.Point[] memory history = ILockTos(lockTos).pointHistoryOf(lockIds[i]);\n\n                if(history.length != 0){\n                    LibLockTOS.Point memory point = history[history.length-1];\n\n                    if(curSync.timestamp < point.timestamp) {\n                        LibLockId.SyncInfo memory newSync = LibLockId.SyncInfo(\n                            {\n                                slope: point.slope,\n                                bias: point.bias,\n                                timestamp: uint32(point.timestamp),\n                                syncTime: uint32(block.timestamp)\n                            }\n                        );\n\n                        syncInfoOfLockId[lockIds[i]] = newSync;\n                        syncIdsCount++;\n\n                        syncPackets = bytes.concat(syncPackets,\n                            abi.encodePacked(lockIds[i], newSync.slope, newSync.bias, newSync.timestamp, newSync.syncTime));\n\n                    }\n                }\n            }\n        }\n\n        require(syncPackets.length > 0, \"no register data\");\n        // console.log('_register syncPackets.length  %s', syncPackets.length);\n\n        _sendMessage(\n            l2Register,\n            abi.encodePacked(account, syncPackets),\n            // bytes.concat(abi.encodePacked(account), syncPackets),\n            minGasLimitRegister\n            );\n    }\n\n\n    function _sendMessage(address target, bytes memory data, uint32 minGasLimit) internal {\n        address l1Messenger = LibProject.getL1CommunicationMessenger(addressManager);\n        require(l1Messenger != address(0), \"l1Messenger is ZeroAddress\");\n\n        bytes memory callData = abi.encodeWithSelector(IL1StosInL2.register.selector, data);\n\n        // console.log('_sendMessage target %s', target, ' data.length %s', data.length);\n        // console.logBytes(data);\n        // console.log('_sendMessage l1Messenger %s', l1Messenger);\n\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\n                target,\n                callData,\n                minGasLimit\n            );\n    }\n\n}"
    },
    "contracts/L1/L1StosToL2Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../libraries/LibLockId.sol\";\n\ncontract L1StosToL2Storage  {\n    uint256 public maxLockCountPerRegister;\n    address public _manager;\n    address public addressManager;\n    address public lockTos;\n    address public l2Register;\n    uint32 minGasLimitRegister;\n\n    // account-lockId-sync된 정보 (히스토리의 인덱스 번호, time)\n    mapping(uint256 => LibLockId.SyncInfo) public syncInfoOfLockId;\n    bool internal _lock;\n\n    modifier onlyManager() {\n        require(_manager == msg.sender, \"not manager\");\n        _;\n    }\n\n    modifier ifFree {\n        require(_lock != true, \"in use\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n}\n"
    },
    "contracts/L1/L1toL2Message.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { LibProject } from \"../libraries/LibProject.sol\";\nimport \"../libraries/SafeERC20.sol\";\nimport {IERC20} from \"../interfaces/IERC20.sol\";\nimport \"../libraries/BytesLib.sol\";\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Storage.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\nimport { OnApprove } from \"./interfaces/OnApprove.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface L1CrossDomainMessengerI {\n    function sendMessage(\n        address _target,\n        bytes memory _message,\n        uint32 _gasLimit\n    ) external;\n}\n\ninterface L1BridgeI {\n    function depositERC20To(\n        address _l1Token,\n        address _l2Token,\n        address _to,\n        uint256 _amount,\n        uint32 _l2Gas,\n        bytes calldata _data\n    ) external;\n}\n\n/**\n * @title L1toL2Message\n * @dev\n */\ncontract L1toL2Message is ERC165Storage{\n    using SafeERC20 for IERC20;\n    using BytesLib for bytes;\n    /* ========== DEPENDENCIES ========== */\n\n    struct CallMessage {\n        address target;\n        bytes message;\n        uint32 minGasLimit;\n    }\n\n    struct DepositMessage {\n        address l1Token;\n        address l2Token;\n        DepositTo[] depositTos;\n    }\n\n    struct DepositTo {\n        address to;\n        uint256 amount;\n        uint32 minGasLimit;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"Z1\");\n        _;\n    }\n\n    modifier nonZeroAddress(address account) {\n        require(account != address(0), \"Z2\");\n        _;\n    }\n\n    constructor() {\n        _registerInterface(OnApprove(address(this)).onApprove.selector);\n    }\n\n    /*\n    function onApprove(\n        address sender,\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) public returns (bool) {\n\n        // data :\n        // 20 bytes addressManager,\n        // 20 bytes l1Token,\n        // 20 bytes  l2Token,\n        // 20 bytes depositAndCallTarget,\n        // 4 bytes minGasLimitForDeposit\n        // 4 bytes minGasLimitForCall\n        // 나머지 bytes call\n\n        require(data.length > 88, 'wrong data');\n        // console.log(\"data.length %s\", data.length);\n\n        address addressManager = data.toAddress(0);\n        address depositAndCallTarget = data.toAddress(60);\n        uint256 amount1 = amount;\n\n        address l1Token = data.toAddress(20);\n        address l2Token = data.toAddress(40);\n        uint32  minGasLimitForDeposit = data.toUint32(80);\n        uint32  minGasLimitForCall = data.toUint32(84);\n        bytes memory callData = data.slice(88, (data.length-88));\n\n        // console.log(\"addressManager %s\", addressManager);\n        // console.log(\"l1Token %s\", l1Token);\n        // console.log(\"l2Token %s\", l2Token);\n        // console.log(\"depositAndCallTarget %s\", depositAndCallTarget);\n        // console.log(\"amount %s\", amount);\n        // console.log(\"minGasLimitForDeposit %s\", minGasLimitForDeposit);\n        // console.log(\"minGasLimitForCall %s\", minGasLimitForCall);\n        // console.logBytes(data.slice(88, data.length-1));\n\n        address l1Messenger = LibProject.getL1CommunicationMessenger(addressManager);\n        require(l1Messenger != address(0), \"l1Messenger is ZeroAddress\");\n\n        _depositL1TokenToL2(\n            sender,\n            addressManager,\n            l1Token,\n            l2Token,\n            depositAndCallTarget,\n            amount1,\n            minGasLimitForDeposit\n        );\n\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\n                depositAndCallTarget,\n                callData,\n                minGasLimitForCall\n            );\n\n        return true;\n    }\n    */\n\n    function depositAndCall(\n        address addressManager, address l1Token, address l2Token, address depositAndCallTarget,\n        uint256 amount,\n        uint32 minGasLimitForDeposit,\n        uint32 minGasLimitForCall, bytes memory callData\n    )\n        external\n    {\n        address l1Messenger = LibProject.getL1CommunicationMessenger(addressManager);\n        require(l1Messenger != address(0), \"l1Messenger is ZeroAddress\");\n\n        _depositL1TokenToL2(msg.sender, addressManager, l1Token, l2Token, depositAndCallTarget, amount, minGasLimitForDeposit);\n\n        L1CrossDomainMessengerI(l1Messenger).sendMessage(\n                depositAndCallTarget,\n                callData,\n                minGasLimitForCall\n            );\n    }\n\n    function depositsAndMessages(\n        address addressManager,\n        DepositMessage[] memory depositMassages,\n        CallMessage[] memory callMessages\n    )\n        external\n    {\n        _deposits(msg.sender, addressManager, depositMassages);\n        l2SendMessage(addressManager, callMessages);\n    }\n\n    function l2SendMessage(\n            address addressManager,\n            CallMessage[] memory callMessages\n        )\n        public\n    {\n        address l1Messenger = LibProject.getL1CommunicationMessenger(addressManager);\n        require(l1Messenger != address(0), \"l1Messenger is ZeroAddress\");\n        require(callMessages.length != 0, 'zero call message');\n\n        uint256 len = callMessages.length ;\n        for(uint256 i = 0; i < len ; i++){\n            require(callMessages[i].target != address(0)\n                && callMessages[i].message.length != 0\n                && callMessages[i].minGasLimit != 0, 'invalid message');\n        }\n\n        for(uint256 i = 0; i < len ; i++){\n            L1CrossDomainMessengerI(l1Messenger).sendMessage(\n                callMessages[i].target,\n                callMessages[i].message,\n                callMessages[i].minGasLimit\n            );\n        }\n    }\n\n    function depositL1TokenToL2(\n        address addressManager, address l1Token, address l2Token, address depositTo,\n        uint256 amount, uint32 _minGasLimit )\n        public\n    {\n        _depositL1TokenToL2(msg.sender, addressManager, l1Token, l2Token, depositTo, amount, _minGasLimit);\n    }\n\n    function deposits(\n        address addressManager, DepositMessage[] memory depositMessages)\n        public nonZeroAddress(addressManager)\n    {\n        _deposits(msg.sender, addressManager, depositMessages);\n    }\n\n    function depositToMany(\n        address addressManager, address l1Token, address l2Token, DepositTo[] memory depositTos )\n        public\n    {\n        _depositToMany(msg.sender, addressManager,  l1Token,  l2Token, depositTos);\n    }\n\n\n    function _depositL1TokenToL2(\n        address sender,\n        address addressManager, address l1Token, address l2Token, address depositTo,\n        uint256 amount, uint32 _minGasLimit )\n        internal\n    {\n        address l1Bridge = LibProject.getL1Bridge(addressManager);\n        require(l1Bridge != address(0), \"l1Bridge is ZeroAddress\");\n\n        require(IERC20(l1Token).balanceOf(sender) >= amount, \"l1Token balance is insufficient\");\n        require(IERC20(l1Token).allowance(sender, address(this)) >= amount, \"l1Token allowance is insufficient\");\n\n        uint256 allowance = IERC20(l1Token).allowance(address(this), l1Bridge);\n\n        if (allowance < amount) {\n            IERC20(l1Token).approve(l1Bridge, type(uint256).max);\n        }\n\n        IERC20(l1Token).safeTransferFrom(sender, address(this), amount);\n\n        L1BridgeI(l1Bridge).depositERC20To(\n            l1Token,\n            l2Token,\n            depositTo,\n            amount,\n            _minGasLimit,\n            abi.encode(l1Token, l2Token, depositTo, amount)\n        );\n    }\n\n    function _deposits(\n        address sender, address addressManager, DepositMessage[] memory depositMessages)\n        internal\n    {\n        require(depositMessages.length != 0, 'zero depositMessages');\n\n        uint256 len = depositMessages.length;\n        for(uint256 i = 0; i < len ; i++){\n            require(\n                depositMessages[i].l1Token != address(0) &&\n                depositMessages[i].l2Token != address(0) &&\n                depositMessages[i].depositTos.length != 0, \"invalid depositMessages\");\n        }\n\n        for(uint256 i = 0; i < len ; i++){\n            _depositToMany(\n                sender,\n                addressManager,\n                depositMessages[i].l1Token,\n                depositMessages[i].l2Token,\n                depositMessages[i].depositTos );\n        }\n    }\n\n    function _depositToMany(\n        address sender, address addressManager, address l1Token, address l2Token, DepositTo[] memory depositTos )\n        internal\n    {\n        address l1Bridge = LibProject.getL1Bridge(addressManager);\n        require(l1Bridge != address(0), \"l1Bridge is ZeroAddress\");\n\n        require(depositTos.length != 0, \"zero depositTo\");\n\n        uint256 len = depositTos.length;\n        uint256 sumAmount = 0;\n        for(uint256 i = 0; i < len ; i++){\n            require(\n                depositTos[i].to != address(0) &&\n                depositTos[i].amount != 0 && depositTos[i].minGasLimit != 0, \"invalid depositTos\");\n            sumAmount += depositTos[i].amount;\n        }\n\n        require(IERC20(l1Token).balanceOf(sender) >= sumAmount, \"l1Token balance is insufficient\");\n        require(IERC20(l1Token).allowance(sender, address(this)) >= sumAmount, \"l1Token allowance is insufficient\");\n\n        uint256 allowance = IERC20(l1Token).allowance(address(this), l1Bridge);\n\n        if (allowance < sumAmount) {\n            IERC20(l1Token).approve(l1Bridge, type(uint256).max);\n        }\n\n        IERC20(l1Token).safeTransferFrom(sender, address(this), sumAmount);\n        for(uint256 i = 0; i < len ; i++){\n            L1BridgeI(l1Bridge).depositERC20To(\n                l1Token,\n                l2Token,\n                depositTos[i].to,\n                depositTos[i].amount,\n                depositTos[i].minGasLimit,\n                abi.encode(l1Token, l2Token, depositTos[i].to, depositTos[i].amount)\n            );\n        }\n    }\n\n}"
    },
    "contracts/L2/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n    /// @notice The permit typehash used in the permit signature\n    /// @return The typehash for the permit\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    /// @notice The domain separator used in the permit signature\n    /// @return The domain seperator used in encoding of permit signature\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /// @notice Approve of a specific token ID for spending by spender via signature\n    /// @param spender The account that is being approved\n    /// @param tokenId The ID of the token that is being approved for spending\n    /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n    function permit(\n        address spender,\n        uint256 tokenId,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external payable;\n}\n"
    },
    "contracts/L2/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\n\nimport './IPoolInitializer.sol';\nimport './IERC721Permit.sol';\nimport './IPeripheryPayments.sol';\nimport './IPeripheryImmutableState.sol';\nimport '../libraries/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n    IPoolInitializer,\n    IPeripheryPayments,\n    IPeripheryImmutableState,\n    IERC721Metadata,\n    IERC721Enumerable,\n    IERC721Permit\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/L2/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n    /// @return Returns the address of the Uniswap V3 factory\n    function factory() external view returns (address);\n\n    /// @return Returns the address of WETH9\n    function WETH9() external view returns (address);\n}\n"
    },
    "contracts/L2/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n    /// @param recipient The address receiving ETH\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n    /// that use ether for the input amount\n    function refundETH() external payable;\n\n    /// @notice Transfers the full amount of a token held by this contract to recipient\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n    /// @param token The contract address of the token which will be transferred to `recipient`\n    /// @param amountMinimum The minimum amount of token required for a transfer\n    /// @param recipient The destination address of the token\n    function sweepToken(\n        address token,\n        uint256 amountMinimum,\n        address recipient\n    ) external payable;\n}\n"
    },
    "contracts/L2/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n    /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n    /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n    /// @param token0 The contract address of token0 of the pool\n    /// @param token1 The contract address of token1 of the pool\n    /// @param fee The fee amount of the v3 pool for the specified token pair\n    /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n    /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n"
    },
    "contracts/L2/L2ProjectManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\nimport \"../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../common/AccessibleCommon.sol\";\nimport \"./L2ProjectManagerStorage.sol\";\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\nimport \"../libraries/LibProject.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ninterface IL2CrossDomainMessenger {\n    function xDomainMessageSender() external view returns (address);\n}\n\ninterface IL2CustomVaultBase {\n    function setVaultAdmin(\n        address l2Token,\n        address _newAdmin\n    ) external;\n\n    function isVaultAdmin(address l2Token, address account) external view returns (bool);\n}\n\ninterface IL2PublicSaleVault {\n    function vaultInitialize(\n        address l2Token,\n        LibProject.InitalParameterPublicSaleVault memory vaultParams,\n        LibProject.InitalParameterPublicSaleClaim memory claimParams\n    ) external;\n}\n\ninterface IL2InitialLiquidityVault {\n    function initialize(\n        address l2Token,\n        LibProject.InitalParameterInitialLiquidityVault memory params\n    ) external;\n}\n\ninterface IL2LiquidityRewardVault {\n    function initialize(\n        address l2Token,\n        LibProject.InitalParameterLiquidityRewardVault memory params\n    ) external;\n}\n\ninterface IL2ScheduleVault {\n    function initialize(\n        address l2Token,\n        string memory vaultName,\n        LibProject.InitalParameterScheduleVault memory params\n    ) external;\n}\n\ninterface IL2NonScheduleVault {\n    function initialize(\n        address l2Token,\n        string memory vaultName,\n        uint256 totalAllocatedAmount\n    ) external;\n}\n/**\n * @title L2ProjectManager\n * @dev\n */\ncontract L2ProjectManager is ProxyStorage, AccessibleCommon, L2ProjectManagerStorage {\n    using SafeERC20 for IERC20;\n\n    modifier onlyL2TokenFactory() {\n        require(l2TokenFactory != address(0) && msg.sender == l2TokenFactory, \"caller is not l2TokenFactory\");\n        _;\n    }\n\n    modifier onlyMessengerAndL1ProjectManager() {\n        require(msg.sender == l2CrossDomainMessenger &&\n        IL2CrossDomainMessenger(l2CrossDomainMessenger).xDomainMessageSender() == l1ProjectManager,\n        \"not onlyMessengerAndL1ProjectManager\");\n        _;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"Z1\");\n        _;\n    }\n\n    modifier nonZeroAddress(address account) {\n        require(account != address(0), \"Z2\");\n        _;\n    }\n\n    modifier ifFree {\n        require(free, \"lock\");\n        free = false;\n        _;\n        free = true;\n    }\n\n    event CreatedL2Project(address indexed l1Token, address indexed l2Token, address projectOwner, string projectName);\n    event DistributedL2Token(\n        address l1Token,\n        address l2Token,\n        uint256 projectId,\n        uint256 totalAmount\n        );\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor() {\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setupRole(ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== onlyOwner ========== */\n\n    /// @dev l1ProjectManager 주소 설정\n    function setL1ProjectManager(address _l1ProjectManager)\n        external nonZeroAddress(_l1ProjectManager) onlyOwner\n    {\n        require(l1ProjectManager != _l1ProjectManager, \"same\");\n        l1ProjectManager = _l1ProjectManager;\n    }\n\n    /// @dev l2TokenFactory 주소 설정\n    function setL2TokenFactory(address _l2TokenFactory)\n        external nonZeroAddress(_l2TokenFactory) onlyOwner\n    {\n        require(l2TokenFactory != _l2TokenFactory, \"same\");\n        l2TokenFactory = _l2TokenFactory;\n    }\n\n    /// @dev l2CrossDomainMessenger 주소 설정\n    function setL2CrossDomainMessenger(address _l2CrossDomainMessenger)\n        external nonZeroAddress(_l2CrossDomainMessenger) onlyOwner\n    {\n        require(l2CrossDomainMessenger != _l2CrossDomainMessenger, \"same\");\n        l2CrossDomainMessenger = _l2CrossDomainMessenger;\n    }\n\n    function setTokamakVaults(\n        address publicSale,\n        address initialLiquidity,\n        address liquidityReward,\n        address tonAirdrop,\n        address tosAirdrop,\n        address _scheduleVault,\n        address _nonScheduleVault\n        )\n        external onlyOwner\n        // nonZeroAddress(publicSale)\n        nonZeroAddress(initialLiquidity)\n        // nonZeroAddress(liquidityReward)\n        // nonZeroAddress(tosAirdrop)\n        // nonZeroAddress(tonAirdrop)\n        nonZeroAddress(_scheduleVault)\n        nonZeroAddress(_nonScheduleVault)\n    {\n        require(scheduleVault == address(0), \"already set\");\n        // require(\n        //     publicSaleVault != publicSale ||\n        //     initialLiquidityVault != initialLiquidity ||\n        //     liquidityRewardVault != liquidityReward ||\n        //     tonAirdropVault != tonAirdrop ||\n        //     tosAirdropVault != tosAirdrop\n        //     , \"same\");\n\n        publicSaleVault = publicSale;\n        initialLiquidityVault = initialLiquidity;\n        liquidityReward = liquidityReward;\n        tonAirdropVault = tonAirdrop;\n        tosAirdropVault = tosAirdrop;\n        scheduleVault = _scheduleVault;\n        nonScheduleVault = _nonScheduleVault;\n    }\n\n    /* ========== only L2TokenFactory ========== */\n\n    /// @dev 프로젝트 추가\n    function createL2Project(\n        address projectOwner,\n        address l1Token,\n        address l2Token,\n        string calldata projectName\n    )\n        external onlyL2TokenFactory\n    {\n        require(bytes(projectName).length != 0, \"projectName is null\");\n        require(projects[l2Token].l1Token == address(0), \"already added\");\n        projects[l2Token] = LibProject.L2ProjectInfo({\n            projectId: 0,\n            projectOwner: projectOwner,\n            l1Token : l1Token,\n            l2Token : l2Token,\n            projectName : projectName\n        });\n        tokenMaps[l1Token] = l2Token;\n        emit CreatedL2Project(l1Token, l2Token, projectOwner, projectName);\n    }\n\n    /* ========== only L2CrossDomainMessengerAndL1ProjectManager ========== */\n\n    function _approveVaults(address l2Token, address vault, uint256 amount) internal {\n        if (\n            vault != address(0) &&\n            amount != 0 &&\n            amount < IERC20(l2Token).allowance(address(this), vault)) IERC20(l2Token).approve(vault, amount);\n    }\n\n    function distributesL2Token(\n        address l1Token,\n        address l2Token,\n        uint256 projectId,\n        uint256 totalAmount,\n        LibProject.TokamakVaults memory tokamakVaults,\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\n    )\n        external onlyMessengerAndL1ProjectManager\n        nonZeroAddress(l1Token)\n        nonZeroAddress(l2Token)\n        nonZero(projectId) nonZero(totalAmount)\n    {\n        LibProject.L2ProjectInfo memory info = projects[l2Token];\n        require(info.l1Token == l1Token, \"not matched l1Token\");\n        require(info.l2Token == l2Token, \"not matched l2Token\");\n\n        uint256 publicTotal = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\n            + tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount;\n\n        uint256 total = publicTotal +\n            tokamakVaults.initialVaultParams.totalAllocatedAmount +\n            tokamakVaults.rewardParams.params.totalAllocatedAmount +\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount +\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\n\n        uint256 totalCustomSchedule = 0;\n        uint256 totalNonCustomSchedule = 0;\n\n        for (uint256 i = 0; i < customScheduleVaults.length; i++)\n            totalCustomSchedule += customScheduleVaults[i].params.totalAllocatedAmount;\n\n        for (uint256 j = 0; j < customNonScheduleVaults.length; j++)\n            totalNonCustomSchedule += customNonScheduleVaults[j].totalAllocatedAmount;\n\n        total += (totalCustomSchedule + totalNonCustomSchedule);\n\n        require(total == totalAmount, \"not matched totalAmount\");\n\n        projects[info.l2Token].projectId = projectId;\n        _approveVaults(l2Token, publicSaleVault, publicTotal);\n        _approveVaults(l2Token, initialLiquidityVault, tokamakVaults.initialVaultParams.totalAllocatedAmount);\n        _approveVaults(l2Token, liquidityRewardVault, tokamakVaults.rewardParams.params.totalAllocatedAmount);\n        _approveVaults(l2Token, tonAirdropVault, tokamakVaults.tonAirdropParams.totalAllocatedAmount);\n        _approveVaults(l2Token, tosAirdropVault, tokamakVaults.tosAirdropParams.totalAllocatedAmount);\n\n        if (publicTotal != 0) {\n            IL2CustomVaultBase(publicSaleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n            IL2PublicSaleVault(publicSaleVault).vaultInitialize(\n                info.l2Token,\n                tokamakVaults.publicSaleParams.vaultParams,\n                tokamakVaults.publicSaleParams.claimParams\n            );\n        }\n        LibProject.InitalParameterInitialLiquidityVault memory initialVaultParams = tokamakVaults.initialVaultParams;\n\n        if (tokamakVaults.initialVaultParams.totalAllocatedAmount != 0) {\n            IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(info.l2Token, info.projectOwner);\n            IL2InitialLiquidityVault(initialLiquidityVault).initialize(\n                info.l2Token,\n                initialVaultParams);\n        }\n\n        if (tokamakVaults.rewardParams.params.totalAllocatedAmount != 0) {\n            // // liquidity reward\n            // IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(l2Token, projects[l2Token].projectOwner);\n            // IL2LiquidityRewardVault(liquidityRewardVault).initialize(\n            //     l2Token,\n            //     tokamakVaults.rewardParams);\n        }\n\n        if (tokamakVaults.tosAirdropParams.totalAllocatedAmount != 0) {\n            //\n        }\n\n        if (tokamakVaults.tonAirdropParams.totalAllocatedAmount != 0) {\n            //\n        }\n\n        if (totalCustomSchedule != 0) {\n            if(!IL2CustomVaultBase(scheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\n                IL2CustomVaultBase(scheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n\n            for (uint256 i = 0; i < customScheduleVaults.length; i++){\n                LibProject.InitalParameterSchedule memory params = customScheduleVaults[i];\n                IL2ScheduleVault(initialLiquidityVault).initialize(\n                    info.l2Token,\n                    params.vaultName,\n                    params.params);\n            }\n\n        }\n\n        if (totalNonCustomSchedule != 0) {\n            if(!IL2CustomVaultBase(nonScheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\n                IL2CustomVaultBase(nonScheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n\n            for (uint256 i = 0; i < customNonScheduleVaults.length; i++){\n                LibProject.InitalParameterNonScheduleVault memory params = customNonScheduleVaults[i];\n                IL2NonScheduleVault(nonScheduleVault).initialize(\n                    info.l2Token,\n                    params.vaultName,\n                    params.totalAllocatedAmount );\n            }\n        }\n\n        emit DistributedL2Token(info.l1Token, info.l2Token, info.projectId, total);\n    }\n\n    /* ========== Anyone can execute ========== */\n\n    /* ========== VIEW ========== */\n\n    /* === ======= internal ========== */\n\n}"
    },
    "contracts/L2/L2ProjectManagerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../proxy/Proxy.sol\";\nimport \"./L2ProjectManagerStorage.sol\";\n\n/**\n * @title L2ProjectManagerProxy\n * @dev\n */\ncontract L2ProjectManagerProxy is Proxy, L2ProjectManagerStorage {\n\n}"
    },
    "contracts/L2/L2ProjectManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport { LibProject } from \"../libraries/LibProject.sol\";\n\n/**\n * @title L2ProjectManagerStorage\n * @dev\n */\ncontract L2ProjectManagerStorage {\n\n    bool internal free = true;\n    address public l1ProjectManager;\n    address public l2TokenFactory;\n    address public l2CrossDomainMessenger;\n\n    // 토큰별로 대표되는 볼트\n    address public publicSaleVault;\n    address public initialLiquidityVault;\n    address public liquidityRewardVault;\n    address public tonAirdropVault;\n    address public tosAirdropVault;\n\n    address public scheduleVault; // customScheduleVault\n    address public nonScheduleVault;    // customNonScheduleVault\n\n    // l2token - L2ProjectInfo\n    mapping(address => LibProject.L2ProjectInfo) public projects;\n\n    // l1token - l2token\n    mapping(address => address) public tokenMaps;\n\n}\n"
    },
    "contracts/L2/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // Handle division by zero\n        require(denominator > 0);\n\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            // require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        // 2022.0314.modified\n        //uint256 twos = -denominator & denominator;\n        //uint256 twos = denominator & (~denominator + 1);\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\n\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n\n        unchecked {\n            prod0 |= prod1 * twos;\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n\n            uint256 inv = (3 * denominator) ^ 2;\n\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n        }\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/L2/libraries/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.4;\n\nimport '../libraries/FullMath.sol';\nimport '../libraries/TickMath.sol';\n\ninterface IIIUniswapV3Pool {\n\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n\n}\n\n/// @title Oracle library\n/// @notice Provides functions to integrate with V3 pool oracle\nlibrary OracleLibrary {\n\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\n    /// @param pool Address of Uniswap V3 pool that we want to observe\n    /// @param period Number of seconds in the past to start calculating time-weighted average\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\n        require(period != 0, 'BP');\n\n        uint32[] memory secondAgos = new uint32[](2);\n        secondAgos[0] = period;\n        secondAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) = IIIUniswapV3Pool(pool).observe(secondAgos);\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n\n        timeWeightedAverageTick = int24(tickCumulativesDelta / int56( int32(period) ));\n\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56( int32(period) ) != 0)) timeWeightedAverageTick--;\n    }\n\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\n    /// @param tick Tick value used to calculate the quote\n    /// @param baseAmount Amount of token to be converted\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 baseAmount,\n        address baseToken,\n        address quoteToken\n    ) internal pure returns (uint256 quoteAmount) {\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\n\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\n        if (sqrtRatioX96 <= type(uint128).max) {\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\n        } else {\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\n            quoteAmount = baseToken < quoteToken\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\n        }\n    }\n}\n"
    },
    "contracts/L2/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\n    // DARIUS - POOL_INIT_CODE_HASH = 0xa598dd2fba360510c5a8f02f44423a4468e902df5857dbce3ca162a43a3a31ff;\n    // mainnet(default) - POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address( uint160(\n            uint256(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            ))\n        );\n    }\n}\n"
    },
    "contracts/L2/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.4;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/L2/vaults/L2CustomVaultBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { ProxyStorage } from \"../../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../../common/AccessibleCommon.sol\";\nimport { L2CustomVaultBaseStorage } from \"./L2CustomVaultBaseStorage.sol\";\n\nimport {IERC20} from \"../../interfaces/IERC20.sol\";\nimport \"../../libraries/SafeERC20.sol\";\n/**\n * @title L2CustomVaultBase\n * @dev\n */\ncontract L2CustomVaultBase is ProxyStorage, AccessibleCommon, L2CustomVaultBaseStorage {\n     using SafeERC20 for IERC20;\n\n    /* ========== DEPENDENCIES ========== */\n\n    event AllocatedTokenAndAdminInVault(address l2Token, address newAdmin, uint256 amount);\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /* ========== onlyOwner ========== */\n\n    function setL2ProjectManager(address _l2ProjectManager)\n        external nonZeroAddress(_l2ProjectManager) onlyOwner\n    {\n        require(l2ProjectManager != _l2ProjectManager, \"same\");\n        l2ProjectManager = _l2ProjectManager;\n    }\n\n    function setInitializer(address _initializer)\n        external nonZeroAddress(_initializer) onlyOwner\n    {\n        require(initializer != _initializer, \"same\");\n        initializer = _initializer;\n\n         emit SetInitializer(_initializer);\n    }\n\n    /* ========== only L2ProjectManager ========== */\n\n    function setVaultAdmin(\n        address l2Token,\n        address _newAdmin\n    )\n        external nonZeroAddress(l2Token) nonZeroAddress(_newAdmin) onlyL2ProjectManager\n    {\n        require(vaultAdminOfToken[l2Token] != _newAdmin, \"same\");\n        vaultAdminOfToken[l2Token] = _newAdmin;\n        emit SetVaultAdmin(l2Token, _newAdmin);\n    }\n\n    function allocateTokenAndAdmin(address l2Token, address _newAdmin, uint256 amount)\n        external  onlyL2ProjectManager\n        nonZeroAddress(l2Token)  nonZeroAddress(_newAdmin) nonZero(amount)\n    {\n        require(vaultAdminOfToken[l2Token] != _newAdmin, \"same admin\");\n        require(amount <= IERC20(l2Token).balanceOf(l2ProjectManager), \"balance is insufficient.\");\n\n        vaultAdminOfToken[l2Token] = _newAdmin;\n        IERC20(l2Token).safeTransferFrom(l2ProjectManager, address(this), amount);\n        emit AllocatedTokenAndAdminInVault(l2Token, _newAdmin, amount);\n    }\n\n    /* ========== only VaultAdmin Of Token ========== */\n\n    /* ========== Anyone can vault admin of token ========== */\n\n\n\n    /* ========== VIEW ========== */\n\n    function isVaultAdmin(address l2Token, address account) public view returns (bool) {\n        return (account != address(0) && vaultAdminOfToken[l2Token] == account);\n    }\n\n    /* === ======= internal ========== */\n\n}"
    },
    "contracts/L2/vaults/L2CustomVaultBaseStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title L2CustomVaultBaseStorage\n * @dev\n */\ncontract L2CustomVaultBaseStorage {\n\n    bool internal free = true;\n    address public l2ProjectManager;\n    address public initializer;\n\n    // l2token - tokenOwner\n    mapping(address => address) public vaultAdminOfToken;\n\n    event SetVaultAdmin(address l2Token, address newAdmin);\n    event SetInitializer(address newInitializer);\n\n    modifier onlyL2ProjectManager() {\n        require(l2ProjectManager != address(0) && msg.sender == l2ProjectManager, \"caller is not l2ProjectManager\");\n        _;\n    }\n\n    modifier onlyVaultAdminOfToken(address l2token) {\n        require(vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token], \"caller is not a vaultAdmin Of l2Token\");\n        _;\n    }\n\n    modifier onlyInitializerOrVaultAdmin(address l2token) {\n        require(vaultAdminOfToken[l2token] != address(0) &&\n            ( msg.sender == initializer || msg.sender == vaultAdminOfToken[l2token]),\n            \"caller is not a vaultAdmin Of l2Token\");\n        _;\n    }\n\n    modifier onlyL2ProjectManagerOrVaultAdmin(address l2token) {\n        require(msg.sender == l2ProjectManager ||\n            (vaultAdminOfToken[l2token] != address(0) || msg.sender == vaultAdminOfToken[l2token]),\n            \"caller is not a vaultAdmin or ProjectManager\");\n        _;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"Z1\");\n        _;\n    }\n\n    modifier nonZeroAddress(address account) {\n        require(account != address(0), \"Z2\");\n        _;\n    }\n\n    modifier ifFree {\n        require(free, \"lock\");\n        free = false;\n        _;\n        free = true;\n    }\n\n\n}"
    },
    "contracts/L2/vaults/L2InitialLiquidityVault.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport { ProxyStorage } from \"../../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../../common/AccessibleCommon.sol\";\nimport { L2CustomVaultBaseStorage } from \"./L2CustomVaultBaseStorage.sol\";\n\nimport \"./L2InitialLiquidityVaultStorage.sol\";\nimport \"../interfaces/INonfungiblePositionManager.sol\";\n\nimport '../../libraries/LibProject.sol';\nimport {IERC20} from \"../../interfaces/IERC20.sol\";\nimport \"../../libraries/SafeERC20.sol\";\n\nimport \"../libraries/TickMath.sol\";\nimport \"../libraries/OracleLibrary.sol\";\nimport '../libraries/FullMath.sol';\n\ninterface IIUniswapV3Factory {\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n}\n\ninterface IIUniswapV3Pool {\n\n    function initialize(uint160 sqrtPriceX96) external;\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n}\n\ncontract L2InitialLiquidityVault is\n    ProxyStorage, AccessibleCommon, L2CustomVaultBaseStorage, L2InitialLiquidityVaultStorage\n{\n    using SafeERC20 for IERC20;\n    /* ========== DEPENDENCIES ========== */\n\n    modifier afterSetUniswap() {\n        require(\n            uniswapV3Factory != address(0)\n            && nonfungiblePositionManager != address(0)\n            && tos != address(0)\n            ,\n            \"Vault: before setUniswap\");\n        _;\n    }\n\n    modifier readyToCreatePool(address l2Token) {\n        require(poolInfo[l2Token].boolReadyToCreatePool, \"Vault: not ready to CreatePool\");\n        _;\n    }\n\n    modifier beforeSetReadyToCreatePool(address l2Token) {\n        require(!poolInfo[l2Token].boolReadyToCreatePool, \"Vault: already ready to CreatePool\");\n        _;\n    }\n\n    event SetUniswapInfo(address _factory, address _npm, address _ton, address _tos);\n    event SetStartTime(address l2Token, uint32 startTime);\n    event SetPoolInitialized(address l2Token, address pool, uint160 inSqrtPriceX96);\n    event SetCreatedPool(address l2Token, address pool);\n    event InitializedInitialLiquidityVault(\n        address l2Token,\n        uint256 totalAllocatedAmount,\n        uint256 initialTosPrice,\n        uint256 initialTokenPrice,\n        uint32 startTime,\n        uint160 initSqrtPriceX96,\n        uint24 fee\n    );\n\n    event IncreasedLiquidityInVault(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n\n    event InitialMintedInVault(\n        address l2Token,\n        address pool,\n        uint256 tokenId,\n        uint128 liquidity,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /* ========== onlyOwner ========== */\n    function setUniswapInfo(address _poolfactory, address _npm, address _ton, address _tos)\n        external\n        onlyOwner nonZeroAddress(_poolfactory) nonZeroAddress(_npm) nonZeroAddress(_ton) nonZeroAddress(_tos)\n    {\n        require(_poolfactory != uniswapV3Factory ||  _npm != nonfungiblePositionManager ||\n             ton != _ton || tos != _tos, \"same\");\n\n        uniswapV3Factory = _poolfactory;\n        nonfungiblePositionManager = _npm;\n        ton = _ton;\n        tos = _tos;\n\n        emit SetUniswapInfo(_poolfactory, _npm, _ton, _tos);\n    }\n\n    function setAcceptTickChangeInterval(int24 _interval) external onlyOwner\n    {\n        require(_interval > 0, \"zero\");\n        require(acceptTickChangeInterval != _interval, \"same\");\n        acceptTickChangeInterval = _interval;\n    }\n\n    function setAcceptSlippagePrice(int24 _value) external onlyOwner\n    {\n        require(_value > 0, \"zero\");\n        require(acceptSlippagePrice != _value, \"same\");\n        acceptSlippagePrice = _value;\n    }\n\n    function setTWAP_PERIOD(uint32 value) external onlyOwner\n    {\n        require(value > 0, \"zero\");\n        require(TWAP_PERIOD != value, \"same\");\n        TWAP_PERIOD = value;\n    }\n\n\n    /* ========== only L2ProjectManager ========== */\n    function initialize(\n        address l2Token,\n        LibProject.InitalParameterInitialLiquidityVault memory params\n    )\n        external onlyL2ProjectManagerOrVaultAdmin(l2Token) afterSetUniswap\n    {\n        require(poolInfo[l2Token].totalAllocatedAmount == 0, \"already initialized\");\n        require(params.totalAllocatedAmount != 0 && params.tosPrice != 0 && params.tokenPrice != 0 && params.initSqrtPrice != 0 && params.fee != 0,\n            \"zero totalAllocatedAmount or tosPrice or tokenPrice or initSqrtPriceX96 or startTime\");\n        require(params.startTime > uint32(block.timestamp), \"StartTime has passed\");\n\n        IERC20(l2Token).safeTransferFrom(l2ProjectManager, address(this), params.totalAllocatedAmount);\n\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\n        info.totalAllocatedAmount = params.totalAllocatedAmount;\n        info.initialTosPrice = params.tosPrice;\n        info.initialTokenPrice = params.tokenPrice;\n        info.initSqrtPriceX96 = uint160(params.initSqrtPrice);\n        info.startTime = params.startTime;\n        info.fee = params.fee;\n\n        emit InitializedInitialLiquidityVault(\n            l2Token, params.totalAllocatedAmount, params.tosPrice, params.tokenPrice, params.startTime, uint160(params.initSqrtPrice), params.fee);\n    }\n\n    /* ========== only VaultAdmin Of Token ========== */\n    function setStartTime(address l2Token, uint32 _startTime)\n        public onlyVaultAdminOfToken(l2Token)\n    {\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\n        require(block.timestamp < info.startTime, \"StartTime has passed\");\n        require(info.startTime != _startTime, \"same StartTime\");\n        info.startTime = _startTime;\n        emit SetStartTime(l2Token, _startTime);\n    }\n\n    /* ========== Anyone can  ========== */\n\n    function setCreatePool(address l2Token) external beforeSetReadyToCreatePool(l2Token) ifFree\n    {\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\n        require(info.startTime > 0 && info.startTime < uint32(block.timestamp), \"StartTime has not passed.\");\n        require(info.pool == address(0), \"already created\");\n        require(info.initSqrtPriceX96 > 0, \"zero initSqrtPriceX96\");\n        address pool = IIUniswapV3Factory(uniswapV3Factory).getPool(tos, l2Token, info.fee);\n\n        if(pool == address(0)){\n            address _pool = IIUniswapV3Factory(uniswapV3Factory).createPool(tos, l2Token, info.fee);\n            require(_pool != address(0), \"createPool fail\");\n            pool = _pool;\n        }\n\n        info.pool = pool;\n        info.boolReadyToCreatePool = true;\n\n        (uint160 sqrtPriceX96,,,,,,) =  IIUniswapV3Pool(pool).slot0();\n        if(sqrtPriceX96 == 0){\n            IIUniswapV3Pool(pool).initialize(info.initSqrtPriceX96);\n            emit SetPoolInitialized(l2Token, pool, info.initSqrtPriceX96);\n        }\n        emit SetCreatedPool(l2Token, pool);\n\n        (uint160 _sqrtPriceX96,,,,,,) =  IIUniswapV3Pool(pool).slot0();\n        require(_sqrtPriceX96 != 0, 'zero _sqrtPriceX96');\n\n    }\n\n    function mint(address l2Token, uint256 tosAmount)\n        external readyToCreatePool(l2Token) nonZero(tosAmount) ifFree\n    {\n        uint256 tosBalance =  IERC20(tos).balanceOf(address(this));\n        uint256 tokenBalance =  IERC20(l2Token).balanceOf(address(this));\n        require(tosBalance > 1 ether && tokenBalance > 1 ether, \"balance is insufficient\");\n        require(tosAmount <= tosBalance, \"toBalance is insufficient\");\n\n        if (acceptTickChangeInterval == 0) acceptTickChangeInterval = 8;\n        if (acceptSlippagePrice == 0) acceptSlippagePrice = 10; // based 100\n        if (TWAP_PERIOD == 0) TWAP_PERIOD = 120;\n\n        LibInitialLiquidityVault.PoolInfo memory info = poolInfo[l2Token];\n        (uint160 sqrtPriceX96, int24 tick,,,,,) =  IIUniswapV3Pool(info.pool).slot0();\n        require(sqrtPriceX96 > 0, \"pool is not initialized\");\n\n        //if (lpToken > 0)\n        {\n            int24 timeWeightedAverageTick = OracleLibrary.consult(info.pool, TWAP_PERIOD);\n            require(\n                acceptMinTick(timeWeightedAverageTick, getTickSpacing(info.fee)) <= tick\n                && tick < acceptMaxTick(timeWeightedAverageTick, getTickSpacing(info.fee)),\n                \"It's not allowed changed tick range.\"\n            );\n        }\n\n        uint256 amount0Desired = 0;\n        uint256 amount1Desired = 0;\n        address token0 = IIUniswapV3Pool(info.pool).token0();\n\n        if(token0 != tos){\n            amount0Desired = getQuoteAtTick(\n                tick,\n                uint128(tosAmount),\n                tos,\n                l2Token\n                );\n            amount1Desired = tosAmount;\n            require(amount0Desired <= tokenBalance, \"tokenBalance is insufficient\");\n            checkBalance(l2Token, amount1Desired, amount0Desired);\n        } else {\n            amount0Desired = tosAmount;\n            amount1Desired = getQuoteAtTick(\n                tick,\n                uint128(tosAmount),\n                tos,\n                l2Token\n                );\n\n            require(amount1Desired <= tokenBalance, \"tokenBalance is insufficient\");\n            checkBalance(l2Token, amount0Desired, amount1Desired);\n        }\n\n        uint256 amount0Min = amount0Desired * (100 - uint256(int256(acceptSlippagePrice))) / 100;\n        uint256 amount1Min = amount1Desired * (100 - uint256(int256(acceptSlippagePrice))) / 100;\n\n        if(poolInfo[l2Token].lpToken == 0)  initialMint(l2Token, amount0Desired, amount1Desired, amount0Min, amount1Min);\n        else increaseLiquidity(l2Token, amount0Desired, amount1Desired, amount0Min, amount1Min);\n    }\n\n\n    /* ========== VIEW ========== */\n\n    function getTickSpacing(uint24 _fee) public pure returns (int24 tickSpacings)\n    {\n        if(_fee == 100) tickSpacings = 2;\n        else if(_fee == 500) tickSpacings = 10;\n        else if(_fee == 3000) tickSpacings = 60;\n        else if(_fee == 10000) tickSpacings = 200;\n    }\n\n    function acceptMinTick(int24 _tick, int24 _tickSpacings) public view returns (int24)\n    {\n        int24 _minTick = getMiniTick(_tickSpacings);\n        int24 _acceptMinTick = _tick - (_tickSpacings * int24(uint24(acceptTickChangeInterval)));\n\n        if(_minTick < _acceptMinTick) return _acceptMinTick;\n        else return _minTick;\n    }\n\n    function acceptMaxTick(int24 _tick, int24 _tickSpacings) public view returns (int24)\n    {\n        int24 _maxTick = getMaxTick(_tickSpacings);\n        int24 _acceptMinTick = _tick + (_tickSpacings * int24(uint24(acceptTickChangeInterval)));\n\n        if(_maxTick < _acceptMinTick) return _maxTick;\n        else return _acceptMinTick;\n    }\n\n    function getMiniTick(int24 tickSpacings) public pure returns (int24){\n           return (TickMath.MIN_TICK / tickSpacings) * tickSpacings ;\n    }\n\n    function getMaxTick(int24 tickSpacings) public pure  returns (int24){\n           return (TickMath.MAX_TICK / tickSpacings) * tickSpacings ;\n    }\n\n    function getQuoteAtTick(\n        int24 tick,\n        uint128 amountIn,\n        address baseToken,\n        address quoteToken\n    ) public pure returns (uint256 amountOut) {\n        return OracleLibrary.getQuoteAtTick(tick, amountIn, baseToken, quoteToken);\n    }\n\n    /* === ======= internal ========== */\n\n    function increaseLiquidity(address l2Token, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) internal\n    {\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\n        require(info.lpToken > 0, \"It is not minted yet\");\n\n        (uint128 liquidity, uint256 amount0, uint256 amount1) = INonfungiblePositionManager(nonfungiblePositionManager).increaseLiquidity(\n            INonfungiblePositionManager.IncreaseLiquidityParams(\n                info.lpToken, amount0Desired, amount1Desired, amount0Min, amount1Min, block.timestamp));\n\n        emit IncreasedLiquidityInVault(info.lpToken, liquidity, amount0, amount1);\n    }\n\n\n    function initialMint(address l2Token, uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) internal\n    {\n        LibInitialLiquidityVault.PoolInfo storage info = poolInfo[l2Token];\n\n        require(info.lpToken == 0, \"already minted\");\n        int24 tickLower = (TickMath.MIN_TICK / getTickSpacing(info.fee)) * getTickSpacing(info.fee) ;\n        int24 tickUpper = (TickMath.MAX_TICK / getTickSpacing(info.fee)) * getTickSpacing(info.fee) ;\n\n        (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        ) = INonfungiblePositionManager(nonfungiblePositionManager).mint(INonfungiblePositionManager.MintParams(\n                IIUniswapV3Pool(info.pool).token0(),\n                IIUniswapV3Pool(info.pool).token1(),\n                info.fee, tickLower, tickUpper,\n                amount0Desired, amount1Desired, amount0Min, amount1Min,\n                address(this), block.timestamp\n            )\n        );\n\n        require(tokenId > 0, \"zero tokenId\");\n\n        info.lpToken = tokenId;\n\n        emit InitialMintedInVault(l2Token, info.pool, tokenId, liquidity, amount0, amount1);\n    }\n\n\n    function checkBalance(address l2Token, uint256 tosBalance, uint256 tokenBalance) internal  {\n        require(IERC20(tos).balanceOf(address(this)) >= tosBalance, \"tos is insufficient.\");\n        require(IERC20(l2Token).balanceOf(address(this)) >= tokenBalance, \"token is insufficient.\");\n         if(tosBalance > IERC20(tos).allowance(address(this), nonfungiblePositionManager) ) {\n                require(IERC20(tos).approve(nonfungiblePositionManager, IERC20(tos).totalSupply()),\"TOS approve fail\");\n        }\n\n        if(tokenBalance > IERC20(l2Token).allowance(address(this), nonfungiblePositionManager) ) {\n            require(IERC20(l2Token).approve(nonfungiblePositionManager, IERC20(l2Token).totalSupply()),\"token approve fail\");\n        }\n    }\n\n    function viewVaultInfo(address l2Token) external view returns(LibInitialLiquidityVault.PoolInfo memory){\n\n        return poolInfo[l2Token];\n\n    }\n\n}\n"
    },
    "contracts/L2/vaults/L2InitialLiquidityVaultProxy.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"../../proxy/Proxy.sol\";\nimport { L2CustomVaultBaseStorage } from \"./L2CustomVaultBaseStorage.sol\";\nimport \"./L2InitialLiquidityVaultStorage.sol\";\n\ncontract L2InitialLiquidityVaultProxy is Proxy, L2CustomVaultBaseStorage, L2InitialLiquidityVaultStorage\n{\n\n}\n"
    },
    "contracts/L2/vaults/L2InitialLiquidityVaultStorage.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { LibInitialLiquidityVault } from \"../../libraries/LibInitialLiquidityVault.sol\";\n\ncontract L2InitialLiquidityVaultStorage {\n    uint256 constant INITIAL_PRICE_DIV = 1e18;\n\n    address public ton;  //  ton token\n    address public tos;  //  tos token\n\n    address public uniswapV3Factory;\n    address public nonfungiblePositionManager;\n    uint32 public TWAP_PERIOD;\n    // int24 public tickIntervalMinimum;\n    int24 public acceptTickChangeInterval;\n    int24 public acceptSlippagePrice;\n    int24 public tickSpacings ;\n\n    // l2token - PoolInfo\n    mapping(address => LibInitialLiquidityVault.PoolInfo) public poolInfo;\n\n}\n"
    },
    "contracts/L2/vaults/L2ScheduleVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./L2CustomVaultBase.sol\";\nimport \"./L2ScheduleVaultStorage.sol\";\n\nimport {IERC20} from \"../../interfaces/IERC20.sol\";\nimport \"../../libraries/SafeERC20.sol\";\nimport \"../../libraries/LibProject.sol\";\n\n/**\n * @title L2ScheduleVault\n * @dev Vaults that Vault Admins claim according to a schedule\n */\ncontract L2ScheduleVault is L2CustomVaultBase, L2ScheduleVaultStorage {\n    using SafeERC20 for IERC20;\n\n    event InitializedL2ScheduleVault(\n            address l2Token,\n            string name,\n            uint256 totalAllocatedAmount,\n            uint256 totalClaimCount,\n            uint256 firstClaimAmount,\n            uint32 firstClaimTime,\n            uint32 secondClaimTime,\n            uint32 roundInterval\n        );\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /* ========== onlyOwner ========== */\n\n\n    /* ========== only L2ProjectManager ========== */\n\n    function initialize(\n        address l2Token,\n        string memory vaultName,\n        LibProject.InitalParameterScheduleVault memory params\n    )\n        external onlyInitializerOrVaultAdmin(l2Token)\n    {\n        bytes32 nameKey = keccak256(bytes(vaultName));\n        require(vaultInfo[l2Token][nameKey].firstClaimTime == 0, \"already initialized\");\n        require(params.firstClaimTime > block.number, \"first claim time passed\");\n        require(params.totalAllocatedAmount != 0 && params.totalClaimCount != 0 && params.roundIntervalTime != 0, \"wrong value\");\n        if (params.totalClaimCount > 1) require(params.secondClaimTime > params.firstClaimTime, \"wrong the second claim time\");\n        require(params.totalAllocatedAmount > params.firstClaimAmount, \"wrong the first claim amount\");\n\n        IERC20(l2Token).safeTransferFrom(l2ProjectManager, address(this), params.totalAllocatedAmount);\n\n        LibScheduleVault.VaultInfo storage info = vaultInfo[l2Token][nameKey];\n        info.totalAllocatedAmount = params.totalAllocatedAmount;\n        info.totalClaimCount = params.totalClaimCount;\n        info.totalClaimedAmount = 0;\n        info.firstClaimAmount = params.firstClaimAmount;\n        info.firstClaimTime = params.firstClaimTime;\n        info.secondClaimTime = params.secondClaimTime;\n        info.roundInterval = params.roundIntervalTime;\n        info.latestClaimedRound = 0;\n\n        emit InitializedL2ScheduleVault(l2Token, vaultName, params.totalAllocatedAmount, params.totalClaimCount, params.firstClaimAmount, params.firstClaimTime, params.secondClaimTime, params.roundIntervalTime);\n    }\n\n    /* ========== Anyone can vault admin of token ========== */\n\n    function claim(address l2Token, string calldata vaultName)\n        external nonZeroAddress(l2Token) onlyVaultAdminOfToken(l2Token)\n    {\n        uint256 amount = availableClaimAmount(l2Token, vaultName);\n        require(amount <= IERC20(l2Token).balanceOf(address(this)), 'balance is insufficient');\n        IERC20(l2Token).safeTransfer(msg.sender, amount);\n\n        // emit Claimed(l2Token, msg.sender, amount);\n    }\n\n\n    /* ========== VIEW ========== */\n\n\n    function getCurrentRound(address l2Token, string calldata vaultName) public view returns (uint256 round){\n        bytes32 nameKey = keccak256(bytes(vaultName));\n        LibScheduleVault.VaultInfo memory info = vaultInfo[l2Token][nameKey];\n        if(info.firstClaimTime != 0 && info.firstClaimTime <= block.timestamp && block.timestamp < info.secondClaimTime) {\n            round = 1;\n        } else if(info.secondClaimTime <= block.timestamp) {\n            round = (block.timestamp - uint256(info.secondClaimTime)) / uint256(info.roundInterval) + 2;\n        }\n        if (round > info.totalClaimCount) round = info.totalClaimCount;\n    }\n\n    function availableClaimAmount(address l2Token, string calldata vaultName) public view returns (uint256 amount){\n        bytes32 nameKey = keccak256(bytes(vaultName));\n        LibScheduleVault.VaultInfo memory info = vaultInfo[l2Token][nameKey];\n        uint256 curRound = getCurrentRound(l2Token, vaultName);\n\n        if(info.latestClaimedRound < curRound) {\n            if (curRound == 1) {\n                amount = info.firstClaimAmount - info.totalClaimedAmount;\n            } else if (curRound < info.totalClaimCount) {\n                amount = (info.firstClaimAmount + ((info.totalAllocatedAmount - info.firstClaimAmount)/(info.totalClaimCount-1) * (curRound -1))) - info.totalClaimedAmount;\n            } else {\n                amount = info.totalAllocatedAmount - info.totalClaimedAmount;\n            }\n        }\n    }\n\n    /* === ======= internal ========== */\n\n}"
    },
    "contracts/L2/vaults/L2ScheduleVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport { LibScheduleVault } from \"../../libraries/LibScheduleVault.sol\";\n/**\n * @title L2ScheduleVaultStorage\n * @dev Vaults that Vault Admins claim according to a schedule\n */\ncontract L2ScheduleVaultStorage {\n\n    // l2token - keccak256 (vault name) - VaultInfo\n    mapping(address => mapping(bytes32 => LibScheduleVault.VaultInfo)) public vaultInfo;\n\n\n}"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity ^0.8.0;\n// pragma solidity >=0.5.0 <0.8.0;\n\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, 'slice_overflow');\n        require(_start + _length >= _start, 'slice_overflow');\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_start + 20 >= _start, 'toAddress_overflow');\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n        require(_start + 3 >= _start, 'toUint24_overflow');\n        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_start + 1 >= _start, 'toUint8_overflow');\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBool(bytes memory _bytes, uint256 _start) internal pure returns (bool) {\n        require(_start + 1 >= _start, 'toBool_overflow');\n        require(_bytes.length >= _start + 1, 'toBool_overflow');\n        bool tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_start + 2 >= _start, 'toUint16_overflow');\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_start + 4 >= _start, 'toUint32_overflow');\n        require(_bytes.length >= _start + 4, 'toUint32_outOfBounds');\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_start + 32 >= _start, 'toUint256_overflow');\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toInt256(bytes memory _bytes, uint256 _start) internal pure returns (int256) {\n        require(_start + 32 >= _start, 'toUint256_overflow');\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\n        int256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "contracts/libraries/LibInitialLiquidityVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title LibInitialLiquidityVault\n */\nlibrary LibInitialLiquidityVault {\n\n    struct PoolInfo {\n        address pool;\n        uint256 totalAllocatedAmount;\n        uint256 initialTosPrice;\n        uint256 initialTokenPrice;\n        uint256 lpToken;\n        uint32 startTime;\n        uint160 initSqrtPriceX96;\n        uint24  fee;\n        bool boolReadyToCreatePool;\n    }\n}"
    },
    "contracts/libraries/LibLockId.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title LibLockId\n */\nlibrary LibLockId {\n\n    // LockId의 포인트 정보\n    struct Point {\n        int256 slope;\n        int256 bias;\n        uint256 timestamp; // 등록(시작)시점\n    }\n\n    // LockId의 잔고\n    struct LockedInfo {\n        uint256 start;\n        uint256 end;\n        uint256 amount;\n        uint256 withdrawlTime;\n    }\n\n    // SyncInfo\n    struct SyncInfo {\n        int256 slope;\n        int256 bias;\n        uint32 timestamp; // point 정보에 있는 인덱스에 해당하는 timestamp\n        uint32 syncTime; // 동기화 시점\n    }\n\n    struct SyncPacket {\n        uint256 lockId;\n        SyncInfo packet;\n    }\n\n    struct UnlimitedAmount {\n        uint32 timestamp;\n        uint256 amount;\n    }\n\n}"
    },
    "contracts/libraries/LibLockTOS.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary LibLockTOS {\n    struct Point {\n        int256 bias;\n        int256 slope;\n        uint256 timestamp;\n    }\n\n    struct LockedBalance {\n        uint256 start;\n        uint256 end;\n        uint256 amount;\n        bool withdrawn;\n    }\n\n    struct SlopeChange {\n        int256 bias;\n        int256 slope;\n        uint256 changeTime;\n    }\n\n    struct LockedBalanceInfo {\n        uint256 id;\n        uint256 start;\n        uint256 end;\n        uint256 amount;\n        uint256 balance;\n    }\n}\n"
    },
    "contracts/libraries/LibProject.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface AddressManagerI {\n    function getAddress(string memory _name) external view returns (address);\n}\n\n/**\n * @title LibProject\n */\nlibrary LibProject {\n\n    enum TOKEN_TYPE {\n        ERC20_A,\n        ERC20_B,\n        ERC20_C,\n        ERC20_D,\n        NONE\n    }\n\n    enum L2_TYPE {\n        TOKAMAL_OPTIMISM,\n        TOKAMAL_ZKEVM,\n        NONE\n    }\n\n    struct ProjectInfo {\n        address projectOwner;\n        address tokenOwner;\n        address l1Token;\n        address l2Token;\n        address addressManager;\n        uint256 initialTotalSupply;\n        uint8 tokenType;\n        uint8 l2Type;\n        string projectName;\n    }\n\n    struct L2Info {\n        address l2TokenFactory;\n        address l2ProjectManager;\n        uint32 depositMinGasLimit;\n        uint32 sendMsgMinGasLimit;\n    }\n\n    struct L2ProjectInfo {\n        uint256 projectId;\n        address projectOwner;\n        address l1Token;\n        address l2Token;\n        string projectName;\n    }\n\n    struct TokamakVaults {\n        InitalParameterPublicSale publicSaleParams;\n        InitalParameterInitialLiquidityVault initialVaultParams;\n        InitalParameterLiquidityRewardVault rewardParams;\n        InitalParameterScheduleVault tosAirdropParams;\n        InitalParameterScheduleVault tonAirdropParams;\n    }\n\n    struct InitalParameterPublicSale {\n        InitalParameterPublicSaleVault vaultParams;\n        InitalParameterPublicSaleClaim claimParams;\n    }\n\n    struct InitalParameterPublicSaleVault {\n        uint256 stosTier1;\n        uint256 stosTier2;\n        uint256 stosTier3;\n        uint256 stosTier4;\n        uint256 tier1Percents;\n        uint256 tier2Percents;\n        uint256 tier3Percents;\n        uint256 tier4Percents;\n        uint256 total1roundSaleAmount;\n        uint256 total2roundSaleAmount;\n        uint256 saleTokenPrice;\n        uint256 payTokenPrice;\n        uint256 hardcapAmount;\n        uint256 changeTOSPercent;\n        uint256 startWhiteTime;\n        uint256 endWhiteTime;\n        uint256 start1roundTime;\n        uint256 end1roundTime;\n        uint256 snapshotTime;\n        uint256 start2roundTime;\n        uint256 end2roundTime;\n        uint256 claimCounts;\n    }\n\n    struct InitalParameterPublicSaleClaim {\n        uint256[] claimTimes;\n        uint256[] claimPercents;\n    }\n\n    struct InitalParameterInitialLiquidityVault {\n        uint256 totalAllocatedAmount;\n        uint256 tosPrice;\n        uint256 tokenPrice;\n        uint256 initSqrtPrice;\n        uint32 startTime;\n        uint16 fee;\n    }\n\n    struct InitalParameterLiquidityRewardVault {\n        address poolAddress;\n        InitalParameterScheduleVault params;\n    }\n\n    struct InitalParameterSchedule {\n        string vaultName;\n        InitalParameterScheduleVault params;\n    }\n\n    struct InitalParameterScheduleVault {\n        uint256 totalAllocatedAmount;\n        uint256 totalClaimCount;\n        uint256 firstClaimAmount;\n        uint32 firstClaimTime;\n        uint32 secondClaimTime;\n        uint32 roundIntervalTime;\n    }\n\n    struct InitalParameterNonScheduleVault {\n        string vaultName;\n        uint256 totalAllocatedAmount;\n    }\n\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\n        if (addressManager == address(0)) return address(0);\n        try\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\n                _address = a;\n        } catch (bytes memory ) {\n            _address = address(0);\n        }\n    }\n\n    function getL1Bridge(address addressManager) external view returns(address _address) {\n        if (addressManager == address(0)) return address(0);\n        try\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\n                _address = a;\n        } catch (bytes memory ) {\n            _address = address(0);\n        }\n    }\n\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\n    public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        // if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\n        //     +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\n        //     tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.rewardParams.params.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\n        // ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.tokenPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.startTime == 0 ||\n        //     tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.rewardParams.poolAddress == address(0) ||\n        //     tokamakVaults.rewardParams.params.totalClaimCount == 0 ||\n        //     tokamakVaults.rewardParams.params.firstClaimAmount == 0 ||\n        //     tokamakVaults.rewardParams.params.firstClaimTime == 0 ||\n        //     tokamakVaults.rewardParams.params.secondClaimTime == 0 ||\n        //     tokamakVaults.rewardParams.params.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\n        //     tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\n        //     tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\n        //     tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\n        //     tokamakVaults.tosAirdropParams.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\n        //     tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\n        //     tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\n        //     tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\n        //     tokamakVaults.tonAirdropParams.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\n                    tokamakVaults.rewardParams.params.totalAllocatedAmount +\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\n\n        if (totalAmount == 0) return (boolValidate, totalAmount);\n\n        boolValidate = true;\n    }\n\n    function validateScheduleVault(\n        InitalParameterSchedule[] memory customs\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        if (customs.length != 0) {\n            for(uint256 i = 0; i < customs.length; i++){\n                if (customs[i].params.totalAllocatedAmount == 0 ||\n                    customs[i].params.totalClaimCount == 0 ||\n                    customs[i].params.firstClaimAmount == 0 ||\n                    customs[i].params.firstClaimTime == 0 ||\n                    customs[i].params.secondClaimTime == 0 ||\n                    customs[i].params.roundIntervalTime == 0\n                    ) return (boolValidate, totalAmount);\n\n                totalAmount += customs[i].params.totalAllocatedAmount;\n            }\n            boolValidate = true;\n        }\n    }\n\n    function validateNonScheduleVault(\n        InitalParameterNonScheduleVault[] memory customs\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        if (customs.length != 0) {\n            for(uint256 i =0 ; i < customs.length; i++){\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\n                totalAmount += customs[i].totalAllocatedAmount;\n            }\n            boolValidate = true;\n        }\n    }\n\n}\n"
    },
    "contracts/libraries/LibScheduleVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * @title LibScheduleVault\n */\nlibrary LibScheduleVault {\n\n    struct VaultInfo {\n        uint256 totalAllocatedAmount;   // Token allocation amount\n        uint256 totalClaimCount;        // total number of claims\n        uint256 totalClaimedAmount;     // Total amount claimed\n        uint256 firstClaimAmount;       // first claim amount\n        uint32 firstClaimTime;          // first claim time\n        uint32 secondClaimTime;         // second claim time\n        uint32 roundInterval;    // round interval (seconds)\n        uint32 latestClaimedRound;      // the latest claimed round\n    }\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/proxy/Proxy.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\nimport \"./ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../common/AccessibleCommon.sol\";\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/IProxyEvent.sol\";\nimport \"../interfaces/IProxyAction.sol\";\n// import \"hardhat/console.sol\";\n\ncontract Proxy is ProxyStorage, AccessibleCommon, IProxyEvent, IProxyAction\n{\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor () {\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setupRole(ADMIN_ROLE, msg.sender);\n    }\n\n\n    /* ========== onlyOwner ========== */\n\n    /// @inheritdoc IProxyAction\n    function setProxyPause(bool _pause) external onlyOwner {\n        pauseProxy = _pause;\n    }\n\n    /// @notice Set implementation contract\n    /// @param impl New implementation contract address\n    function upgradeTo(address impl) external onlyOwner {\n        require(impl != address(0), \"input is zero\");\n        require(\n            _implementation2(0) != impl,\n            \"same addr\"\n        );\n        _setImplementation2(impl, 0, true);\n        emit Upgraded(impl);\n    }\n\n\n    /// @inheritdoc IProxyAction\n    function setImplementation2(\n        address newImplementation,\n        uint256 _index,\n        bool _alive\n    ) external override onlyOwner {\n        _setImplementation2(newImplementation, _index, _alive);\n    }\n\n    /// @inheritdoc IProxyAction\n    function setAliveImplementation2(address newImplementation, bool _alive)\n        public override onlyOwner\n    {\n        _setAliveImplementation2(newImplementation, _alive);\n    }\n\n    /// @inheritdoc IProxyAction\n    function setSelectorImplementations2(\n        bytes4[] calldata _selectors,\n        address _imp\n    ) public override onlyOwner {\n        require(\n            _selectors.length > 0,\n            \"Proxy: _selectors's size is zero\"\n        );\n        require(aliveImplementation[_imp], \"Proxy: _imp is not alive\");\n\n        for (uint256 i = 0; i < _selectors.length; i++) {\n            require(\n                selectorImplementation[_selectors[i]] != _imp,\n                \"LiquidityVaultProxy: same imp\"\n            );\n            selectorImplementation[_selectors[i]] = _imp;\n            emit SetSelectorImplementation(_selectors[i], _imp);\n        }\n    }\n\n    /* ========== Anyone can   ========== */\n\n\n\n    /* ========== VIEW ========== */\n\n    /// @dev returns the implementation\n    function implementation() external view returns (address) {\n        return _implementation2(0);\n    }\n\n    /// @inheritdoc IProxyAction\n    function implementation2(uint256 _index) external override view returns (address) {\n        return _implementation2(_index);\n    }\n\n\n    /// @inheritdoc IProxyAction\n    function getSelectorImplementation2(bytes4 _selector)\n        public override\n        view\n        returns (address impl)\n    {\n        if (selectorImplementation[_selector] == address(0))\n            return proxyImplementation[0];\n        else if (aliveImplementation[selectorImplementation[_selector]]){\n            return selectorImplementation[_selector];\n        }\n        else return proxyImplementation[0];\n    }\n\n\n    /// @dev receive ether\n    receive() external payable {\n        revert(\"cannot receive Ether\");\n    }\n\n    /// @dev fallback function , execute on undefined function call\n    fallback() external payable {\n        _fallback();\n    }\n\n    /* === ======= internal ========== */\n\n    /// @dev view implementation address of the proxy[index]\n    /// @param _index index of proxy\n    /// @return impl address of the implementation\n    function _implementation2(uint256 _index)\n        internal\n        view\n        returns (address impl)\n    {\n        return proxyImplementation[_index];\n    }\n\n    /// @dev fallback function , execute on undefined function call\n    function _fallback() internal {\n        address _impl = getSelectorImplementation2(msg.sig);\n\n        require(\n            _impl != address(0) && !pauseProxy,\n            \"Proxy: impl OR proxy is false\"\n        );\n\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), _impl, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n                // delegatecall returns 0 on error.\n                case 0 {\n                    revert(0, returndatasize())\n                }\n                default {\n                    return(0, returndatasize())\n                }\n        }\n    }\n\n    /// @dev set the implementation address and status of the proxy[index]\n    /// @param newImplementation Address of the new implementation.\n    /// @param _index index of proxy\n    /// @param _alive alive status\n    function _setImplementation2(\n        address newImplementation,\n        uint256 _index,\n        bool _alive\n    ) internal {\n        require(\n            Address.isContract(newImplementation),\n            \"Proxy: not contract address\"\n        );\n        if (_alive) proxyImplementation[_index] = newImplementation;\n        _setAliveImplementation2(newImplementation, _alive);\n    }\n\n    /// @dev set alive status of implementation\n    /// @param newImplementation Address of the new implementation.\n    /// @param _alive alive status\n    function _setAliveImplementation2(address newImplementation, bool _alive)\n        internal\n    {\n        aliveImplementation[newImplementation] = _alive;\n        emit SetAliveImplementation(newImplementation, _alive);\n    }\n\n}"
    },
    "contracts/proxy/ProxyStorage.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage  {\n\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"
    },
    "contracts/proxy/ProxyStorage2.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage2  {\n\n    address public _owner;\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 625
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}