{
  "address": "0xed21a99c8b7D1f8c3114110EC886126eA80e7CDF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "CreatedL2Project",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributedL2Token",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "scheduleVaultNames",
          "type": "string[]"
        }
      ],
      "name": "availableClaimAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "scheduleVaultNames",
          "type": "string[]"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "createL2Project",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "distributesL2Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundInterval",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "receiveAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "secondClaimTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "roundIntervalTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterVestingFundVault",
                  "name": "vestingParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardTonTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token0",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "token1",
                      "type": "address"
                    },
                    {
                      "internalType": "uint24",
                      "name": "fee",
                      "type": "uint24"
                    }
                  ],
                  "internalType": "struct LibPool.PoolInfo",
                  "name": "poolParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardProjectTosPoolParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "distributesL2TokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLiquidityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2CrossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2TokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRewardVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonScheduleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scheduleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1ProjectManager",
          "type": "address"
        }
      ],
      "name": "setL1ProjectManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2TokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2CrossDomainMessenger",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Wton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2tos",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "setL2Addresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2CrossDomainMessenger",
          "type": "address"
        }
      ],
      "name": "setL2CrossDomainMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2TokenFactory",
          "type": "address"
        }
      ],
      "name": "setL2TokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "publicSale",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialLiquidity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tonAirdrop",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tosAirdrop",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_scheduleVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nonScheduleVault",
          "type": "address"
        }
      ],
      "name": "setTokamakVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMaps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tonAirdropVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tosAirdropVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2token",
          "type": "address"
        }
      ],
      "name": "viewProject",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "projectOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l1Token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            }
          ],
          "internalType": "struct LibProject.L2ProjectInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd2aa2f24ba7fd9b86f975570f51d664878d312db68498b7438db816f3957c52a",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0xed21a99c8b7D1f8c3114110EC886126eA80e7CDF",
    "transactionIndex": 1,
    "gasUsed": "4411553",
    "logsBloom": "0x00000004000000000800000000000000080000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000400000088000000800000000000000000000000008000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000001000000000000000000000000000000000000000000000000000000000000100000000000020000000000000000000000000000010000000000000000000000000020000000000",
    "blockHash": "0x231a40ed466842b8aaf3b5336ef69be9ebdc0a8e4ae21a6467efd6c682007732",
    "transactionHash": "0xd2aa2f24ba7fd9b86f975570f51d664878d312db68498b7438db816f3957c52a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 72526,
        "transactionHash": "0xd2aa2f24ba7fd9b86f975570f51d664878d312db68498b7438db816f3957c52a",
        "address": "0xed21a99c8b7D1f8c3114110EC886126eA80e7CDF",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x231a40ed466842b8aaf3b5336ef69be9ebdc0a8e4ae21a6467efd6c682007732"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 72526,
        "transactionHash": "0xd2aa2f24ba7fd9b86f975570f51d664878d312db68498b7438db816f3957c52a",
        "address": "0xed21a99c8b7D1f8c3114110EC886126eA80e7CDF",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x231a40ed466842b8aaf3b5336ef69be9ebdc0a8e4ae21a6467efd6c682007732"
      }
    ],
    "blockNumber": 72526,
    "cumulativeGasUsed": "4464042",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8a43d4b9f8c9edfee8826102ce6f8368",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"CreatedL2Project\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"DistributedL2Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"scheduleVaultNames\",\"type\":\"string[]\"}],\"name\":\"availableClaimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"scheduleVaultNames\",\"type\":\"string[]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"createL2Project\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"distributesL2Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"vestingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardTonTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibPool.PoolInfo\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardProjectTosPoolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"distributesL2TokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2CrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRewardVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonScheduleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1ProjectManager\",\"type\":\"address\"}],\"name\":\"setL1ProjectManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2TokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2CrossDomainMessenger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Wton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2tos\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"setL2Addresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2CrossDomainMessenger\",\"type\":\"address\"}],\"name\":\"setL2CrossDomainMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2TokenFactory\",\"type\":\"address\"}],\"name\":\"setL2TokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"publicSale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tonAirdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tosAirdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonScheduleVault\",\"type\":\"address\"}],\"name\":\"setTokamakVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tonAirdropVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tosAirdropVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2token\",\"type\":\"address\"}],\"name\":\"viewProject\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"internalType\":\"struct LibProject.L2ProjectInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"createL2Project(address,address,address,string)\":{\"details\":\"\\ud504\\ub85c\\uc81d\\ud2b8 \\ucd94\\uac00\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setL1ProjectManager(address)\":{\"details\":\"l1ProjectManager \\uc8fc\\uc18c \\uc124\\uc815\"},\"setL2CrossDomainMessenger(address)\":{\"details\":\"l2CrossDomainMessenger \\uc8fc\\uc18c \\uc124\\uc815\"},\"setL2TokenFactory(address)\":{\"details\":\"l2TokenFactory \\uc8fc\\uc18c \\uc124\\uc815\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"title\":\"L2ProjectManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/L2ProjectManager.sol\":\"L2ProjectManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/L2ProjectManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\nimport \\\"./L2ProjectManagerStorage.sol\\\";\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/LibProject.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IL2CrossDomainMessenger {\\n    function xDomainMessageSender() external view returns (address);\\n}\\n\\ninterface IL2CustomVaultBase {\\n    function setVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    ) external;\\n\\n    function isVaultAdmin(address l2Token, address account) external view returns (bool);\\n    function l2ProjectManager() external view returns (address);\\n}\\n\\ninterface IL2PublicSaleVault {\\n    function vaultInitialize(\\n        address l2Token,\\n        LibProject.InitalParameterPublicSaleVault memory vaultParams,\\n        LibProject.InitalParameterPublicSaleClaim memory claimParams,\\n        LibProject.InitalParameterVestingFundVault memory vestingParams\\n    ) external;\\n}\\n\\ninterface IL2InitialLiquidityVault {\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterInitialLiquidityVault memory params\\n    ) external;\\n}\\n\\ninterface IL2LiquidityRewardVault {\\n    function initialize(\\n        address l2Token,\\n        LibPool.PoolInfo memory poolParams,\\n        LibProject.InitalParameterScheduleVault memory params\\n    ) external;\\n    function claim(address l2Token, address pool) external  ;\\n    function getPoolAddress(address token0, address token1, uint24 _fee) external view returns(address) ;\\n    function availableClaimAmount(address l2Token, address pool) external view returns (uint256 amount);\\n\\n}\\n\\ninterface IL2ScheduleVault {\\n    function initialize(\\n        address l2Token,\\n        string memory vaultName,\\n        LibProject.InitalParameterScheduleVault memory params\\n    ) external;\\n\\n    function claim(address l2Token, string calldata vaultName) external ;\\n    function availableClaimAmount(address l2Token, string calldata vaultName) external view returns (uint256 amount);\\n\\n}\\n\\ninterface IL2NonScheduleVault {\\n    function initialize(\\n        address l2Token,\\n        string memory vaultName,\\n        address claimer,\\n        uint256 totalAllocatedAmount\\n    ) external;\\n}\\n\\ninterface IL2AirdropVault {\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterScheduleVault memory params\\n    ) external;\\n\\n    function availableClaimAmount(address l2Token) external view returns (uint256 amount);\\n     function claim(address l2Token) external ;\\n}\\n\\n\\ninterface IVault {\\n    function setVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    )\\n        external;\\n}\\n\\n/**\\n * @title L2ProjectManager\\n * @dev\\n */\\ncontract L2ProjectManager is ProxyStorage, AccessibleCommon, L2ProjectManagerStorage {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyL2TokenFactory() {\\n        require(l2TokenFactory != address(0) && msg.sender == l2TokenFactory, \\\"caller is not l2TokenFactory\\\");\\n        _;\\n    }\\n\\n    modifier onlyMessengerAndL1ProjectManager() {\\n        require(msg.sender == l2CrossDomainMessenger &&\\n        IL2CrossDomainMessenger(l2CrossDomainMessenger).xDomainMessageSender() == l1ProjectManager,\\n        \\\"not onlyMessengerAndL1ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n    event CreatedL2Project(address indexed l1Token, address indexed l2Token, address projectOwner, string projectName);\\n    event DistributedL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount\\n        );\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor() {\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /* ========== onlyOwner ========== */\\n\\n    /// @dev l1ProjectManager \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL1ProjectManager(address _l1ProjectManager)\\n        external nonZeroAddress(_l1ProjectManager) onlyOwner\\n    {\\n        require(l1ProjectManager != _l1ProjectManager, \\\"same\\\");\\n        l1ProjectManager = _l1ProjectManager;\\n    }\\n\\n    function setL2Addresses(\\n        address _l2TokenFactory,\\n        address _l2CrossDomainMessenger,\\n        address _l2Wton,\\n        address _l2tos,\\n        uint24 _poolFee\\n        )\\n        external\\n        nonZeroAddress(_l2TokenFactory)\\n        nonZeroAddress(_l2CrossDomainMessenger)\\n        nonZeroAddress(_l2Wton)\\n        nonZeroAddress(_l2tos)\\n        onlyOwner\\n    {\\n        l2TokenFactory = _l2TokenFactory;\\n        l2CrossDomainMessenger = _l2CrossDomainMessenger;\\n        wton = _l2Wton;\\n        tos = _l2tos;\\n        poolFee = _poolFee;\\n    }\\n\\n    /// @dev l2TokenFactory \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL2TokenFactory(address _l2TokenFactory)\\n        external nonZeroAddress(_l2TokenFactory) onlyOwner\\n    {\\n        require(l2TokenFactory != _l2TokenFactory, \\\"same\\\");\\n        l2TokenFactory = _l2TokenFactory;\\n    }\\n\\n    /// @dev l2CrossDomainMessenger \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL2CrossDomainMessenger(address _l2CrossDomainMessenger)\\n        external nonZeroAddress(_l2CrossDomainMessenger) onlyOwner\\n    {\\n        require(l2CrossDomainMessenger != _l2CrossDomainMessenger, \\\"same\\\");\\n        l2CrossDomainMessenger = _l2CrossDomainMessenger;\\n    }\\n\\n    function setTokamakVaults(\\n        address publicSale,\\n        address initialLiquidity,\\n        address liquidityReward,\\n        address tonAirdrop,\\n        address tosAirdrop,\\n        address _scheduleVault,\\n        address _nonScheduleVault\\n        )\\n        external onlyOwner\\n        nonZeroAddress(publicSale)\\n        nonZeroAddress(initialLiquidity)\\n        nonZeroAddress(liquidityReward)\\n        nonZeroAddress(tosAirdrop)\\n        nonZeroAddress(tonAirdrop)\\n        nonZeroAddress(_scheduleVault)\\n        nonZeroAddress(_nonScheduleVault)\\n    {\\n        // require(scheduleVault == address(0), \\\"already set\\\");\\n        // require(\\n        //     publicSaleVault != publicSale ||\\n        //     initialLiquidityVault != initialLiquidity ||\\n        //     liquidityRewardVault != liquidityReward ||\\n        //     tonAirdropVault != tonAirdrop ||\\n        //     tosAirdropVault != tosAirdrop\\n        //     , \\\"same\\\");\\n\\n        publicSaleVault = publicSale;\\n        initialLiquidityVault = initialLiquidity;\\n        liquidityRewardVault = liquidityReward;\\n        tonAirdropVault = tonAirdrop;\\n        tosAirdropVault = tosAirdrop;\\n        scheduleVault = _scheduleVault;\\n        nonScheduleVault = _nonScheduleVault;\\n    }\\n\\n    /* ========== only L2TokenFactory ========== */\\n\\n    /// @dev \\ud504\\ub85c\\uc81d\\ud2b8 \\ucd94\\uac00\\n    function createL2Project(\\n        address projectOwner,\\n        address l1Token,\\n        address l2Token,\\n        string calldata projectName\\n    )\\n        external onlyL2TokenFactory\\n    {\\n        require(bytes(projectName).length != 0, \\\"projectName is null\\\");\\n        require(projects[l2Token].l1Token == address(0), \\\"already added\\\");\\n        projects[l2Token] = LibProject.L2ProjectInfo({\\n            projectId: 0,\\n            projectOwner: projectOwner,\\n            l1Token : l1Token,\\n            l2Token : l2Token,\\n            projectName : projectName\\n        });\\n        tokenMaps[l1Token] = l2Token;\\n        emit CreatedL2Project(l1Token, l2Token, projectOwner, projectName);\\n    }\\n\\n    /* ========== only L2CrossDomainMessengerAndL1ProjectManager ========== */\\n\\n    function _approveVaults(address l2Token, address vault, uint256 amount) internal {\\n\\n        // uint256 allowance = IERC20(l2Token).allowance(address(this), vault);\\n\\n        if (vault != address(0) && amount != 0 &&   IERC20(l2Token).allowance(address(this), vault) < amount) {\\n\\n            IERC20(l2Token).approve(vault, amount);\\n        }\\n    }\\n\\n    function distributesL2TokenOwner(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external\\n        nonZeroAddress(l1Token)\\n        nonZeroAddress(l2Token)\\n        nonZero(projectId) nonZero(totalAmount)\\n    {\\n        require(projects[l2Token].projectOwner == msg.sender, \\\"not projectOwner\\\");\\n\\n        _distributesL2Token(\\n            l1Token, l2Token, projectId, totalAmount,\\n            tokamakVaults, customScheduleVaults, customNonScheduleVaults\\n        );\\n    }\\n\\n    function distributesL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external onlyMessengerAndL1ProjectManager\\n        nonZeroAddress(l1Token)\\n        nonZeroAddress(l2Token)\\n        nonZero(projectId) nonZero(totalAmount)\\n    {\\n        _distributesL2Token(\\n            l1Token, l2Token, projectId, totalAmount,\\n            tokamakVaults, customScheduleVaults, customNonScheduleVaults\\n        );\\n    }\\n\\n    function claimAll(\\n        address l2Token,\\n        string[] memory scheduleVaultNames\\n    )\\n        external nonZeroAddress(l2Token)\\n    {\\n        address poolTosL2Token = IL2LiquidityRewardVault(liquidityRewardVault).getPoolAddress(tos, l2Token, poolFee);\\n        address poolWtonTos = IL2LiquidityRewardVault(liquidityRewardVault).getPoolAddress(wton, tos, poolFee);\\n\\n        // tos-l2token rewardProjectTosPoolParams\\n        if (poolTosL2Token != address(0) && IL2LiquidityRewardVault(liquidityRewardVault).availableClaimAmount(l2Token, poolTosL2Token) != 0 ){\\n            IL2LiquidityRewardVault(liquidityRewardVault).claim(l2Token, poolTosL2Token);\\n        }\\n\\n        // wton-tos  rewardTonTosPoolParams\\n        if (poolWtonTos != address(0) && IL2LiquidityRewardVault(liquidityRewardVault).availableClaimAmount(l2Token, poolWtonTos)  != 0 ){\\n            IL2LiquidityRewardVault(liquidityRewardVault).claim(l2Token, poolWtonTos);\\n        }\\n\\n        // tosAirdropParams\\n        if (IL2AirdropVault(tosAirdropVault).availableClaimAmount(l2Token) != 0 ){\\n            IL2AirdropVault(tosAirdropVault).claim(l2Token);\\n        }\\n\\n        // tonAirdropParams\\n        if (IL2AirdropVault(tonAirdropVault).availableClaimAmount(l2Token) != 0 ){\\n            IL2AirdropVault(tonAirdropVault).claim(l2Token);\\n        }\\n\\n        // scheduleVaultNames\\n        if(scheduleVaultNames.length != 0) {\\n            for(uint256 i ; i < scheduleVaultNames.length ; i++) {\\n                if (IL2ScheduleVault(scheduleVault).availableClaimAmount(l2Token, scheduleVaultNames[i]) != 0 )\\n                    IL2ScheduleVault(scheduleVault).claim(l2Token, scheduleVaultNames[i]);\\n            }\\n        }\\n    }\\n\\n    function _distributesL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    ) internal {\\n        LibProject.L2ProjectInfo memory info = projects[l2Token];\\n\\n        require(info.l1Token == l1Token, \\\"not matched l1Token\\\");\\n        require(info.l2Token == l2Token, \\\"not matched l2Token\\\");\\n\\n        uint256 publicTotal = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            + tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount;\\n\\n        uint256 total = publicTotal +\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        uint256 totalCustomSchedule = 0;\\n        uint256 totalNonCustomSchedule = 0;\\n\\n        for (uint256 i = 0; i < customScheduleVaults.length; i++)\\n            totalCustomSchedule += customScheduleVaults[i].params.totalAllocatedAmount;\\n\\n        for (uint256 j = 0; j < customNonScheduleVaults.length; j++)\\n            totalNonCustomSchedule += customNonScheduleVaults[j].totalAllocatedAmount;\\n\\n        total += (totalCustomSchedule + totalNonCustomSchedule);\\n\\n        require(total == totalAmount, \\\"not matched totalAmount\\\");\\n        require(totalAmount <= IERC20(l2Token).balanceOf(address(this)), \\\"insufficient balance\\\");\\n\\n        projects[info.l2Token].projectId = projectId;\\n        _approveVaults(info.l2Token, publicSaleVault, publicTotal);\\n        _approveVaults(info.l2Token, initialLiquidityVault, tokamakVaults.initialVaultParams.totalAllocatedAmount);\\n        _approveVaults(info.l2Token, liquidityRewardVault,\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount + tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount );\\n        _approveVaults(info.l2Token, tonAirdropVault, tokamakVaults.tonAirdropParams.totalAllocatedAmount);\\n        _approveVaults(info.l2Token, tosAirdropVault, tokamakVaults.tosAirdropParams.totalAllocatedAmount);\\n\\n        if (publicTotal != 0) {\\n\\n            if(!IL2CustomVaultBase(publicSaleVault).isVaultAdmin(info.l2Token, info.projectOwner)) {\\n                IL2CustomVaultBase(publicSaleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n            }\\n            IL2PublicSaleVault(publicSaleVault).vaultInitialize(\\n                info.l2Token,\\n                tokamakVaults.publicSaleParams.vaultParams,\\n                tokamakVaults.publicSaleParams.claimParams,\\n                tokamakVaults.publicSaleParams.vestingParams\\n            );\\n        }\\n        if (tokamakVaults.initialVaultParams.totalAllocatedAmount != 0) {\\n\\n            if(!IL2CustomVaultBase(initialLiquidityVault).isVaultAdmin(info.l2Token, info.projectOwner)) IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            IL2InitialLiquidityVault(initialLiquidityVault).initialize(\\n                info.l2Token,\\n                tokamakVaults.initialVaultParams);\\n        }\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(liquidityRewardVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(liquidityRewardVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            LibProject.InitalParameterLiquidityRewardVault memory rewardParams = tokamakVaults.rewardTonTosPoolParams;\\n\\n            IL2LiquidityRewardVault(liquidityRewardVault).initialize(\\n                l2Token,\\n                rewardParams.poolParams,\\n                rewardParams.params);\\n        }\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(liquidityRewardVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(liquidityRewardVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            LibProject.InitalParameterLiquidityRewardVault memory rewardParams = tokamakVaults.rewardProjectTosPoolParams;\\n\\n            IL2LiquidityRewardVault(liquidityRewardVault).initialize(\\n                l2Token,\\n                rewardParams.poolParams,\\n                rewardParams.params);\\n        }\\n\\n        if (tokamakVaults.tosAirdropParams.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(tosAirdropVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(tosAirdropVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            IL2AirdropVault(tosAirdropVault).initialize(\\n                info.l2Token,\\n                tokamakVaults.tosAirdropParams);\\n        }\\n\\n        if (tokamakVaults.tonAirdropParams.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(tonAirdropVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(tonAirdropVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            IL2AirdropVault(tonAirdropVault).initialize(\\n                info.l2Token,\\n                tokamakVaults.tonAirdropParams);\\n        }\\n\\n        uint256 projectId_ = projectId;\\n        if (totalCustomSchedule != 0) {\\n            if(!IL2CustomVaultBase(scheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(scheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            for (uint256 i = 0; i < customScheduleVaults.length; i++){\\n                LibProject.InitalParameterSchedule memory params = customScheduleVaults[i];\\n\\n                _approveVaults(info.l2Token, scheduleVault, params.params.totalAllocatedAmount);\\n\\n                IL2ScheduleVault(scheduleVault).initialize(\\n                    info.l2Token,\\n                    params.vaultName,\\n                    params.params);\\n            }\\n        }\\n\\n        if (totalNonCustomSchedule != 0) {\\n            if(!IL2CustomVaultBase(nonScheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(nonScheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            for (uint256 i = 0; i < customNonScheduleVaults.length; i++){\\n                LibProject.InitalParameterNonScheduleVault memory params = customNonScheduleVaults[i];\\n                _approveVaults(info.l2Token, nonScheduleVault, params.totalAllocatedAmount);\\n\\n                IL2NonScheduleVault(nonScheduleVault).initialize(\\n                    info.l2Token,\\n                    params.vaultName,\\n                    params.claimer,\\n                    params.totalAllocatedAmount );\\n            }\\n        }\\n\\n        emit DistributedL2Token(info.l1Token, info.l2Token, projectId_, total);\\n    }\\n\\n    /* ========== Anyone can execute ========== */\\n\\n    /* ========== VIEW ========== */\\n\\n    function viewProject(address l2token) external view returns (LibProject.L2ProjectInfo memory) {\\n        return projects[l2token];\\n    }\\n\\n    function availableClaimAll(\\n        address l2Token,\\n        string[] memory scheduleVaultNames\\n    ) public view returns (bool) {\\n\\n        if (l2Token == address(0)) return false;\\n\\n        address poolTosL2Token = IL2LiquidityRewardVault(liquidityRewardVault).getPoolAddress(tos, l2Token, poolFee);\\n        address poolWtonTos = IL2LiquidityRewardVault(liquidityRewardVault).getPoolAddress(wton, tos, poolFee);\\n\\n        // tos-l2token rewardProjectTosPoolParams\\n        if (poolTosL2Token != address(0) && IL2LiquidityRewardVault(liquidityRewardVault).availableClaimAmount(l2Token, poolTosL2Token) != 0 )\\n            return true;\\n\\n        // wton-tos  rewardTonTosPoolParams\\n        if (poolWtonTos != address(0) && IL2LiquidityRewardVault(liquidityRewardVault).availableClaimAmount(l2Token, poolWtonTos)  != 0 )\\n            return true;\\n\\n        // tosAirdropParams\\n        if (IL2AirdropVault(tosAirdropVault).availableClaimAmount(l2Token) != 0 )\\n            return true;\\n\\n        // tonAirdropParams\\n        if (IL2AirdropVault(tonAirdropVault).availableClaimAmount(l2Token) != 0 )\\n            return true;\\n\\n        // scheduleVaultNames\\n        if(scheduleVaultNames.length != 0) {\\n            for(uint256 i ; i < scheduleVaultNames.length ; i++) {\\n                if (IL2ScheduleVault(scheduleVault).availableClaimAmount(l2Token, scheduleVaultNames[i]) != 0 )\\n                    return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n}\",\"keccak256\":\"0x2a6237ce60b0b290b38bc8ddbb83458d630ab1703eb3a43d8b5fc40077477169\",\"license\":\"MIT\"},\"contracts/L2/L2ProjectManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\n\\n/**\\n * @title L2ProjectManagerStorage\\n * @dev\\n */\\ncontract L2ProjectManagerStorage {\\n\\n    bool internal free = true;\\n    address public l1ProjectManager;\\n    address public l2TokenFactory;\\n    address public l2CrossDomainMessenger;\\n    address public tos;\\n    address public wton;\\n    uint24 public poolFee;\\n\\n    // \\ud1a0\\ud070\\ubcc4\\ub85c \\ub300\\ud45c\\ub418\\ub294 \\ubcfc\\ud2b8\\n    address public publicSaleVault;\\n    address public initialLiquidityVault;\\n    address public liquidityRewardVault;\\n    address public tonAirdropVault;\\n    address public tosAirdropVault;\\n\\n    address public scheduleVault; // customScheduleVault\\n    address public nonScheduleVault;    // customNonScheduleVault\\n\\n    // l2token - L2ProjectInfo\\n    mapping(address => LibProject.L2ProjectInfo) public projects;\\n\\n    // l1token - l2token\\n    mapping(address => address) public tokenMaps;\\n\\n}\\n\",\"keccak256\":\"0xdbdba14ff3fc04ab7efc584f93e2a3189566272987c6663505a8e87631c8a9e1\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/LibPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibPool {\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n}\",\"keccak256\":\"0x4f96e027ec71a0666159676b2426fbb90bd9de37076c03e225e533df8ff30ab5\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./LibPool.sol\\\";\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardTonTosPoolParams;\\n        InitalParameterLiquidityRewardVault rewardProjectTosPoolParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n        InitalParameterVestingFundVault vestingParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256 claimCounts;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundInterval;\\n    }\\n\\n    struct InitalParameterVestingFundVault {\\n        address receiveAddress;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundIntervalTime;\\n        uint24 fee;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        LibPool.PoolInfo poolParams;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    struct PublicSaleSet {\\n        uint8 minPercents;\\n        uint8 maxPercents;\\n        uint256 delayTime;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n            tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n            tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n            tokamakVaults.initialVaultParams.startTime == 0 ||\\n            tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime < tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime < tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime < tokamakVaults.tosAirdropParams.firstClaimTime ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime < tokamakVaults.tonAirdropParams.firstClaimTime\\n            )\\n            return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier1 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier2 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier3 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier4 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier1Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.payTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.changeTOSPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.startWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.snapshotTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.claimCounts == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.roundInterval == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.totalClaimCount == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.roundIntervalTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.fee == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.tier1Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents) != 10000\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) < (\\n                tokamakVaults.publicSaleParams.vaultParams.hardcapAmount *\\n                tokamakVaults.publicSaleParams.vaultParams.payTokenPrice /\\n                tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice\\n            )\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime < tokamakVaults.publicSaleParams.vaultParams.startWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime < tokamakVaults.publicSaleParams.vaultParams.endWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime < tokamakVaults.publicSaleParams.vaultParams.start1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime < tokamakVaults.publicSaleParams.vaultParams.end1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime < tokamakVaults.publicSaleParams.vaultParams.start2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime < tokamakVaults.publicSaleParams.vaultParams.end2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime < tokamakVaults.publicSaleParams.claimParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime < tokamakVaults.publicSaleParams.vestingParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0 ||\\n                    (customs[i].params.secondClaimTime < customs[i].params.firstClaimTime)\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x703396a30650c65636770ff0712ade52385643050c6d5f2738924c4a03b5bf53\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "createL2Project(address,address,address,string)": {
        "details": "프로젝트 추가"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setL1ProjectManager(address)": {
        "details": "l1ProjectManager 주소 설정"
      },
      "setL2CrossDomainMessenger(address)": {
        "details": "l2CrossDomainMessenger 주소 설정"
      },
      "setL2TokenFactory(address)": {
        "details": "l2TokenFactory 주소 설정"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "title": "L2ProjectManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17967,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17971,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 17975,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17979,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 7095,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7097,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l1ProjectManager",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 7099,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l2TokenFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7101,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l2CrossDomainMessenger",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 7103,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tos",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7105,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "wton",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 7107,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "poolFee",
        "offset": 20,
        "slot": "9",
        "type": "t_uint24"
      },
      {
        "astId": 7109,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "publicSaleVault",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 7111,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "initialLiquidityVault",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7113,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "liquidityRewardVault",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 7115,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tonAirdropVault",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 7117,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tosAirdropVault",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 7119,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "scheduleVault",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 7121,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "nonScheduleVault",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 7126,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "projects",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(L2ProjectInfo)15031_storage)"
      },
      {
        "astId": 7130,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tokenMaps",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(L2ProjectInfo)15031_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibProject.L2ProjectInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(L2ProjectInfo)15031_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(L2ProjectInfo)15031_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.L2ProjectInfo",
        "members": [
          {
            "astId": 15022,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15024,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15026,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "l1Token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 15028,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "l2Token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 15030,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectName",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}