{
  "address": "0x1B6fEc76b0760b620687008e998831C3A26128fA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "AddedWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "ExchangeSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExclusiveSaled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInitializer",
          "type": "address"
        }
      ],
      "name": "SetInitializer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetVaultAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[7]",
          "name": "_setAddress",
          "type": "address[7]"
        },
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_tier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier3",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier4",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_delayTime",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isL2ProjectManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        }
      ],
      "name": "isL2Token",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVaultAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1burnVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTOS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manageInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "set1rdTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "set2rdTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tonPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "changeTOS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainTON",
          "type": "uint256"
        },
        {
          "internalType": "int24",
          "name": "changeTick",
          "type": "int24"
        },
        {
          "internalType": "bool",
          "name": "exchangeTOS",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "adminWithdraw",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total1rdSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total1rdTONAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total1rdUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total2rdUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total2rdUsersClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startAddWhiteTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endAddWhiteTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startExclusiveTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endExclusiveTime",
          "type": "uint256"
        }
      ],
      "name": "set1RoundTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_snapshot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startDepositTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDepositTime",
          "type": "uint256"
        }
      ],
      "name": "set2RoundTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[7]",
          "name": "_setAddress",
          "type": "address[7]"
        }
      ],
      "name": "setAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_totalExpectSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalExpectOpenSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_saleTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hardcapAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_changePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_changeTick",
          "type": "uint256"
        }
      ],
      "name": "setAllAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Bridge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1burnVault",
          "type": "address"
        }
      ],
      "name": "setBurnBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimPercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundInterval",
          "type": "uint256"
        }
      ],
      "name": "setClaimTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delay",
          "type": "uint256"
        }
      ],
      "name": "setDelayTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2ProjectManager",
          "type": "address"
        }
      ],
      "name": "setL2ProjectManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_min",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_max",
          "type": "uint8"
        }
      ],
      "name": "setMaxMinPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier3",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier4",
          "type": "uint256"
        }
      ],
      "name": "setSTOSstandard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier3",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier4",
          "type": "uint256"
        }
      ],
      "name": "setTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tier1Percents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier2Percents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier3Percents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tier4Percents",
          "type": "uint256"
        }
      ],
      "name": "setTierPercents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setVaultAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiers1stAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersCalculAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersWhiteList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deployTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snapshot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whiteListStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whiteListEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round1StartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round1EndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round2StartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round2EndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user1rd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "join",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user2rd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "join",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "refund",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestClaimedRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAdminOfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stosTier1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stosTier2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stosTier3",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stosTier4",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tier1Percents",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tier2Percents",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tier3Percents",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tier4Percents",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total1roundSaleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total2roundSaleAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "saleTokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payTokenPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hardcapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "changeTOSPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startWhiteTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endWhiteTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start1roundTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end1roundTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "snapshotTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start2roundTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "end2roundTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterPublicSaleVault",
          "name": "params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "claimCounts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstClaimPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundInterval",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
          "name": "params2",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "receiveAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalClaimCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstClaimPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "firstClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "secondClaimTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "roundIntervalTime",
              "type": "uint256"
            },
            {
              "internalType": "uint24",
              "name": "fee",
              "type": "uint24"
            }
          ],
          "internalType": "struct LibProject.InitalParameterVestingFundVault",
          "name": "params3",
          "type": "tuple"
        }
      ],
      "name": "vaultInitialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelists",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e100686103889b7518c111f5f6e645da3528ade9ab17065f29ab049e08b4616",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x1B6fEc76b0760b620687008e998831C3A26128fA",
    "transactionIndex": 1,
    "gasUsed": "3696419",
    "logsBloom": "0x
    "blockHash": "0x6bcf0e80fa59c27579a01e01350197a4cfb6550604ab7cc2517a4d628c4c6300",
    "transactionHash": "0x1e100686103889b7518c111f5f6e645da3528ade9ab17065f29ab049e08b4616",
    "logs": [],
    "blockNumber": 72603,
    "cumulativeGasUsed": "3748908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a39f960ad7ae7b0e89cbcab2979ae2a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExchangeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExclusiveSaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInitializer\",\"type\":\"address\"}],\"name\":\"SetInitializer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetVaultAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[7]\",\"name\":\"_setAddress\",\"type\":\"address[7]\"},{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delayTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isL2ProjectManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"}],\"name\":\"isL2Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVaultAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1burnVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTOS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manageInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"set1rdTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"set2rdTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTON\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"changeTick\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"exchangeTOS\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"adminWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total1rdSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1rdTONAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1rdUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2rdUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2rdUsersClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startAddWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAddWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startExclusiveTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endExclusiveTime\",\"type\":\"uint256\"}],\"name\":\"set1RoundTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_snapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDepositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDepositTime\",\"type\":\"uint256\"}],\"name\":\"set2RoundTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[7]\",\"name\":\"_setAddress\",\"type\":\"address[7]\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalExpectSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalExpectOpenSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_changeTick\",\"type\":\"uint256\"}],\"name\":\"setAllAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Bridge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1burnVault\",\"type\":\"address\"}],\"name\":\"setBurnBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundInterval\",\"type\":\"uint256\"}],\"name\":\"setClaimTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setDelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2ProjectManager\",\"type\":\"address\"}],\"name\":\"setL2ProjectManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_max\",\"type\":\"uint8\"}],\"name\":\"setMaxMinPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4\",\"type\":\"uint256\"}],\"name\":\"setSTOSstandard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tier4Percents\",\"type\":\"uint256\"}],\"name\":\"setTierPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setVaultAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers1stAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersCalculAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deployTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round1StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round1EndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round2StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round2EndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user1rd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2rd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimedRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAdminOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"params2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundIntervalTime\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"internalType\":\"struct LibProject.InitalParameterVestingFundVault\",\"name\":\"params3\",\"type\":\"tuple\"}],\"name\":\"vaultInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/vaults/L2PublicSaleProxy.sol\":\"L2PublicSaleProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint256 wad) external;\\n    function approve(address guy, uint wad) external returns (bool);\\n}\",\"keccak256\":\"0x012497b9495c2b6e8f9dc1674095bdef1d32626ff91ed83c0f65d73c6b0b85f7\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2PublicSaleProxy.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\n// import \\\"../../proxy/Proxy.sol\\\";\\nimport { ProxyStorage } from \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport \\\"./L2PublicSaleVaultStorage.sol\\\";\\n\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\nimport '../../libraries/LibProject.sol';\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IVestingFund {\\n    function publicSaleVault() external view returns(address);\\n    function isVaultAdmin(address l2Token, address account) external view returns (bool);\\n    function setVaultAdmin(address l2Token, address newAdmin) external;\\n    function initialize(\\n        address l2Token,\\n        address receivedAddress,\\n        uint256 claimCounts,\\n        uint256 firstClaimPercents,\\n        uint256 firstClaimTime,\\n        uint256 secondClaimTime,\\n        uint256 roundInterval,\\n        uint24 fee\\n    )\\n        external;\\n}\\n\\ncontract L2PublicSaleProxy is\\n    ProxyStorage,\\n    AccessibleCommon,\\n    L2PublicSaleVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== onlyOwner(proxyContractOwner) ========== */\\n\\n    function setL2ProjectManager(address _l2ProjectManager)\\n        external nonZeroAddress(_l2ProjectManager) onlyOwner\\n    {\\n        require(l2ProjectManager != _l2ProjectManager, \\\"same\\\");\\n        l2ProjectManager = _l2ProjectManager;\\n    }\\n\\n    function setBurnBridge(\\n        address _l2Bridge,\\n        address _l1burnVault\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(l2Bridge != _l2Bridge && l1burnVault != _l1burnVault, \\\"same addr\\\");\\n        l2Bridge = _l2Bridge;\\n        l1burnVault = _l1burnVault;\\n    }\\n\\n    //_setAddress = quoter, vestingFund, liquidityVault, uniswapRouter, lockTOS, tos, ton\\n    function initialize(\\n        address[7] calldata _setAddress,\\n        uint8 _min,\\n        uint8 _max,\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4,\\n        uint256 _delayTime\\n    )\\n        external\\n        onlyOwner\\n    {\\n        setAddress(_setAddress);\\n        setMaxMinPercent(_min,_max);\\n        setSTOSstandard(_tier1,_tier2,_tier3,_tier4);\\n        setDelayTime(_delayTime);\\n    }\\n\\n    function setAddress(\\n        address[7] calldata _setAddress\\n    )\\n        public\\n        onlyOwner\\n    {\\n        quoter = _setAddress[0];\\n        vestingFund = _setAddress[1];\\n        liquidityVault = _setAddress[2];\\n        uniswapRouter = _setAddress[3];\\n        lockTOS = _setAddress[4];\\n        tos = _setAddress[5];\\n        ton = _setAddress[6];\\n        _WETH = IWETH(ton);\\n\\n        IERC20(ton).approve(\\n            address(uniswapRouter),\\n            type(uint256).max\\n        );\\n\\n        // IERC20(wton).approve(\\n        //     address(uniswapRouter),\\n        //     type(uint256).max\\n        // );\\n\\n        // IERC20(ton).approve(\\n        //     wton,\\n        //     type(uint256).max\\n        // );\\n    }\\n\\n    function setMaxMinPercent(\\n        uint8 _min,\\n        uint8 _max\\n    )\\n        public\\n        onlyOwner\\n    {\\n        require(_min < _max, \\\"need min < max\\\");\\n        minPer = _min;\\n        maxPer = _max;\\n    }\\n\\n    function setSTOSstandard(\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    )\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            (_tier1 < _tier2) &&\\n            (_tier2 < _tier3) &&\\n            (_tier3 < _tier4),\\n            \\\"tier set error\\\"\\n        );\\n        stanTier1 = _tier1;\\n        stanTier2 = _tier2;\\n        stanTier3 = _tier3;\\n        stanTier4 = _tier4;\\n    }\\n\\n    function setDelayTime(\\n        uint256 _delay\\n    )\\n        public\\n        onlyOwner\\n    {\\n        require(delayTime != _delay, \\\"same delayTime\\\");\\n        delayTime = _delay;\\n    }\\n\\n    /* ========== only L2ProjectManager ========== */\\n\\n    function setVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    )\\n        external nonZeroAddress(l2Token) nonZeroAddress(_newAdmin) onlyL2ProjectManager\\n    {\\n        require(vaultAdminOfToken[l2Token] != _newAdmin, \\\"same\\\");\\n        vaultAdminOfToken[l2Token] = _newAdmin;\\n        if(!IVestingFund(vestingFund).isVaultAdmin(l2Token, _newAdmin))  IVestingFund(vestingFund).setVaultAdmin(l2Token,_newAdmin);\\n        emit SetVaultAdmin(l2Token, _newAdmin);\\n    }\\n\\n    /* ========== only VaultAdmin ========== */\\n\\n    function vaultInitialize(\\n        address _l2token,\\n        LibProject.InitalParameterPublicSaleVault memory params,\\n        LibProject.InitalParameterPublicSaleClaim memory params2,\\n        LibProject.InitalParameterVestingFundVault memory params3\\n    )\\n        external\\n        onlyVaultAdminOfToken(_l2token)\\n    {\\n         require(\\n            (params.startWhiteTime < params.endWhiteTime) &&\\n            (params.endWhiteTime < params.start1roundTime) &&\\n            (params.start1roundTime < params.end1roundTime) &&\\n            (params.end1roundTime < params.start2roundTime) &&\\n            (params.start2roundTime < params.end2roundTime),\\n            \\\"RoundTime err\\\"\\n        );\\n\\n        require(\\n            (params.end2roundTime < params2.firstClaimTime) &&\\n            (params2.firstClaimTime < params2.secondClaimTime),\\n            \\\"claimTime err\\\"\\n        );\\n\\n        require(\\n            (params.end2roundTime < params3.firstClaimTime) &&\\n            (params3.firstClaimTime < params3.secondClaimTime),\\n            \\\"VestingClaimTime err\\\"\\n        );\\n\\n        setTier(\\n            _l2token,\\n            params.stosTier1,\\n            params.stosTier2,\\n            params.stosTier3,\\n            params.stosTier4\\n        );\\n\\n        setTierPercents(\\n            _l2token,\\n            params.tier1Percents,\\n            params.tier2Percents,\\n            params.tier3Percents,\\n            params.tier4Percents\\n        );\\n\\n        setAllAmount(\\n            _l2token,\\n            params.total1roundSaleAmount,\\n            params.total2roundSaleAmount,\\n            params.saleTokenPrice,\\n            params.payTokenPrice,\\n            params.hardcapAmount,\\n            params.changeTOSPercent,\\n            0\\n        );\\n\\n        set1RoundTime(\\n            _l2token,\\n            params.startWhiteTime,\\n            params.endWhiteTime,\\n            params.start1roundTime,\\n            params.end1roundTime\\n        );\\n\\n        set2RoundTime(\\n            _l2token,\\n            params.snapshotTime,\\n            params.start2roundTime,\\n            params.end2roundTime\\n        );\\n\\n        setClaimTime(\\n            _l2token,\\n            params2.claimCounts,\\n            params2.firstClaimPercent,\\n            params2.firstClaimTime,\\n            params2.secondClaimTime,\\n            params2.roundInterval\\n        );\\n\\n        IVestingFund(vestingFund).initialize(\\n            _l2token,\\n            params3.receiveAddress,\\n            params3.totalClaimCount,\\n            params3.firstClaimPercent,\\n            params3.firstClaimTime,\\n            params3.secondClaimTime,\\n            params3.roundIntervalTime,\\n            params3.fee\\n        );\\n\\n        IERC20(_l2token).approve(\\n            address(l2Bridge),\\n            type(uint256).max\\n        );\\n\\n    }\\n\\n    function setTier(\\n        address _l2token,\\n        uint256 _tier1,\\n        uint256 _tier2,\\n        uint256 _tier3,\\n        uint256 _tier4\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        nonZero(_tier1)\\n        nonZero(_tier2)\\n        nonZero(_tier3)\\n        nonZero(_tier4)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        if(tiers[_l2token][1] != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        }\\n        require(\\n            (stanTier1 <= _tier1) &&\\n            (stanTier2 <= _tier2) &&\\n            (stanTier3 <= _tier3) &&\\n            (stanTier4 <= _tier4),\\n            \\\"Tier set error\\\"\\n        );\\n\\n        tiers[_l2token][1] = _tier1;\\n        tiers[_l2token][2] = _tier2;\\n        tiers[_l2token][3] = _tier3;\\n        tiers[_l2token][4] = _tier4;\\n    }\\n\\n    function setTierPercents(\\n        address _l2token,\\n        uint256 _tier1Percents,\\n        uint256 _tier2Percents,\\n        uint256 _tier3Percents,\\n        uint256 _tier4Percents\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        nonZero(_tier1Percents)\\n        nonZero(_tier2Percents)\\n        nonZero(_tier3Percents)\\n        nonZero(_tier4Percents)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        if(tiersPercents[_l2token][1] != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        }\\n        require(\\n            _tier1Percents+(_tier2Percents)+(_tier3Percents)+(_tier4Percents) == 10000,\\n            \\\"Sum need 10000\\\"\\n        );\\n        tiersPercents[_l2token][1] = _tier1Percents;\\n        tiersPercents[_l2token][2] = _tier2Percents;\\n        tiersPercents[_l2token][3] = _tier3Percents;\\n        tiersPercents[_l2token][4] = _tier4Percents;\\n    }\\n\\n    function setAllAmount(\\n        address _l2token,\\n        uint256 _totalExpectSaleAmount,\\n        uint256 _totalExpectOpenSaleAmount,\\n        uint256 _saleTokenPrice,\\n        uint256 _payTokenPrice,\\n        uint256 _hardcapAmount,\\n        uint256 _changePercent,\\n        uint256 _changeTick\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        uint256 balance = IERC20(_l2token).balanceOf(address(this));\\n        if(balance == 0) {\\n            IERC20(_l2token).safeTransferFrom(l2ProjectManager, address(this), (_totalExpectSaleAmount+_totalExpectOpenSaleAmount) );\\n            balance = IERC20(_l2token).balanceOf(address(this));\\n        }\\n\\n        require((_totalExpectSaleAmount + _totalExpectOpenSaleAmount) <= balance && 1 ether <= balance, \\\"not input token\\\");\\n        require(_changePercent <= maxPer && _changePercent >= minPer,\\\"need to set min,max\\\");\\n        require((_totalExpectSaleAmount+(_totalExpectOpenSaleAmount)) >= (_hardcapAmount*(_payTokenPrice)/(_saleTokenPrice)), \\\"over hardcap\\\");\\n\\n        LibPublicSaleVault.TokenSaleManage storage manageInfos = manageInfo[_l2token];\\n\\n        if(manageInfos.set1rdTokenAmount != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        }\\n        manageInfos.set1rdTokenAmount = _totalExpectSaleAmount;\\n        manageInfos.set2rdTokenAmount = _totalExpectOpenSaleAmount;\\n        manageInfos.saleTokenPrice = _saleTokenPrice;\\n        manageInfos.tonPrice = _payTokenPrice;\\n        manageInfos.hardCap = _hardcapAmount;\\n        manageInfos.changeTOS = _changePercent;\\n        // manageInfos.changeTick = changeTick;\\n        if(manageInfos.changeTick == 0) {\\n            manageInfos.changeTick = 18;\\n        }\\n    }\\n\\n    function set1RoundTime(\\n        address _l2token,\\n        uint256 _startAddWhiteTime,\\n        uint256 _endAddWhiteTime,\\n        uint256 _startExclusiveTime,\\n        uint256 _endExclusiveTime\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        nonZero(_startAddWhiteTime)\\n        nonZero(_endAddWhiteTime)\\n        nonZero(_startExclusiveTime)\\n        nonZero(_endExclusiveTime)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        LibPublicSaleVault.TokenTimeManage storage timeInfos = timeInfo[_l2token];\\n        // require(\\n        //     (_startAddWhiteTime < _endAddWhiteTime) &&\\n        //     (_endAddWhiteTime < _startExclusiveTime) &&\\n        //     (_startExclusiveTime < _endExclusiveTime),\\n        //     \\\"RoundTime err\\\"\\n        // );\\n\\n        if(timeInfos.deployTime != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        } else {\\n            timeInfos.deployTime = block.timestamp;\\n        }\\n        // console.log(\\\"timeInfos.deployTime :\\\", timeInfos.deployTime);\\n        // console.log(\\\"delayTime :\\\", delayTime);\\n        // console.log(\\\"_startAddWhiteTime :\\\", _startAddWhiteTime);\\n        require((timeInfos.deployTime + delayTime) < _startAddWhiteTime, \\\"snapshot need later\\\");\\n\\n        timeInfos.whiteListStartTime = _startAddWhiteTime;\\n        timeInfos.whiteListEndTime = _endAddWhiteTime;\\n        timeInfos.round1StartTime = _startExclusiveTime;\\n        timeInfos.round1EndTime = _endExclusiveTime;\\n    }\\n\\n    function set2RoundTime(\\n        address _l2token,\\n        uint256 _snapshot,\\n        uint256 _startDepositTime,\\n        uint256 _endDepositTime\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        nonZero(_snapshot)\\n        nonZero(_startDepositTime)\\n        nonZero(_endDepositTime)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        LibPublicSaleVault.TokenTimeManage storage timeInfos = timeInfo[_l2token];\\n         if(timeInfos.snapshot != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        }\\n\\n        // require(\\n        //     (_startDepositTime < _endDepositTime),\\n        //     \\\"Round2time err\\\"\\n        // );\\n\\n        timeInfos.snapshot = _snapshot;\\n        timeInfos.round2StartTime = _startDepositTime;\\n        timeInfos.round2EndTime = _endDepositTime;\\n    }\\n\\n    function setClaimTime(\\n        address _l2token,\\n        uint256 _claimCounts,\\n        uint256 _firstClaimPercents,\\n        uint256 _firstClaimTime,\\n        uint256 _secondClaimTime,\\n        uint256 _roundInterval\\n    )\\n        public\\n        onlyVaultAdminOfToken(_l2token)\\n        nonZero(_claimCounts)\\n        beforeStartAddWhiteTime(_l2token)\\n    {\\n        LibPublicSaleVault.TokenSaleClaim storage claimInfos = claimInfo[_l2token];\\n        // require(_firstClaimTime != 0, \\\"firstclaimTime value err\\\");\\n        // require(_firstClaimTime > block.number, \\\"first claim time passed\\\");\\n        if(claimInfos.totalClaimCounts != 0) {\\n            require(isL2ProjectManager(), \\\"only DAO\\\");\\n        }\\n\\n        claimInfos.totalClaimCounts = _claimCounts;\\n        claimInfos.firstClaimPercent = _firstClaimPercents;\\n        claimInfos.firstClaimTime = _firstClaimTime;\\n        claimInfos.secondClaimTime = _secondClaimTime;\\n        claimInfos.claimInterval = _roundInterval;\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    function isL2ProjectManager() public view returns (bool) {\\n        return (l2ProjectManager != address(0) && msg.sender == l2ProjectManager);\\n    }\\n\\n    function isVaultAdmin(address l2Token, address account) public view returns (bool) {\\n        return (account != address(0) && vaultAdminOfToken[l2Token] == account);\\n    }\\n\\n    //address(0)\\uc774\\uba74 \\ud574\\ub2f9 l2Token\\uc5d0 \\ub300\\ud574\\uc11c admin\\uc774 \\uc124\\uc815\\ub418\\uc9c0 \\uc54a\\uc557\\uc74c -> projectManager\\ub85c \\ubd80\\ud130 \\ud310\\ub9e4\\ud5c8\\uc6a9\\uc774 \\uc548\\ub5a8\\uc5b4\\uc84c\\uc74c\\n    //address(0)\\uac00 \\uc544\\ub2c8\\uba74 l2Token\\uc5d0 \\ub300\\ud574\\uc11c admin\\uc774 \\uc124\\uc815\\ub418\\uc5c8\\uc73c\\ubbc0\\ub85c \\ud310\\ub9e4\\ud5c8\\uc6a9\\uc774 \\ub5a8\\uc5b4\\uc84c\\uc74c\\n    function isL2Token(address l2Token) public view returns (bool) {\\n        return (vaultAdminOfToken[l2Token] != address(0));\\n    }\\n}\",\"keccak256\":\"0xe1b832ca90b9a27bb9d4fda06eb74c9810ab37f2ea3d3078f81b3bd6aab71593\",\"license\":\"Unlicense\"},\"contracts/L2/vaults/L2PublicSaleVaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibPublicSaleVault } from \\\"../../libraries/LibPublicSaleVault.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\ncontract L2PublicSaleVaultStorage {\\n    uint24 public constant poolFee = 3000;\\n\\n    address public constant wton = 0xc4A11aaf6ea915Ed7Ac194161d2fC9384F15bff2;\\n    \\n    address public quoter;\\n    address public vestingFund;\\n    address public liquidityVault;\\n    address public uniswapRouter;\\n    \\n    address public lockTOS;\\n    address public tos;\\n    address public ton;\\n\\n    IWETH public _WETH;\\n\\n    //L2PublicSaleContract\\uc744 manage\\ud558\\ub294 manager\\n    address public l2ProjectManager;\\n    address public l2Bridge;\\n    address public l1burnVault;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 min,maxPer (changeTOS\\ub97c \\uacb0\\uc815\\ud560 \\uc218 \\uc788\\ub294 \\ubc94\\uc704)\\n    uint8 public minPer;    //\\ud604\\uc7ac\\ub294 \\uc18c\\uc218\\uc810 \\uc790\\ub9ac\\uc218\\uac00 \\uc5c6\\uc774 \\uc0ac\\uc6a9\\ub418\\uc5b4\\uc11c uint8(0~255\\uae4c\\uc9c0 \\ubc94\\uc704)\\uc774 \\uc0ac\\uc6a9\\ub428.\\n    uint8 public maxPer;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 stanTier\\n    uint256 public stanTier1;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier1 \\uae30\\uc900\\uc774 \\uc81c\\uc77c \\uc791\\uc74c\\n    uint256 public stanTier2;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier2\\n    uint256 public stanTier3;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier3\\n    uint256 public stanTier4;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier4 \\uae30\\uc900\\uc774 \\uc81c\\uc77c \\ud07c\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 contract\\ub97c deploy \\ud6c4 snapshot\\uc744 \\uc9c0\\uc815\\ud560 \\uc218 \\uc788\\ub294 \\ucd5c\\uc18c \\uc2dc\\uac04 \\uac04\\uaca9\\n    uint256 public delayTime;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 changeTick\\n    int24 public changeTick;    //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560\\ub54c \\ud5c8\\uc6a9\\ub418\\ub294 Tick \\ubc94\\uc704\\n    \\n    bool internal free = true;\\n\\n    //l2token\\uc758 \\ubaa8\\ub4e0 user\\uc758 totalDepositAmount\\n    mapping(address => uint256) public totalDepositAmount;\\n\\n    //l2token\\uc774 \\uae30\\uc900\\uc774 \\ub41c\\ub2e4. (l2token - tokenOwner)\\n    mapping(address => address) public vaultAdminOfToken;\\n\\n\\n    mapping(address => address[]) public depositors;            // l2token - depositors\\n    mapping(address => address[]) public whitelists;            // l2token - whitelists\\n\\n    mapping(address => uint256[]) public claimTimes;            // l2token - claimTimes\\n    mapping(address => uint256[]) public claimPercents;         // l2token - claimPercents\\n    \\n\\n    // l2token - struct\\n    mapping(address => LibPublicSaleVault.TokenTimeManage) public timeInfo;     // l2token - timeInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleManage) public manageInfo;       // l2token - manageInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleClaim) public claimInfo;       // l2token - manageInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleInfo) public saleInfo;       // l2token - saleInfo\\n\\n    // l2token - account - struct\\n    mapping(address => mapping(address => LibPublicSaleVault.UserInfo1rd)) public user1rd;      //l2token - userAccount - userInfo1rd\\n    mapping(address => mapping(address => LibPublicSaleVault.UserInfo2rd)) public user2rd;      //l2token - userAccount - userInfo2rd\\n    mapping(address => mapping(address => LibPublicSaleVault.UserClaim)) public userClaim;      //l2token - userAccount - userClaim    \\n\\n\\n    // l2token - tierInfo\\n    mapping(address => mapping(uint8 => uint256)) public tiers;                 // l2token - tierNumber - tier sTOS value\\n    mapping(address => mapping(uint8 => uint256)) public tiersPercents;         // l2token - tierNumber - tier SalePercent (tierPercents sum is 10000)\\n    mapping(address => mapping(uint8 => uint256)) public tiersWhiteList;        // l2token - tierNumber - Number of whitelist participants by tier\\n    mapping(address => mapping(uint8 => uint256)) public tiersCalculAccount;    // l2token - tierNumber - Number of calculator for Amount by tier\\n    mapping(address => mapping(uint8 => uint256)) public tiers1stAccount;       // l2token - tierNumber - Number of 1round participants by tier\\n\\n    event SetVaultAdmin(address l2Token, address newAdmin);\\n    event SetInitializer(address newInitializer);\\n\\n    event AddedWhiteList(address l2Token, address indexed from, uint256 tier);\\n    event ExclusiveSaled(address l2Token, address indexed from, uint256 amount);\\n    event Deposited(address l2Token, address indexed from, uint256 amount);\\n    \\n    event Claimed(address l2Token, address indexed from, uint256 amount);\\n    event Refunded(address l2Token, address indexed from, uint256 amount);\\n\\n    event DepositWithdrawal(address l2Token, address indexed from, uint256 amount, uint256 liquidityAmount);\\n    event ExchangeSwap(address l2Token, address indexed from, uint256 amountIn, uint256 amountOut);\\n\\n    modifier onlyL2ProjectManager() {\\n        require(l2ProjectManager != address(0) && msg.sender == l2ProjectManager, \\\"caller is not l2ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultAdminOfToken(address l2token) {\\n        require(vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token] || msg.sender == l2ProjectManager, \\\"caller is not a vaultAdmin Of l2Token\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier beforeStartAddWhiteTime(address l2token) {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[l2token];\\n        require(\\n            timeInfos.whiteListStartTime == 0 ||\\n                (timeInfos.whiteListStartTime > 0 && block.timestamp < timeInfos.whiteListStartTime),\\n            \\\"not beforewhiteListStartTime\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n}\\n\",\"keccak256\":\"0x345fd48abd8d1125b83d46fcaa66eeefe17cd80a1b01185d79776065342a3e16\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // Handle division by zero\\n        require(denominator > 0);\\n\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            // require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // 2022.0314.modified\\n        //uint256 twos = -denominator & denominator;\\n        //uint256 twos = denominator & (~denominator + 1);\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1cb334770aafba8747f54d6ec0766049ab5f2174025f97ec0ada5e99c665c73\",\"license\":\"MIT\"},\"contracts/libraries/LibPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibPool {\\n\\n    struct PoolInfo {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n}\",\"keccak256\":\"0x4f96e027ec71a0666159676b2426fbb90bd9de37076c03e225e533df8ff30ab5\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./LibPool.sol\\\";\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardTonTosPoolParams;\\n        InitalParameterLiquidityRewardVault rewardProjectTosPoolParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n        InitalParameterVestingFundVault vestingParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256 claimCounts;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundInterval;\\n    }\\n\\n    struct InitalParameterVestingFundVault {\\n        address receiveAddress;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimPercent;\\n        uint256 firstClaimTime;\\n        uint256 secondClaimTime;\\n        uint256 roundIntervalTime;\\n        uint24 fee;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        LibPool.PoolInfo poolParams;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    struct PublicSaleSet {\\n        uint8 minPercents;\\n        uint8 maxPercents;\\n        uint256 delayTime;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n            tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n            tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n            tokamakVaults.initialVaultParams.startTime == 0 ||\\n            tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardTonTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardTonTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardTonTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.rewardProjectTosPoolParams.poolParams.token0 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.token1 == address(0) ||\\n            tokamakVaults.rewardProjectTosPoolParams.poolParams.fee == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.totalClaimCount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimAmount == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime == 0 ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n            tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n            tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n            ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.rewardTonTosPoolParams.params.secondClaimTime < tokamakVaults.rewardTonTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.rewardProjectTosPoolParams.params.secondClaimTime < tokamakVaults.rewardProjectTosPoolParams.params.firstClaimTime ||\\n            tokamakVaults.tosAirdropParams.secondClaimTime < tokamakVaults.tosAirdropParams.firstClaimTime ||\\n            tokamakVaults.tonAirdropParams.secondClaimTime < tokamakVaults.tonAirdropParams.firstClaimTime\\n            )\\n            return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier1 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier2 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier3 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.stosTier4 == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier1Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.payTokenPrice == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.changeTOSPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.startWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.snapshotTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.claimCounts == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.claimParams.roundInterval == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.totalClaimCount == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimPercent == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.firstClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.roundIntervalTime == 0 ||\\n            tokamakVaults.publicSaleParams.vestingParams.fee == 0\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.tier1Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier2Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier3Percents +\\n            tokamakVaults.publicSaleParams.vaultParams.tier4Percents) != 10000\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            (tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n            tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) < (\\n                tokamakVaults.publicSaleParams.vaultParams.hardcapAmount *\\n                tokamakVaults.publicSaleParams.vaultParams.payTokenPrice /\\n                tokamakVaults.publicSaleParams.vaultParams.saleTokenPrice\\n            )\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vaultParams.endWhiteTime < tokamakVaults.publicSaleParams.vaultParams.startWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start1roundTime < tokamakVaults.publicSaleParams.vaultParams.endWhiteTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end1roundTime < tokamakVaults.publicSaleParams.vaultParams.start1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.start2roundTime < tokamakVaults.publicSaleParams.vaultParams.end1roundTime ||\\n            tokamakVaults.publicSaleParams.vaultParams.end2roundTime < tokamakVaults.publicSaleParams.vaultParams.start2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.firstClaimTime < tokamakVaults.publicSaleParams.vaultParams.end2roundTime ||\\n            tokamakVaults.publicSaleParams.claimParams.secondClaimTime < tokamakVaults.publicSaleParams.claimParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        if (\\n            tokamakVaults.publicSaleParams.vestingParams.secondClaimTime < tokamakVaults.publicSaleParams.vestingParams.firstClaimTime\\n        ) return (boolValidate, totalAmount);\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardTonTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.rewardProjectTosPoolParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0 ||\\n                    (customs[i].params.secondClaimTime < customs[i].params.firstClaimTime)\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x703396a30650c65636770ff0712ade52385643050c6d5f2738924c4a03b5bf53\",\"license\":\"MIT\"},\"contracts/libraries/LibPublicSaleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"./OracleLibrary.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IIUniswapV3Factory {\\n    function getPool(address,address,uint24) external view returns (address);\\n}\\n\\ninterface IIUniswapV3Pool {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n}\\n\\n/**\\n * @title LibPublicSaleVault\\n */\\nlibrary LibPublicSaleVault {\\n\\n    struct TokenTimeManage {\\n        uint256 deployTime;\\n        uint256 snapshot;\\n        uint256 whiteListStartTime;\\n        uint256 whiteListEndTime;\\n        uint256 round1StartTime;\\n        uint256 round1EndTime;\\n        uint256 round2StartTime;\\n        uint256 round2EndTime;\\n    }\\n\\n    struct TokenSaleManage {\\n        uint256 set1rdTokenAmount;      //1round\\uc5d0 token\\uc744 \\ud310\\ub9e4\\ud560 \\uc591\\n        uint256 set2rdTokenAmount;      //2round\\uc5d0 token\\uc744 \\ud310\\ub9e4\\ud560 \\uc591\\n        uint256 saleTokenPrice;\\n        uint256 tonPrice;\\n        uint256 hardCap;                //softcap \\uc218\\ub7c9 (\\ud310\\ub9e4 \\ucd5c\\uc800 \\ud558\\ud55c\\uc120)\\n        uint256 changeTOS;              //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud558\\ub294 %\\n        uint256 remainTON;              //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560 \\ub0a8\\uc740 TON\\n        int24 changeTick;             //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560\\ub54c \\ud5c8\\uc6a9\\ub418\\ub294 Tick \\ubc94\\uc704\\n        bool exchangeTOS;               //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud558\\uc600\\ub294\\uc9c0 \\uccb4\\ud06c\\n        bool adminWithdraw;             //withdraw\\ud568\\uc218\\ub97c \\uc2e4\\ud589\\ud558\\uc600\\ub294\\uc9c0 \\uccb4\\ud06c\\n    }\\n\\n    struct TokenSaleClaim {\\n        uint256 totalClaimCounts;       //\\ucd1d \\ud074\\ub808\\uc784 \\uc218\\n        uint256 firstClaimPercent;      //\\ucd08\\uae30 \\ud074\\ub808\\uc784 percents\\n        uint256 firstClaimTime;         //\\uccab\\ubc88\\uc9f8 claim \\uc2dc\\uac04\\n        uint256 secondClaimTime;        //\\ub450\\ubc88\\uc9f8 claim \\uc2dc\\uac04\\n        uint256 claimInterval;          //\\ud074\\ub808\\uc784 \\uac04\\uaca9 (epochtime)\\n    }\\n\\n    struct TokenSaleInfo {\\n        uint256 total1rdSaleAmount;      //Token\\uc744 \\ud310\\ub9e4\\ud55c \\uc591\\n        uint256 total1rdTONAmount;       //Token\\ud310\\ub9e4\\ub85c \\ubc1b\\uc740 TON\\uc591\\n        uint256 totalUsers;             //\\uc804\\uccb4 \\uc138\\uc77c \\ucc38\\uc5ec\\uc790 (\\ub77c\\uc6b4\\ub4dc1,\\ub77c\\uc6b4\\ub4dc2 \\ud3ec\\ud568, \\uc720\\ub2c8\\ud06c)\\n        uint256 total1rdUsers;       //\\ub77c\\uc6b4\\ub4dc 1 \\ucc38\\uc5ec\\uc790\\n        uint256 total2rdUsers;       //\\ub77c\\uc6b4\\ub4dc 2 \\ucc38\\uc5ec\\uc790\\n        uint256 total2rdUsersClaim;  //\\ub77c\\uc6b4\\ub4dc 2 \\ucc38\\uc5ec\\uc790\\uc911 claim\\ud55c\\uc0ac\\ub78c\\n    }\\n\\n\\n    struct UserInfo1rd {\\n        bool join;\\n        uint8 tier;\\n        uint256 payAmount;\\n        uint256 saleAmount;\\n    }\\n\\n    struct UserInfo2rd {\\n        bool join;\\n        uint256 depositAmount;\\n    }\\n\\n    struct UserClaim {\\n        bool refund;\\n        uint256 claimAmount;\\n        uint256 refundAmount;\\n        uint256 latestClaimedRound;     //\\ub9c8\\uc9c0\\ub9c9 claim \\ub77c\\uc6b4\\ub4dc\\n    }\\n\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 amountIn,\\n        address baseToken,\\n        address quoteToken\\n    ) public pure returns (uint256 amountOut) {\\n        return OracleLibrary.getQuoteAtTick(tick, amountIn, baseToken, quoteToken);\\n    }\\n\\n    function getPoolAddress(address _wton, address _tos) public view returns(address) {\\n        // address factory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n        address factory = 0x755Ba335013C07CE35C9A2dd5746617Ac4c6c799;\\n        return IIUniswapV3Factory(factory).getPool(_wton, _tos, 3000);\\n    }\\n\\n    function getTimeWeightTick(address _pool,uint32 _period) public view returns (int24) {\\n        return OracleLibrary.consult(_pool, _period);\\n    }\\n\\n    function getTokenOrder(address _pool) public view returns(address,address,int24) {\\n        address token0 = IIUniswapV3Pool(_pool).token0();\\n        address token1 = IIUniswapV3Pool(_pool).token1();\\n        (,int24 nowtick,,,,,) = IIUniswapV3Pool(_pool).slot0();\\n        return (token0, token1,nowtick);\\n    }\\n\\n    function getMiniTick(int24 tickSpacings) public pure returns (int24){\\n        return (TickMath.MIN_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function getMaxTick(int24 tickSpacings) public pure  returns (int24){\\n        return (TickMath.MAX_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function acceptMinTick(int24 _tick, int24 _tickSpacings, int24 _acceptTickInterval) public pure returns (int24) {\\n        int24 _minTick = getMiniTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick - (_tickSpacings * _acceptTickInterval);\\n\\n        if(_minTick < _acceptMinTick) return _acceptMinTick;\\n        else return _minTick;\\n    }\\n\\n    function acceptMaxTick(int24 _tick, int24 _tickSpacings, int24 _acceptTickInterval) public pure returns (int24) {\\n        int24 _maxTick = getMaxTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick + (_tickSpacings * _acceptTickInterval);\\n\\n        if(_maxTick < _acceptMinTick) return _maxTick;\\n        else return _acceptMinTick;\\n    }\\n    \\n    function limitPrameters(\\n        uint256 amountIn,\\n        address _pool,\\n        address token0,\\n        address token1,\\n        int24 acceptTickCounts\\n    ) public view returns  (uint256 amountOutMinimum, uint256 priceLimit, uint160 sqrtPriceX96Limit) {\\n        IIUniswapV3Pool pool = IIUniswapV3Pool(_pool);\\n        (, int24 tick,,,,,) =  pool.slot0();\\n        int24 _tick = tick;\\n        if(token0 < token1) {\\n            _tick = tick - acceptTickCounts * 60;\\n            if(_tick < TickMath.MIN_TICK ) _tick =  TickMath.MIN_TICK ;\\n        } else {\\n            _tick = tick + acceptTickCounts * 60;\\n            if(_tick > TickMath.MAX_TICK ) _tick =  TickMath.MAX_TICK ;\\n        }\\n        address token1_ = token1;\\n        address token0_ = token0;\\n        return (\\n              getQuoteAtTick(\\n                _tick,\\n                uint128(amountIn),\\n                token0_,\\n                token1_\\n                ),\\n             getQuoteAtTick(\\n                _tick,\\n                uint128(10**27),\\n                token0_,\\n                token1_\\n             ),\\n             TickMath.getSqrtRatioAtTick(_tick)\\n        );\\n    }\\n\\n    function _decodeApproveData(\\n        bytes memory data\\n    ) public pure returns (uint256 approveData) {\\n        assembly {\\n            approveData := mload(add(data, 0x20))\\n        }\\n    }\\n}\",\"keccak256\":\"0xc73a2511abce2489532953217fcbe6c2a76963611c55f506c02afa78df24eb67\",\"license\":\"MIT\"},\"contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\n\\n\\ninterface IIIUniswapV3Pool {\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n}\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n\\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\\n        require(period != 0, \\\"BP\\\");\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = period;\\n        secondAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, ) = IIIUniswapV3Pool(pool).observe(secondAgos);\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / int56( int32(period) ));\\n\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56( int32(period) ) != 0)) timeWeightedAverageTick--;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe60795ad694e4558eeca29c0206eb2e1569becd141356f09500c5a8e7d00c4e8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x7b2bbb42865a20de2f40a0cb20a10bd0ddc6189cd58db42551c87b41169a0904\",\"license\":\"GPL-2.0-or-later\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526015805463ff0000001916630100000017905534801561002357600080fd5b5061418b806100336000396000f3fe608060405234801561001057600080fd5b50600436106104de5760003560e01c8063768b821f11610286578063ae1f6aaf1161016b578063d13da444116100e3578063e0af361611610097578063ea28ef181161007c578063ea28ef1814610e5b578063f3b08cb914610e63578063f5a96ccf14610e7657600080fd5b8063e0af361614610e1a578063e1ff729b14610e2d57600080fd5b8063d7b0b29d116100c8578063d7b0b29d14610d3c578063d97830b114610dac578063dc560fcd14610e1157600080fd5b8063d13da44414610cfe578063d547741f14610d2957600080fd5b8063c0f22d4b1161013a578063cc48b9471161011f578063cc48b94714610cb8578063cf437a8f14610ccb578063d01481a114610ceb57600080fd5b8063c0f22d4b14610c92578063c6bbd5a714610ca557600080fd5b8063ae1f6aaf14610bb7578063b005ed9114610bca578063b18aaf5814610c56578063b911135f14610c6957600080fd5b806391d14854116101fe578063a217fddf116101cd578063a4182343116101b2578063a418234314610b7e578063ac3c467614610b91578063ae148b8714610ba457600080fd5b8063a217fddf14610b62578063a389595f14610b6a57600080fd5b806391d1485414610ad557806397d7859514610b0e5780639f32b29a14610b2e5780639f87b77f14610b5957600080fd5b80637fc46ba8116102555780638951ed181161023a5780638951ed1814610a9457806389f395de14610aa75780638d62d94914610aba57600080fd5b80637fc46ba814610a0357806389293f6514610a2c57600080fd5b8063768b821f146109cb578063790f317f146109d45780637ce4166b146109e75780637e2eee53146109fa57600080fd5b8063466c01b8116103c757806355d6d39b1161033f57806370480275116102f3578063735de9f7116102d8578063735de9f71461097e57806375829def1461099157806375b238fc146109a457600080fd5b80637048027514610958578063708666ad1461096b57600080fd5b80635bb04f70116103245780635bb04f701461092557806363a8fd891461093857806366e7cb921461094557600080fd5b806355d6d39b146108e75780635b19e2941461091257600080fd5b806351e8152a1161039657806352351e851161037b57806352351e851461089e57806353ad4046146108b1578063550d01a3146108c457600080fd5b806351e8152a1461088257806351ebde6d1461089557600080fd5b8063466c01b81461082057806349f5f564146108335780634e6c44661461084657806350d2a2761461085957600080fd5b8063229852461161045a5780632ac9bab61161042957806333efca3d1161040e57806333efca3d146107ab57806335b9ac66146107fa57806336568abe1461080d57600080fd5b80632ac9bab61461076d5780632f2ff15d1461079857600080fd5b806322985246146106fd57806323abde1114610724578063248a9ca31461073757806324d7806c1461075a57600080fd5b806312269758116104b15780631785f53c116104965780631785f53c1461065e5780631916e534146106715780631c53f256146106d757600080fd5b80631226975814610610578063123411181461064957600080fd5b806301ffc9a7146104e3578063089fe6aa1461050b57806308ac3fcb146105285780630b7459eb146105e5575b600080fd5b6104f66104f1366004613983565b610e89565b60405190151581526020015b60405180910390f35b610514610bb881565b60405162ffffff9091168152602001610502565b6105946105363660046139c9565b601d6020526000908152604090208054600182015460028084015460038501546004860154600587015460068801546007909801549697959693959294919390929181900b9060ff630100000082048116916401000000009004168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260020b60e08401521515610100830152151561012082015261014001610502565b6006546105f8906001600160a01b031681565b6040516001600160a01b039091168152602001610502565b61063b61061e3660046139f5565b602460209081526000928352604080842090915290825290205481565b604051908152602001610502565b61065c610657366004613a28565b610ec0565b005b61065c61066c3660046139c9565b61110e565b6106b561067f366004613a72565b6022602090815260009283526040808420909152908252902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610502565b600f546106eb90600160a81b900460ff1681565b60405160ff9091168152602001610502565b61063b7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b61065c610732366004613a9c565b611189565b61063b610745366004613ade565b60009081526004602052604090206001015490565b6104f66107683660046139c9565b6114e0565b61063b61077b3660046139f5565b602760209081526000928352604080842090915290825290205481565b61065c6107a6366004613af7565b611520565b6107e36107b9366004613a72565b60216020908152600092835260408084209091529082529020805460019091015460ff9091169082565b604080519215158352602083019190915201610502565b61065c610808366004613a72565b61154a565b61065c61081b366004613af7565b6117d6565b6105f861082e366004613b1a565b611862565b61065c610841366004613b44565b61189a565b6009546105f8906001600160a01b031681565b6105f8610867366004613983565b6003602052600090815260409020546001600160a01b031681565b6104f6610890366004613a72565b611d41565b61063b60125481565b600d546105f8906001600160a01b031681565b61065c6108bf366004613d17565b611d7e565b6104f66108d23660046139c9565b60026020526000908152604090205460ff1681565b61063b6108f53660046139f5565b602560209081526000928352604080842090915290825290205481565b6105f8610920366004613b1a565b6121ae565b61065c610933366004613a72565b6121ca565b6000546104f69060ff1681565b61065c610953366004613a9c565b6122aa565b61065c6109663660046139c9565b612649565b6007546105f8906001600160a01b031681565b6008546105f8906001600160a01b031681565b61065c61099f3660046139c9565b6126c1565b61063b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b61063b60115481565b61065c6109e2366004613e85565b612811565b61065c6109f5366004613efd565b612891565b61063b60145481565b6105f8610a113660046139c9565b6017602052600090815260409020546001600160a01b031681565b610a70610a3a366004613a72565b60208080526000928352604080842090915290825290208054600182015460029092015460ff8083169361010090930416919084565b60408051941515855260ff9093166020850152918301526060820152608001610502565b61065c610aa2366004613ade565b612aa3565b600a546105f8906001600160a01b031681565b6105f873c4a11aaf6ea915ed7ac194161d2fc9384f15bff281565b6104f6610ae3366004613af7565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61063b610b1c3660046139c9565b60166020526000908152604090205481565b61063b610b3c3660046139f5565b602660209081526000928352604080842090915290825290205481565b61063b60105481565b61063b600081565b600f546106eb90600160a01b900460ff1681565b61065c610b8c3660046139c9565b612b47565b61065c610b9f366004613f19565b612c3a565b61065c610bb2366004613f4b565b612d01565b600e546105f8906001600160a01b031681565b610c1b610bd83660046139c9565b601c602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610502565b61065c610c64366004613f67565b612e0d565b6105f8610c77366004613ade565b6001602052600090815260409020546001600160a01b031681565b61063b610ca0366004613b1a565b6130c2565b6005546105f8906001600160a01b031681565b600b546105f8906001600160a01b031681565b601554610cd89060020b81565b60405160029190910b8152602001610502565b600f546105f8906001600160a01b031681565b61063b610d0c3660046139f5565b602360209081526000928352604080842090915290825290205481565b61065c610d37366004613af7565b6130f3565b610d7f610d4a3660046139c9565b601f60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610502565b610de9610dba3660046139c9565b601e60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610502565b61063b60135481565b600c546105f8906001600160a01b031681565b6104f6610e3b3660046139c9565b6001600160a01b0390811660009081526017602052604090205416151590565b6104f6613118565b61063b610e71366004613b1a565b613144565b61065c610e84366004613a9c565b613160565b60006001600160e01b03198216637965db0b60e01b1480610eba57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0380871660009081526017602052604090205487911615801590610f0457506001600160a01b038181166000908152601760205260409020541633145b80610f195750600d546001600160a01b031633145b610f785760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b60648201526084015b60405180910390fd5b8580600003610fae5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b0388166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528991158061103f57506000816040015111801561103f5750806040015142105b61108b5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038a166000908152601e602052604090208054156110e9576110b2613118565b6110e95760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b9889555050505060018501939093556002840191909155600383015560049091015550565b611117336114e0565b61115c5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826117d6565b50565b6001600160a01b03808616600090815260176020526040902054869116158015906111cd57506001600160a01b038181166000908152601760205260409020541633145b806111e25750600d546001600160a01b031633145b61123c5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036112725760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036112a85760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036112de5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036113145760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b9115806113a55750600081604001511180156113a55750806040015142105b6113f15760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c166000908152601c6020526040902080541561145457611418613118565b61144f5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b611458565b4281555b60145481548d9161146891613fb6565b106114b55760405162461bcd60e51b815260206004820152601360248201527f736e617073686f74206e656564206c61746572000000000000000000000000006044820152606401610f6f565b600281019b909b55505050506003870195909555505060048401919091556005909201919091555050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff16610eba565b60008281526004602052604090206001015461153b816134f3565b61154583836134fd565b505050565b816001600160a01b0381166115865760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b816001600160a01b0381166115c25760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b600d546001600160a01b0316158015906115e65750600d546001600160a01b031633145b6116325760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74206c3250726f6a6563744d616e6167657200006044820152606401610f6f565b6001600160a01b038481166000908152601760205260409020548185169116036116875760405162461bcd60e51b8152600401610f6f9060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b038481166000818152601760205260409081902080546001600160a01b03191687851690811790915560065491516328f40a9560e11b815260048101939093526024830152909116906351e8152a90604401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190613fc9565b61178d57600654604051631adcd63360e11b81526001600160a01b0386811660048301528581166024830152909116906335b9ac6690604401600060405180830381600087803b15801561177457600080fd5b505af1158015611788573d6000803e3d6000fd5b505050505b604080516001600160a01b038087168252851660208201527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a4026193910160405180910390a150505050565b6001600160a01b03811633146118545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610f6f565b61185e828261359f565b5050565b6018602052816000526040600020818154811061187e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b03808916600090815260176020526040902054899116158015906118de57506001600160a01b038181166000908152601760205260409020541633145b806118f35750600d546001600160a01b031633145b61194d5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b6001600160a01b0389166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528a9115806119de5750600081604001511180156119de5750806040015142105b611a2a5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6040516370a0823160e01b81523060048201526000906001600160a01b038d16906370a0823190602401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190613feb565b905080600003611b3f57600d54611ad4906001600160a01b031630611aba8d8f613fb6565b8f6001600160a01b0316613622909392919063ffffffff16565b6040516370a0823160e01b81523060048201526001600160a01b038d16906370a0823190602401602060405180830381865afa158015611b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3c9190613feb565b90505b80611b4a8b8d613fb6565b11158015611b60575080670de0b6b3a764000011155b611bac5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7420696e70757420746f6b656e00000000000000000000000000000000006044820152606401610f6f565b600f54600160a81b900460ff168611801590611bd45750600f54600160a01b900460ff168610155b611c205760405162461bcd60e51b815260206004820152601360248201527f6e65656420746f20736574206d696e2c6d6178000000000000000000000000006044820152606401610f6f565b88611c2b8989614004565b611c35919061401b565b611c3f8b8d613fb6565b1015611c8d5760405162461bcd60e51b815260206004820152600c60248201527f6f766572206861726463617000000000000000000000000000000000000000006044820152606401610f6f565b6001600160a01b038c166000908152601d60205260409020805415611ceb57611cb4613118565b611ceb5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b8b8155600181018b905560028082018b9055600382018a905560048201899055600582018890556007820154900b600003611d325760078101805462ffffff191660121790555b50505050505050505050505050565b60006001600160a01b03821615801590611d7757506001600160a01b038381166000908152601760205260409020548116908316145b9392505050565b6001600160a01b0380851660009081526017602052604090205485911615801590611dc257506001600160a01b038181166000908152601760205260409020541633145b80611dd75750600d546001600160a01b031633145b611e315760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b836101e00151846101c00151108015611e535750836102000151846101e00151105b8015611e685750836102200151846102000151105b8015611e7d5750836102600151846102200151105b8015611e925750836102800151846102600151105b611ede5760405162461bcd60e51b815260206004820152600d60248201527f526f756e6454696d6520657272000000000000000000000000000000000000006044820152606401610f6f565b8260400151846102800151108015611efd575082606001518360400151105b611f495760405162461bcd60e51b815260206004820152600d60248201527f636c61696d54696d6520657272000000000000000000000000000000000000006044820152606401610f6f565b8160600151846102800151108015611f68575081608001518260600151105b611fb45760405162461bcd60e51b815260206004820152601460248201527f56657374696e67436c61696d54696d65206572720000000000000000000000006044820152606401610f6f565b611fd18585600001518660200151876040015188606001516122aa565b611fee8585608001518660a001518760c001518860e00151613160565b61201d858561010001518661012001518761014001518861016001518961018001518a6101a00151600061189a565b61203e85856101c00151866101e00151876102000151886102200151611189565b61205985856102400151866102600151876102800151612e0d565b61207b8584600001518560200151866040015187606001518860800151610ec0565b600654825160208401516040808601516060870151608088015160a089015160c08a01519451632078091160e11b81526001600160a01b038e81166004830152978816602482015260448101969096526064860193909352608485019190915260a484015260c483015262ffffff1660e48201529116906340f012229061010401600060405180830381600087803b15801561211657600080fd5b505af115801561212a573d6000803e3d6000fd5b5050600e5460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908816925063095ea7b391506044016020604051808303816000875af1158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a69190613fc9565b505050505050565b6019602052816000526040600020818154811061187e57600080fd5b6121d3336114e0565b6122185760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b600e546001600160a01b038381169116148015906122445750600f546001600160a01b03828116911614155b61227c5760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610f6f565b600e80546001600160a01b039384166001600160a01b031991821617909155600f8054929093169116179055565b6001600160a01b03808616600090815260176020526040902054869116158015906122ee57506001600160a01b038181166000908152601760205260409020541633145b806123035750600d546001600160a01b031633145b61235d5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036123935760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036123c95760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036123ff5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036124355760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b9115806124c65750600081604001511180156124c65750806040015142105b6125125760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c166000908152602360209081526040808320600184529091529020541561257b57612544613118565b61257b5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b8a6010541115801561258f57508960115411155b801561259d57508860125411155b80156125ab57508760135411155b6125f75760405162461bcd60e51b815260206004820152600e60248201527f5469657220736574206572726f720000000000000000000000000000000000006044820152606401610f6f565b505050506001600160a01b039790971660009081526023602090815260408083206001845290915280822097909755600281528681209590955550506003835283832091909155600482529190205550565b612652336114e0565b6126975760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611520565b6126ca336114e0565b61270f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6001600160a01b0381166127655760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610f6f565b6001600160a01b03811633036127bd5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610f6f565b6127e77fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611520565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336117d6565b61281a336114e0565b61285f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b61286888612891565b6128728787612d01565b61287e85858585612c3a565b61288781612aa3565b5050505050505050565b61289a336114e0565b6128df5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6128ec60208201826139c9565b600580546001600160a01b0319166001600160a01b039290921691909117905561291c60408201602083016139c9565b600680546001600160a01b0319166001600160a01b039290921691909117905561294c60608201604083016139c9565b600780546001600160a01b0319166001600160a01b039290921691909117905561297c60808201606083016139c9565b600880546001600160a01b0319166001600160a01b03929092169190911790556129ac60a08201608083016139c9565b600980546001600160a01b0319166001600160a01b03929092169190911790556129dc60c0820160a083016139c9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055612a0c60e0820160c083016139c9565b600b80546001600160a01b039283166001600160a01b03199182168117909255600c80549091168217905560085460405163095ea7b360e01b81529216600483015260001960248301529063095ea7b3906044016020604051808303816000875af1158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190613fc9565b612aac336114e0565b612af15760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8060145403612b425760405162461bcd60e51b815260206004820152600e60248201527f73616d652064656c617954696d650000000000000000000000000000000000006044820152606401610f6f565b601455565b806001600160a01b038116612b835760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b612b8c336114e0565b612bd15760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b600d546001600160a01b03808416911603612c175760405162461bcd60e51b8152600401610f6f9060208082526004908201526373616d6560e01b604082015260600190565b50600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612c43336114e0565b612c885760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8284108015612c9657508183105b8015612ca157508082105b612ced5760405162461bcd60e51b815260206004820152600e60248201527f7469657220736574206572726f720000000000000000000000000000000000006044820152606401610f6f565b601093909355601191909155601255601355565b612d0a336114e0565b612d4f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8060ff168260ff1610612da45760405162461bcd60e51b815260206004820152600e60248201527f6e656564206d696e203c206d61780000000000000000000000000000000000006044820152606401610f6f565b600f80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b60ff948516027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1617600160a81b9290931691909102919091179055565b6001600160a01b0380851660009081526017602052604090205485911615801590612e5157506001600160a01b038181166000908152601760205260409020541633145b80612e665750600d546001600160a01b031633145b612ec05760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b8380600003612ef65760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b8380600003612f2c5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b8380600003612f625760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b0388166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015289911580612ff3575060008160400151118015612ff35750806040015142105b61303f5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038a166000908152601c602052604090206001810154156130a057613069613118565b6130a05760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b6001810199909955505050506006850193909355506007909201919091555050565b601a60205281600052604060002081815481106130de57600080fd5b90600052602060002001600091509150505481565b60008281526004602052604090206001015461310e816134f3565b611545838361359f565b600d546000906001600160a01b03161580159061313f5750600d546001600160a01b031633145b905090565b601b60205281600052604060002081815481106130de57600080fd5b6001600160a01b03808616600090815260176020526040902054869116158015906131a457506001600160a01b038181166000908152601760205260409020541633145b806131b95750600d546001600160a01b031633145b6132135760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036132495760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b848060000361327f5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036132b55760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036132eb5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b91158061337c57506000816040015111801561337c5750806040015142105b6133c85760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c1660009081526024602090815260408083206001845290915290205415613431576133fa613118565b6134315760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b878961343d8c8e613fb6565b6134479190613fb6565b6134519190613fb6565b612710146134a15760405162461bcd60e51b815260206004820152600e60248201527f53756d206e6565642031303030300000000000000000000000000000000000006044820152606401610f6f565b505050506001600160a01b039790971660009081526024602090815260408083206001845290915280822097909755600281528681209590955550506003835283832091909155600482529190205550565b6111868133613753565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661185e5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561355b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff161561185e5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161369b9190614077565b6000604051808303816000865af19150503d80600081146136d8576040519150601f19603f3d011682016040523d82523d6000602084013e6136dd565b606091505b50915091508180156137075750805115806137075750808060200190518101906137079190613fc9565b6121a65760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610f6f565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661185e57613786816137c8565b6137918360206137da565b6040516020016137a2929190614093565b60408051601f198184030181529082905262461bcd60e51b8252610f6f91600401614114565b6060610eba6001600160a01b03831660145b606060006137e9836002614004565b6137f4906002613fb6565b67ffffffffffffffff81111561380c5761380c613ba0565b6040519080825280601f01601f191660200182016040528015613836576020820181803683370190505b509050600360fc1b816000815181106138515761385161403d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138805761388061403d565b60200101906001600160f81b031916908160001a90535060006138a4846002614004565b6138af906001613fb6565b90505b6001811115613934577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138f0576138f061403d565b1a60f81b8282815181106139065761390661403d565b60200101906001600160f81b031916908160001a90535060049490941c9361392d81614147565b90506138b2565b508315611d775760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f6f565b60006020828403121561399557600080fd5b81356001600160e01b031981168114611d7757600080fd5b80356001600160a01b03811681146139c457600080fd5b919050565b6000602082840312156139db57600080fd5b611d77826139ad565b803560ff811681146139c457600080fd5b60008060408385031215613a0857600080fd5b613a11836139ad565b9150613a1f602084016139e4565b90509250929050565b60008060008060008060c08789031215613a4157600080fd5b613a4a876139ad565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215613a8557600080fd5b613a8e836139ad565b9150613a1f602084016139ad565b600080600080600060a08688031215613ab457600080fd5b613abd866139ad565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215613af057600080fd5b5035919050565b60008060408385031215613b0a57600080fd5b82359150613a1f602084016139ad565b60008060408385031215613b2d57600080fd5b613b36836139ad565b946020939093013593505050565b600080600080600080600080610100898b031215613b6157600080fd5b613b6a896139ad565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613be757634e487b7160e01b600052604160045260246000fd5b60405290565b6040516102a0810167ffffffffffffffff81118282101715613be757634e487b7160e01b600052604160045260246000fd5b600060a08284031215613c3157600080fd5b60405160a0810181811067ffffffffffffffff82111715613c6257634e487b7160e01b600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b600060e08284031215613caf57600080fd5b613cb7613bb6565b9050613cc2826139ad565b81526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013562ffffff81168114613d0c57600080fd5b60c082015292915050565b600080600080848603610440811215613d2f57600080fd5b613d38866139ad565b94506102a080601f1983011215613d4e57600080fd5b613d56613bed565b91506020870135825260408701356020830152606087013560408301526080870135606083015260a0870135608083015260c087013560a083015260e087013560c08301526101008088013560e084015261012080890135828501526101409150818901358185015250610160808901358285015261018091508189013581850152506101a080890135828501526101c091508189013581850152506101e08089013582850152610200915081890135818501525061022080890135828501526102409150818901358185015250610260808901358285015261028091508189013581850152508188013581840152505080935050613e59866102c08701613c1f565b9150613e69866103608701613c9d565b905092959194509250565b8060e08101831015610eba57600080fd5b6000806000806000806000806101c0898b031215613ea257600080fd5b613eac8a8a613e74565b9750613eba60e08a016139e4565b9650613ec96101008a016139e4565b979a9699509697610120810135975061014081013596610160820135965061018082013595506101a0909101359350915050565b600060e08284031215613f0f57600080fd5b611d778383613e74565b60008060008060808587031215613f2f57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215613f5e57600080fd5b613a11836139e4565b60008060008060808587031215613f7d57600080fd5b613f86856139ad565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610eba57610eba613fa0565b600060208284031215613fdb57600080fd5b81518015158114611d7757600080fd5b600060208284031215613ffd57600080fd5b5051919050565b8082028115828204841417610eba57610eba613fa0565b60008261403857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561406e578181015183820152602001614056565b50506000910152565b60008251614089818460208701614053565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140cb816017850160208801614053565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614108816028840160208801614053565b01602801949350505050565b6020815260008251806020840152614133816040850160208701614053565b601f01601f19169190910160400192915050565b60008161415657614156613fa0565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104de5760003560e01c8063768b821f11610286578063ae1f6aaf1161016b578063d13da444116100e3578063e0af361611610097578063ea28ef181161007c578063ea28ef1814610e5b578063f3b08cb914610e63578063f5a96ccf14610e7657600080fd5b8063e0af361614610e1a578063e1ff729b14610e2d57600080fd5b8063d7b0b29d116100c8578063d7b0b29d14610d3c578063d97830b114610dac578063dc560fcd14610e1157600080fd5b8063d13da44414610cfe578063d547741f14610d2957600080fd5b8063c0f22d4b1161013a578063cc48b9471161011f578063cc48b94714610cb8578063cf437a8f14610ccb578063d01481a114610ceb57600080fd5b8063c0f22d4b14610c92578063c6bbd5a714610ca557600080fd5b8063ae1f6aaf14610bb7578063b005ed9114610bca578063b18aaf5814610c56578063b911135f14610c6957600080fd5b806391d14854116101fe578063a217fddf116101cd578063a4182343116101b2578063a418234314610b7e578063ac3c467614610b91578063ae148b8714610ba457600080fd5b8063a217fddf14610b62578063a389595f14610b6a57600080fd5b806391d1485414610ad557806397d7859514610b0e5780639f32b29a14610b2e5780639f87b77f14610b5957600080fd5b80637fc46ba8116102555780638951ed181161023a5780638951ed1814610a9457806389f395de14610aa75780638d62d94914610aba57600080fd5b80637fc46ba814610a0357806389293f6514610a2c57600080fd5b8063768b821f146109cb578063790f317f146109d45780637ce4166b146109e75780637e2eee53146109fa57600080fd5b8063466c01b8116103c757806355d6d39b1161033f57806370480275116102f3578063735de9f7116102d8578063735de9f71461097e57806375829def1461099157806375b238fc146109a457600080fd5b80637048027514610958578063708666ad1461096b57600080fd5b80635bb04f70116103245780635bb04f701461092557806363a8fd891461093857806366e7cb921461094557600080fd5b806355d6d39b146108e75780635b19e2941461091257600080fd5b806351e8152a1161039657806352351e851161037b57806352351e851461089e57806353ad4046146108b1578063550d01a3146108c457600080fd5b806351e8152a1461088257806351ebde6d1461089557600080fd5b8063466c01b81461082057806349f5f564146108335780634e6c44661461084657806350d2a2761461085957600080fd5b8063229852461161045a5780632ac9bab61161042957806333efca3d1161040e57806333efca3d146107ab57806335b9ac66146107fa57806336568abe1461080d57600080fd5b80632ac9bab61461076d5780632f2ff15d1461079857600080fd5b806322985246146106fd57806323abde1114610724578063248a9ca31461073757806324d7806c1461075a57600080fd5b806312269758116104b15780631785f53c116104965780631785f53c1461065e5780631916e534146106715780631c53f256146106d757600080fd5b80631226975814610610578063123411181461064957600080fd5b806301ffc9a7146104e3578063089fe6aa1461050b57806308ac3fcb146105285780630b7459eb146105e5575b600080fd5b6104f66104f1366004613983565b610e89565b60405190151581526020015b60405180910390f35b610514610bb881565b60405162ffffff9091168152602001610502565b6105946105363660046139c9565b601d6020526000908152604090208054600182015460028084015460038501546004860154600587015460068801546007909801549697959693959294919390929181900b9060ff630100000082048116916401000000009004168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260020b60e08401521515610100830152151561012082015261014001610502565b6006546105f8906001600160a01b031681565b6040516001600160a01b039091168152602001610502565b61063b61061e3660046139f5565b602460209081526000928352604080842090915290825290205481565b604051908152602001610502565b61065c610657366004613a28565b610ec0565b005b61065c61066c3660046139c9565b61110e565b6106b561067f366004613a72565b6022602090815260009283526040808420909152908252902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610502565b600f546106eb90600160a81b900460ff1681565b60405160ff9091168152602001610502565b61063b7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b61065c610732366004613a9c565b611189565b61063b610745366004613ade565b60009081526004602052604090206001015490565b6104f66107683660046139c9565b6114e0565b61063b61077b3660046139f5565b602760209081526000928352604080842090915290825290205481565b61065c6107a6366004613af7565b611520565b6107e36107b9366004613a72565b60216020908152600092835260408084209091529082529020805460019091015460ff9091169082565b604080519215158352602083019190915201610502565b61065c610808366004613a72565b61154a565b61065c61081b366004613af7565b6117d6565b6105f861082e366004613b1a565b611862565b61065c610841366004613b44565b61189a565b6009546105f8906001600160a01b031681565b6105f8610867366004613983565b6003602052600090815260409020546001600160a01b031681565b6104f6610890366004613a72565b611d41565b61063b60125481565b600d546105f8906001600160a01b031681565b61065c6108bf366004613d17565b611d7e565b6104f66108d23660046139c9565b60026020526000908152604090205460ff1681565b61063b6108f53660046139f5565b602560209081526000928352604080842090915290825290205481565b6105f8610920366004613b1a565b6121ae565b61065c610933366004613a72565b6121ca565b6000546104f69060ff1681565b61065c610953366004613a9c565b6122aa565b61065c6109663660046139c9565b612649565b6007546105f8906001600160a01b031681565b6008546105f8906001600160a01b031681565b61065c61099f3660046139c9565b6126c1565b61063b7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b61063b60115481565b61065c6109e2366004613e85565b612811565b61065c6109f5366004613efd565b612891565b61063b60145481565b6105f8610a113660046139c9565b6017602052600090815260409020546001600160a01b031681565b610a70610a3a366004613a72565b60208080526000928352604080842090915290825290208054600182015460029092015460ff8083169361010090930416919084565b60408051941515855260ff9093166020850152918301526060820152608001610502565b61065c610aa2366004613ade565b612aa3565b600a546105f8906001600160a01b031681565b6105f873c4a11aaf6ea915ed7ac194161d2fc9384f15bff281565b6104f6610ae3366004613af7565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61063b610b1c3660046139c9565b60166020526000908152604090205481565b61063b610b3c3660046139f5565b602660209081526000928352604080842090915290825290205481565b61063b60105481565b61063b600081565b600f546106eb90600160a01b900460ff1681565b61065c610b8c3660046139c9565b612b47565b61065c610b9f366004613f19565b612c3a565b61065c610bb2366004613f4b565b612d01565b600e546105f8906001600160a01b031681565b610c1b610bd83660046139c9565b601c602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610502565b61065c610c64366004613f67565b612e0d565b6105f8610c77366004613ade565b6001602052600090815260409020546001600160a01b031681565b61063b610ca0366004613b1a565b6130c2565b6005546105f8906001600160a01b031681565b600b546105f8906001600160a01b031681565b601554610cd89060020b81565b60405160029190910b8152602001610502565b600f546105f8906001600160a01b031681565b61063b610d0c3660046139f5565b602360209081526000928352604080842090915290825290205481565b61065c610d37366004613af7565b6130f3565b610d7f610d4a3660046139c9565b601f60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610502565b610de9610dba3660046139c9565b601e60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610502565b61063b60135481565b600c546105f8906001600160a01b031681565b6104f6610e3b3660046139c9565b6001600160a01b0390811660009081526017602052604090205416151590565b6104f6613118565b61063b610e71366004613b1a565b613144565b61065c610e84366004613a9c565b613160565b60006001600160e01b03198216637965db0b60e01b1480610eba57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0380871660009081526017602052604090205487911615801590610f0457506001600160a01b038181166000908152601760205260409020541633145b80610f195750600d546001600160a01b031633145b610f785760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b60648201526084015b60405180910390fd5b8580600003610fae5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b0388166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528991158061103f57506000816040015111801561103f5750806040015142105b61108b5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038a166000908152601e602052604090208054156110e9576110b2613118565b6110e95760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b9889555050505060018501939093556002840191909155600383015560049091015550565b611117336114e0565b61115c5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826117d6565b50565b6001600160a01b03808616600090815260176020526040902054869116158015906111cd57506001600160a01b038181166000908152601760205260409020541633145b806111e25750600d546001600160a01b031633145b61123c5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036112725760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036112a85760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036112de5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036113145760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b9115806113a55750600081604001511180156113a55750806040015142105b6113f15760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c166000908152601c6020526040902080541561145457611418613118565b61144f5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b611458565b4281555b60145481548d9161146891613fb6565b106114b55760405162461bcd60e51b815260206004820152601360248201527f736e617073686f74206e656564206c61746572000000000000000000000000006044820152606401610f6f565b600281019b909b55505050506003870195909555505060048401919091556005909201919091555050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff16610eba565b60008281526004602052604090206001015461153b816134f3565b61154583836134fd565b505050565b816001600160a01b0381166115865760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b816001600160a01b0381166115c25760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b600d546001600160a01b0316158015906115e65750600d546001600160a01b031633145b6116325760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74206c3250726f6a6563744d616e6167657200006044820152606401610f6f565b6001600160a01b038481166000908152601760205260409020548185169116036116875760405162461bcd60e51b8152600401610f6f9060208082526004908201526373616d6560e01b604082015260600190565b6001600160a01b038481166000818152601760205260409081902080546001600160a01b03191687851690811790915560065491516328f40a9560e11b815260048101939093526024830152909116906351e8152a90604401602060405180830381865afa1580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190613fc9565b61178d57600654604051631adcd63360e11b81526001600160a01b0386811660048301528581166024830152909116906335b9ac6690604401600060405180830381600087803b15801561177457600080fd5b505af1158015611788573d6000803e3d6000fd5b505050505b604080516001600160a01b038087168252851660208201527fb00bb4c229aff6156cc8e2c767c571665e1927c09fe083ec055956a5a4026193910160405180910390a150505050565b6001600160a01b03811633146118545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610f6f565b61185e828261359f565b5050565b6018602052816000526040600020818154811061187e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b03808916600090815260176020526040902054899116158015906118de57506001600160a01b038181166000908152601760205260409020541633145b806118f35750600d546001600160a01b031633145b61194d5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b6001600160a01b0389166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528a9115806119de5750600081604001511180156119de5750806040015142105b611a2a5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6040516370a0823160e01b81523060048201526000906001600160a01b038d16906370a0823190602401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190613feb565b905080600003611b3f57600d54611ad4906001600160a01b031630611aba8d8f613fb6565b8f6001600160a01b0316613622909392919063ffffffff16565b6040516370a0823160e01b81523060048201526001600160a01b038d16906370a0823190602401602060405180830381865afa158015611b18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3c9190613feb565b90505b80611b4a8b8d613fb6565b11158015611b60575080670de0b6b3a764000011155b611bac5760405162461bcd60e51b815260206004820152600f60248201527f6e6f7420696e70757420746f6b656e00000000000000000000000000000000006044820152606401610f6f565b600f54600160a81b900460ff168611801590611bd45750600f54600160a01b900460ff168610155b611c205760405162461bcd60e51b815260206004820152601360248201527f6e65656420746f20736574206d696e2c6d6178000000000000000000000000006044820152606401610f6f565b88611c2b8989614004565b611c35919061401b565b611c3f8b8d613fb6565b1015611c8d5760405162461bcd60e51b815260206004820152600c60248201527f6f766572206861726463617000000000000000000000000000000000000000006044820152606401610f6f565b6001600160a01b038c166000908152601d60205260409020805415611ceb57611cb4613118565b611ceb5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b8b8155600181018b905560028082018b9055600382018a905560048201899055600582018890556007820154900b600003611d325760078101805462ffffff191660121790555b50505050505050505050505050565b60006001600160a01b03821615801590611d7757506001600160a01b038381166000908152601760205260409020548116908316145b9392505050565b6001600160a01b0380851660009081526017602052604090205485911615801590611dc257506001600160a01b038181166000908152601760205260409020541633145b80611dd75750600d546001600160a01b031633145b611e315760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b836101e00151846101c00151108015611e535750836102000151846101e00151105b8015611e685750836102200151846102000151105b8015611e7d5750836102600151846102200151105b8015611e925750836102800151846102600151105b611ede5760405162461bcd60e51b815260206004820152600d60248201527f526f756e6454696d6520657272000000000000000000000000000000000000006044820152606401610f6f565b8260400151846102800151108015611efd575082606001518360400151105b611f495760405162461bcd60e51b815260206004820152600d60248201527f636c61696d54696d6520657272000000000000000000000000000000000000006044820152606401610f6f565b8160600151846102800151108015611f68575081608001518260600151105b611fb45760405162461bcd60e51b815260206004820152601460248201527f56657374696e67436c61696d54696d65206572720000000000000000000000006044820152606401610f6f565b611fd18585600001518660200151876040015188606001516122aa565b611fee8585608001518660a001518760c001518860e00151613160565b61201d858561010001518661012001518761014001518861016001518961018001518a6101a00151600061189a565b61203e85856101c00151866101e00151876102000151886102200151611189565b61205985856102400151866102600151876102800151612e0d565b61207b8584600001518560200151866040015187606001518860800151610ec0565b600654825160208401516040808601516060870151608088015160a089015160c08a01519451632078091160e11b81526001600160a01b038e81166004830152978816602482015260448101969096526064860193909352608485019190915260a484015260c483015262ffffff1660e48201529116906340f012229061010401600060405180830381600087803b15801561211657600080fd5b505af115801561212a573d6000803e3d6000fd5b5050600e5460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152908816925063095ea7b391506044016020604051808303816000875af1158015612182573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a69190613fc9565b505050505050565b6019602052816000526040600020818154811061187e57600080fd5b6121d3336114e0565b6122185760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b600e546001600160a01b038381169116148015906122445750600f546001600160a01b03828116911614155b61227c5760405162461bcd60e51b815260206004820152600960248201526839b0b6b29030b2323960b91b6044820152606401610f6f565b600e80546001600160a01b039384166001600160a01b031991821617909155600f8054929093169116179055565b6001600160a01b03808616600090815260176020526040902054869116158015906122ee57506001600160a01b038181166000908152601760205260409020541633145b806123035750600d546001600160a01b031633145b61235d5760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036123935760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036123c95760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036123ff5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036124355760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b9115806124c65750600081604001511180156124c65750806040015142105b6125125760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c166000908152602360209081526040808320600184529091529020541561257b57612544613118565b61257b5760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b8a6010541115801561258f57508960115411155b801561259d57508860125411155b80156125ab57508760135411155b6125f75760405162461bcd60e51b815260206004820152600e60248201527f5469657220736574206572726f720000000000000000000000000000000000006044820152606401610f6f565b505050506001600160a01b039790971660009081526023602090815260408083206001845290915280822097909755600281528681209590955550506003835283832091909155600482529190205550565b612652336114e0565b6126975760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611520565b6126ca336114e0565b61270f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6001600160a01b0381166127655760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f206164647265737300000000000000006044820152606401610f6f565b6001600160a01b03811633036127bd5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e000000000000000000006044820152606401610f6f565b6127e77fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282611520565b6111867fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336117d6565b61281a336114e0565b61285f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b61286888612891565b6128728787612d01565b61287e85858585612c3a565b61288781612aa3565b5050505050505050565b61289a336114e0565b6128df5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b6128ec60208201826139c9565b600580546001600160a01b0319166001600160a01b039290921691909117905561291c60408201602083016139c9565b600680546001600160a01b0319166001600160a01b039290921691909117905561294c60608201604083016139c9565b600780546001600160a01b0319166001600160a01b039290921691909117905561297c60808201606083016139c9565b600880546001600160a01b0319166001600160a01b03929092169190911790556129ac60a08201608083016139c9565b600980546001600160a01b0319166001600160a01b03929092169190911790556129dc60c0820160a083016139c9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055612a0c60e0820160c083016139c9565b600b80546001600160a01b039283166001600160a01b03199182168117909255600c80549091168217905560085460405163095ea7b360e01b81529216600483015260001960248301529063095ea7b3906044016020604051808303816000875af1158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190613fc9565b612aac336114e0565b612af15760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8060145403612b425760405162461bcd60e51b815260206004820152600e60248201527f73616d652064656c617954696d650000000000000000000000000000000000006044820152606401610f6f565b601455565b806001600160a01b038116612b835760405162461bcd60e51b81526020600482015260026024820152612d1960f11b6044820152606401610f6f565b612b8c336114e0565b612bd15760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b600d546001600160a01b03808416911603612c175760405162461bcd60e51b8152600401610f6f9060208082526004908201526373616d6560e01b604082015260600190565b50600d80546001600160a01b0319166001600160a01b0392909216919091179055565b612c43336114e0565b612c885760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8284108015612c9657508183105b8015612ca157508082105b612ced5760405162461bcd60e51b815260206004820152600e60248201527f7469657220736574206572726f720000000000000000000000000000000000006044820152606401610f6f565b601093909355601191909155601255601355565b612d0a336114e0565b612d4f5760405162461bcd60e51b8152602060048201526022602482015260008051602061415f83398151915260448201526134b760f11b6064820152608401610f6f565b8060ff168260ff1610612da45760405162461bcd60e51b815260206004820152600e60248201527f6e656564206d696e203c206d61780000000000000000000000000000000000006044820152606401610f6f565b600f80547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b60ff948516027fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1617600160a81b9290931691909102919091179055565b6001600160a01b0380851660009081526017602052604090205485911615801590612e5157506001600160a01b038181166000908152601760205260409020541633145b80612e665750600d546001600160a01b031633145b612ec05760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b8380600003612ef65760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b8380600003612f2c5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b8380600003612f625760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b0388166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e082015289911580612ff3575060008160400151118015612ff35750806040015142105b61303f5760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038a166000908152601c602052604090206001810154156130a057613069613118565b6130a05760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b6001810199909955505050506006850193909355506007909201919091555050565b601a60205281600052604060002081815481106130de57600080fd5b90600052602060002001600091509150505481565b60008281526004602052604090206001015461310e816134f3565b611545838361359f565b600d546000906001600160a01b03161580159061313f5750600d546001600160a01b031633145b905090565b601b60205281600052604060002081815481106130de57600080fd5b6001600160a01b03808616600090815260176020526040902054869116158015906131a457506001600160a01b038181166000908152601760205260409020541633145b806131b95750600d546001600160a01b031633145b6132135760405162461bcd60e51b815260206004820152602560248201527f63616c6c6572206973206e6f742061207661756c7441646d696e204f66206c326044820152642a37b5b2b760d91b6064820152608401610f6f565b84806000036132495760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b848060000361327f5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036132b55760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b84806000036132eb5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b6044820152606401610f6f565b6001600160a01b038a166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e08201528b91158061337c57506000816040015111801561337c5750806040015142105b6133c85760405162461bcd60e51b815260206004820152601c60248201527f6e6f74206265666f726577686974654c697374537461727454696d65000000006044820152606401610f6f565b6001600160a01b038c1660009081526024602090815260408083206001845290915290205415613431576133fa613118565b6134315760405162461bcd60e51b81526020600482015260086024820152676f6e6c792044414f60c01b6044820152606401610f6f565b878961343d8c8e613fb6565b6134479190613fb6565b6134519190613fb6565b612710146134a15760405162461bcd60e51b815260206004820152600e60248201527f53756d206e6565642031303030300000000000000000000000000000000000006044820152606401610f6f565b505050506001600160a01b039790971660009081526024602090815260408083206001845290915280822097909755600281528681209590955550506003835283832091909155600482529190205550565b6111868133613753565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661185e5760008281526004602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561355b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff161561185e5760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052915160009283929088169161369b9190614077565b6000604051808303816000865af19150503d80600081146136d8576040519150601f19603f3d011682016040523d82523d6000602084013e6136dd565b606091505b50915091508180156137075750805115806137075750808060200190518101906137079190613fc9565b6121a65760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610f6f565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1661185e57613786816137c8565b6137918360206137da565b6040516020016137a2929190614093565b60408051601f198184030181529082905262461bcd60e51b8252610f6f91600401614114565b6060610eba6001600160a01b03831660145b606060006137e9836002614004565b6137f4906002613fb6565b67ffffffffffffffff81111561380c5761380c613ba0565b6040519080825280601f01601f191660200182016040528015613836576020820181803683370190505b509050600360fc1b816000815181106138515761385161403d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138805761388061403d565b60200101906001600160f81b031916908160001a90535060006138a4846002614004565b6138af906001613fb6565b90505b6001811115613934577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106138f0576138f061403d565b1a60f81b8282815181106139065761390661403d565b60200101906001600160f81b031916908160001a90535060049490941c9361392d81614147565b90506138b2565b508315611d775760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f6f565b60006020828403121561399557600080fd5b81356001600160e01b031981168114611d7757600080fd5b80356001600160a01b03811681146139c457600080fd5b919050565b6000602082840312156139db57600080fd5b611d77826139ad565b803560ff811681146139c457600080fd5b60008060408385031215613a0857600080fd5b613a11836139ad565b9150613a1f602084016139e4565b90509250929050565b60008060008060008060c08789031215613a4157600080fd5b613a4a876139ad565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b60008060408385031215613a8557600080fd5b613a8e836139ad565b9150613a1f602084016139ad565b600080600080600060a08688031215613ab457600080fd5b613abd866139ad565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215613af057600080fd5b5035919050565b60008060408385031215613b0a57600080fd5b82359150613a1f602084016139ad565b60008060408385031215613b2d57600080fd5b613b36836139ad565b946020939093013593505050565b600080600080600080600080610100898b031215613b6157600080fd5b613b6a896139ad565b9a60208a01359a5060408a013599606081013599506080810135985060a0810135975060c0810135965060e00135945092505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613be757634e487b7160e01b600052604160045260246000fd5b60405290565b6040516102a0810167ffffffffffffffff81118282101715613be757634e487b7160e01b600052604160045260246000fd5b600060a08284031215613c3157600080fd5b60405160a0810181811067ffffffffffffffff82111715613c6257634e487b7160e01b600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b600060e08284031215613caf57600080fd5b613cb7613bb6565b9050613cc2826139ad565b81526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013562ffffff81168114613d0c57600080fd5b60c082015292915050565b600080600080848603610440811215613d2f57600080fd5b613d38866139ad565b94506102a080601f1983011215613d4e57600080fd5b613d56613bed565b91506020870135825260408701356020830152606087013560408301526080870135606083015260a0870135608083015260c087013560a083015260e087013560c08301526101008088013560e084015261012080890135828501526101409150818901358185015250610160808901358285015261018091508189013581850152506101a080890135828501526101c091508189013581850152506101e08089013582850152610200915081890135818501525061022080890135828501526102409150818901358185015250610260808901358285015261028091508189013581850152508188013581840152505080935050613e59866102c08701613c1f565b9150613e69866103608701613c9d565b905092959194509250565b8060e08101831015610eba57600080fd5b6000806000806000806000806101c0898b031215613ea257600080fd5b613eac8a8a613e74565b9750613eba60e08a016139e4565b9650613ec96101008a016139e4565b979a9699509697610120810135975061014081013596610160820135965061018082013595506101a0909101359350915050565b600060e08284031215613f0f57600080fd5b611d778383613e74565b60008060008060808587031215613f2f57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215613f5e57600080fd5b613a11836139e4565b60008060008060808587031215613f7d57600080fd5b613f86856139ad565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610eba57610eba613fa0565b600060208284031215613fdb57600080fd5b81518015158114611d7757600080fd5b600060208284031215613ffd57600080fd5b5051919050565b8082028115828204841417610eba57610eba613fa0565b60008261403857634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561406e578181015183820152602001614056565b50506000910152565b60008251614089818460208701614053565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140cb816017850160208801614053565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614108816028840160208801614053565b01602801949350505050565b6020815260008251806020840152614133816040850160208701614053565b601f01601f19169190910160400192915050565b60008161415657614156613fa0565b50600019019056fe41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646da164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10792,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10796,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10800,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10804,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5824,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "quoter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5826,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "vestingFund",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5828,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "liquidityVault",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5830,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5832,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "lockTOS",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5834,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tos",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5836,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "ton",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5839,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "_WETH",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IWETH)2037"
      },
      {
        "astId": 5841,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "l2ProjectManager",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5843,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "l2Bridge",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5845,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "l1burnVault",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5847,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "minPer",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 5849,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "maxPer",
        "offset": 21,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 5851,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "stanTier1",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5853,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "stanTier2",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5855,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "stanTier3",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5857,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "stanTier4",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5859,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "delayTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5861,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "changeTick",
        "offset": 0,
        "slot": "21",
        "type": "t_int24"
      },
      {
        "astId": 5864,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "free",
        "offset": 3,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 5868,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "totalDepositAmount",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5872,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "vaultAdminOfToken",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5877,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "depositors",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5882,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "whitelists",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5887,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "claimTimes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5892,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "claimPercents",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5897,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "timeInfo",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_struct(TokenTimeManage)9089_storage)"
      },
      {
        "astId": 5902,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "manageInfo",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_struct(TokenSaleManage)9110_storage)"
      },
      {
        "astId": 5907,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "claimInfo",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_struct(TokenSaleClaim)9121_storage)"
      },
      {
        "astId": 5912,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "saleInfo",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_struct(TokenSaleInfo)9134_storage)"
      },
      {
        "astId": 5919,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "user1rd",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo1rd)9143_storage))"
      },
      {
        "astId": 5926,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "user2rd",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo2rd)9148_storage))"
      },
      {
        "astId": 5933,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "userClaim",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserClaim)9157_storage))"
      },
      {
        "astId": 5939,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tiers",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5945,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tiersPercents",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5951,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tiersWhiteList",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5957,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tiersCalculAccount",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5963,
        "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
        "label": "tiers1stAccount",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IWETH)2037": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserClaim)9157_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserClaim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserClaim)9157_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo1rd)9143_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserInfo1rd))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo1rd)9143_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo2rd)9148_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserInfo2rd))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo2rd)9148_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenSaleClaim)9121_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleClaim)9121_storage"
      },
      "t_mapping(t_address,t_struct(TokenSaleInfo)9134_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleInfo)9134_storage"
      },
      "t_mapping(t_address,t_struct(TokenSaleManage)9110_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleManage)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleManage)9110_storage"
      },
      "t_mapping(t_address,t_struct(TokenTimeManage)9089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenTimeManage)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenTimeManage)9089_storage"
      },
      "t_mapping(t_address,t_struct(UserClaim)9157_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(UserClaim)9157_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo1rd)9143_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserInfo1rd)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo1rd)9143_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo2rd)9148_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserInfo2rd)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo2rd)9148_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenSaleClaim)9121_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleClaim",
        "members": [
          {
            "astId": 9112,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "totalClaimCounts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9114,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "firstClaimPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9116,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "firstClaimTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9118,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "secondClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9120,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "claimInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenSaleInfo)9134_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleInfo",
        "members": [
          {
            "astId": 9123,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "total1rdSaleAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9125,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "total1rdTONAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9127,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "totalUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9129,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "total1rdUsers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9131,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "total2rdUsers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9133,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "total2rdUsersClaim",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TokenSaleManage)9110_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleManage",
        "members": [
          {
            "astId": 9091,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "set1rdTokenAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9093,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "set2rdTokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9095,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "saleTokenPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9097,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "tonPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9099,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "hardCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9101,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "changeTOS",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9103,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "remainTON",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9105,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "changeTick",
            "offset": 0,
            "slot": "7",
            "type": "t_int24"
          },
          {
            "astId": 9107,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "exchangeTOS",
            "offset": 3,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9109,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "adminWithdraw",
            "offset": 4,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(TokenTimeManage)9089_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenTimeManage",
        "members": [
          {
            "astId": 9074,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "deployTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9076,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "snapshot",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9078,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "whiteListStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9080,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "whiteListEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9082,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "round1StartTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9084,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "round1EndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9086,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "round2StartTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9088,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "round2EndTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserClaim)9157_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserClaim",
        "members": [
          {
            "astId": 9150,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "refund",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9152,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "claimAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9154,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "refundAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9156,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "latestClaimedRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo1rd)9143_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserInfo1rd",
        "members": [
          {
            "astId": 9136,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "join",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9138,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "tier",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9140,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "payAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9142,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "saleAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo2rd)9148_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserInfo2rd",
        "members": [
          {
            "astId": 9145,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "join",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9147,
            "contract": "contracts/L2/vaults/L2PublicSaleProxy.sol:L2PublicSaleProxy",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}