{
  "address": "0x2038550e3c06466De0aa28FBa8659822141EBa7A",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "AddedWhiteList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "ExchangeSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExclusiveSaled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInitializer",
          "type": "address"
        }
      ],
      "name": "SetInitializer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetVaultAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "calcul1RoundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_round",
          "type": "uint256"
        }
      ],
      "name": "calculClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculOpenSaleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculPayToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculSaleToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "calculTier",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "name": "calculTierAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "changeTick",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "depositWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "exchangeWTONtoTOS",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "hardcapCalcul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1burnVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Bridge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTOS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "manageInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "set1rdTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "set2rdTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tonPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "changeTOS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainTON",
          "type": "uint256"
        },
        {
          "internalType": "int24",
          "name": "changeTick",
          "type": "int24"
        },
        {
          "internalType": "bool",
          "name": "exchangeTOS",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "adminWithdraw",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPer",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "openSaleUserAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_realPayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_realSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "round1Sale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "round2Sale",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "saleInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total1rdSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total1rdTONAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total1rdUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total2rdUsers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "total2rdUsersClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stanTier4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiers1stAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersCalculAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersPercents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tiersWhiteList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "timeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deployTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "snapshot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whiteListStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "whiteListEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round1StartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round1EndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round2StartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round2EndTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tos",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "totalExpectOpenSaleAmountView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "totalOpenPurchasedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "totalOpenSaleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "totalRound1NonSaleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalSaleUserAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_realPayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_realSaleAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2token",
          "type": "address"
        }
      ],
      "name": "totalWhitelists",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user1rd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "join",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "payAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "saleAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user2rd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "join",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "refund",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refundAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestClaimedRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAdminOfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelists",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wton",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7bf8d43907ce0adef91f01723a76630d50cfd6815fcba561dc3143a7c0a6e6c",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x2038550e3c06466De0aa28FBa8659822141EBa7A",
    "transactionIndex": 1,
    "gasUsed": "4780839",
    "logsBloom": "0x
    "blockHash": "0x2777e00ab86377e8d46433460c97f1afe290c49cf138359b11b4903460fe7430",
    "transactionHash": "0xa7bf8d43907ce0adef91f01723a76630d50cfd6815fcba561dc3143a7c0a6e6c",
    "logs": [],
    "blockNumber": 72599,
    "cumulativeGasUsed": "4833328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a39f960ad7ae7b0e89cbcab2979ae2a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"DepositWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"ExchangeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExclusiveSaled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInitializer\",\"type\":\"address\"}],\"name\":\"SetInitializer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetVaultAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calcul1RoundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"calculClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculOpenSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculPayToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculSaleToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"calculTierAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"depositWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"exchangeWTONtoTOS\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"hardcapCalcul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1burnVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTOS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manageInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"set1rdTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"set2rdTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainTON\",\"type\":\"uint256\"},{\"internalType\":\"int24\",\"name\":\"changeTick\",\"type\":\"int24\"},{\"internalType\":\"bool\",\"name\":\"exchangeTOS\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"adminWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPer\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"openSaleUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_realPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_realSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"round1Sale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"round2Sale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"saleInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total1rdSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1rdTONAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1rdUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2rdUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2rdUsersClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stanTier4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiers1stAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersCalculAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tiersWhiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deployTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whiteListEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round1StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round1EndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round2StartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round2EndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"totalExpectOpenSaleAmountView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"totalOpenPurchasedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"totalOpenSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"totalRound1NonSaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalSaleUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_realPayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_realSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2token\",\"type\":\"address\"}],\"name\":\"totalWhitelists\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user1rd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2rd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"join\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestClaimedRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAdminOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelists\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wton\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/vaults/L2PublicSaleVault.sol\":\"L2PublicSaleVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport './IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x1e497870cfed5f7c7b0f856284dff785ac4628b26aa8adb77c4fad9baa71613f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/L2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint256 wad) external;\\n    function approve(address guy, uint wad) external returns (bool);\\n}\",\"keccak256\":\"0x012497b9495c2b6e8f9dc1674095bdef1d32626ff91ed83c0f65d73c6b0b85f7\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2PublicSaleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../libraries/SafeERC20.sol\\\";\\n\\nimport { ProxyStorage } from \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport { L2PublicSaleVaultStorage } from \\\"./L2PublicSaleVaultStorage.sol\\\";\\nimport \\\"../../libraries/LibPublicSaleVault.sol\\\";\\n\\nimport \\\"../interfaces/ISwapRouter.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IILockTOS {\\n    function balanceOfAt(address _addr, uint256 _timestamp)\\n        external\\n        view\\n        returns (uint256 balance);\\n}\\n\\ninterface IIVestingPublicFundAction {\\n    function funding(address l2token) external payable;\\n}\\n\\ninterface IIL2ERC20Bridge {\\n    function withdrawTo(\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external;\\n}\\n\\ncontract L2PublicSaleVault is\\n    ProxyStorage,\\n    AccessibleCommon,\\n    L2PublicSaleVaultStorage\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== USING BUYER ========== */\\n    function addWhiteList(\\n        address _l2token\\n    )\\n        external\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n        require(\\n            block.timestamp >= timeInfos.whiteListStartTime,\\n            \\\"not whitelistTime\\\"\\n        );\\n        require(\\n            block.timestamp < timeInfos.whiteListEndTime,\\n            \\\"end whitelistTime\\\"\\n        );\\n        uint8 tier = calculTier(_l2token,msg.sender);\\n        //if tier 0 is don't have sTOS\\n        require(tier >= 1, \\\"need to more sTOS\\\");\\n        LibPublicSaleVault.UserInfo1rd storage user1rds = user1rd[_l2token][msg.sender];\\n\\n        require(user1rds.join != true, \\\"already attended\\\");\\n\\n        whitelists[_l2token].push(msg.sender);\\n\\n        user1rds.join = true;\\n        user1rds.tier = tier;\\n\\n        tiersWhiteList[_l2token][tier] = tiersWhiteList[_l2token][tier]+(1);\\n\\n        if (tier == 4) {\\n            tiersCalculAccount[_l2token][4] = tiersCalculAccount[_l2token][4]+(1);\\n            tiersCalculAccount[_l2token][3] = tiersCalculAccount[_l2token][3]+(1);\\n            tiersCalculAccount[_l2token][2] = tiersCalculAccount[_l2token][2]+(1);\\n            tiersCalculAccount[_l2token][1] = tiersCalculAccount[_l2token][1]+(1);\\n        } else if (tier == 3) {\\n            tiersCalculAccount[_l2token][3] = tiersCalculAccount[_l2token][3]+(1);\\n            tiersCalculAccount[_l2token][2] = tiersCalculAccount[_l2token][2]+(1);\\n            tiersCalculAccount[_l2token][1] = tiersCalculAccount[_l2token][1]+(1);\\n        } else if (tier == 2) {\\n            tiersCalculAccount[_l2token][2] = tiersCalculAccount[_l2token][2]+(1);\\n            tiersCalculAccount[_l2token][1] = tiersCalculAccount[_l2token][1]+(1);\\n        } else if (tier == 1) {\\n            tiersCalculAccount[_l2token][1] = tiersCalculAccount[_l2token][1]+(1);\\n        }\\n\\n\\n        emit AddedWhiteList(_l2token, msg.sender, tier);\\n    }\\n\\n    function round1Sale(\\n        address _l2token\\n    )\\n        public\\n        payable\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n\\n        require(\\n            block.timestamp >= timeInfos.round1StartTime,\\n            \\\"not round1SaleTime\\\"\\n        );\\n        require(\\n            block.timestamp < timeInfos.round1EndTime,\\n            \\\"end round1SaleTime\\\"\\n        );\\n        LibPublicSaleVault.UserInfo1rd storage user1rds = user1rd[_l2token][msg.sender];\\n        require(user1rds.join == true, \\\"no whitelist\\\");\\n        uint8 tier = calculTier(_l2token, msg.sender);\\n        uint256 tokenSaleAmount = calculSaleToken(_l2token, msg.value);\\n        uint256 salePossible = calcul1RoundAmount(_l2token, msg.sender);\\n\\n        require(\\n            salePossible >= user1rds.saleAmount+(tokenSaleAmount),\\n            \\\"don't over buy\\\"\\n        );\\n\\n        LibPublicSaleVault.TokenSaleInfo storage saleInfos = saleInfo[_l2token];\\n        if (user1rds.payAmount == 0) {\\n            saleInfos.total1rdUsers = saleInfos.total1rdUsers+(1);\\n            saleInfos.totalUsers = saleInfos.totalUsers+(1);\\n            tiers1stAccount[_l2token][tier] = tiers1stAccount[_l2token][tier]+(1);\\n        }\\n\\n        user1rds.payAmount = user1rds.payAmount+(msg.value);\\n        user1rds.saleAmount = user1rds.saleAmount+(tokenSaleAmount);\\n\\n        saleInfos.total1rdTONAmount = saleInfos.total1rdTONAmount+(msg.value);\\n        saleInfos.total1rdSaleAmount = saleInfos.total1rdSaleAmount+(tokenSaleAmount);\\n\\n        // require(msg.sender.balance >= msg.value, \\\"Don't have TON\\\");\\n        payable(address(this)).call{value: msg.value};\\n\\n        emit ExclusiveSaled(_l2token, msg.sender, msg.value);\\n    }\\n\\n    function round2Sale(\\n        address _l2token\\n    )\\n        public\\n        payable\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n        require(\\n            block.timestamp >= timeInfos.round2StartTime,\\n            \\\"not depositTime\\\"\\n        );\\n        require(\\n            block.timestamp < timeInfos.round2EndTime,\\n            \\\"end depositTime\\\"\\n        );\\n\\n        LibPublicSaleVault.UserInfo2rd storage user2rds = user2rd[_l2token][msg.sender];\\n        LibPublicSaleVault.TokenSaleInfo storage saleInfos = saleInfo[_l2token];\\n\\n        if (!user2rds.join) {\\n            depositors[_l2token].push(msg.sender);\\n            user2rds.join = true;\\n\\n            saleInfos.total2rdUsers = saleInfos.total2rdUsers+(1);\\n            LibPublicSaleVault.UserInfo1rd memory user1rds = user1rd[_l2token][msg.sender];\\n            if (user1rds.payAmount == 0) saleInfos.totalUsers = saleInfos.totalUsers+(1);\\n        }\\n\\n        user2rds.depositAmount = user2rds.depositAmount+(msg.value);\\n        totalDepositAmount[_l2token] = totalDepositAmount[_l2token] + (msg.value);\\n\\n        // require(msg.sender.balance >= msg.value, \\\"Don't have TON\\\");\\n        payable(address(this)).call{value: msg.value};\\n\\n        emit Deposited(_l2token, msg.sender, msg.value);\\n    }\\n\\n    function claim(\\n        address _l2token\\n    )\\n        external\\n    {\\n        LibPublicSaleVault.TokenSaleClaim memory claimInfos = claimInfo[_l2token];\\n        require(\\n            block.timestamp >= claimInfos.firstClaimTime,\\n            \\\"not claimTime\\\"\\n        );\\n        LibPublicSaleVault.UserInfo2rd storage user2rds = user2rd[_l2token][msg.sender];\\n        LibPublicSaleVault.UserClaim storage userClaims = userClaim[_l2token][msg.sender];\\n        uint256 hardcapcut = hardcapCalcul(_l2token);\\n        if (hardcapcut == 0) {\\n            require(userClaims.refund != true, \\\"already getRefund\\\");\\n            LibPublicSaleVault.UserInfo1rd storage user1rds = user1rd[_l2token][msg.sender];\\n            uint256 refundTON = user1rds.payAmount+(user2rds.depositAmount);\\n            userClaims.refund = true;\\n            userClaims.refundAmount = refundTON;\\n            (bool sent, ) = payable(msg.sender).call{value: refundTON}(\\\"\\\");\\n            require(sent, \\\"claim refund fail\\\");\\n\\n            emit Refunded(_l2token, msg.sender, refundTON);\\n        } else {\\n            (uint256 reward, uint256 realSaleAmount, uint256 refundAmount) = calculClaimAmount(_l2token, msg.sender, 0);\\n            require(\\n                realSaleAmount > 0,\\n                \\\"no purchase amount\\\"\\n            );\\n            require(reward > 0, \\\"no reward\\\");\\n            require(\\n                (realSaleAmount-userClaims.claimAmount) >= reward,\\n                \\\"already getAllreward\\\"\\n            );\\n            require(\\n                IERC20(_l2token).balanceOf(address(this)) >= reward,\\n                \\\"dont have saleToken\\\"\\n            );\\n\\n            userClaims.claimAmount = userClaims.claimAmount+reward;\\n\\n            IERC20(_l2token).safeTransfer(msg.sender, reward);\\n            LibPublicSaleVault.TokenSaleInfo storage saleInfos = saleInfo[_l2token];\\n\\n            if (!userClaims.refund && user2rds.join) {\\n                saleInfos.total2rdUsersClaim = saleInfos.total2rdUsersClaim+(1);\\n                userClaims.refund = true;\\n            }\\n\\n            if (refundAmount > 0 && userClaims.refundAmount == 0){\\n                require(refundAmount <= address(this).balance, \\\"dont have refund ton\\\");\\n                userClaims.refundAmount = refundAmount;\\n                (bool sent, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\n                require(sent, \\\"claim refund fail\\\");\\n\\n                emit Refunded(_l2token, msg.sender, refundAmount);\\n            }\\n\\n            emit Claimed(_l2token, msg.sender, reward);\\n        }\\n    }\\n\\n    function depositWithdraw(\\n        address _l2token\\n    )\\n        external\\n        payable\\n    {\\n        LibPublicSaleVault.TokenSaleManage storage manageInfos = manageInfo[_l2token];\\n        require(manageInfos.adminWithdraw != true && manageInfos.exchangeTOS == true, \\\"need the exchangeWTONtoTOS\\\");\\n\\n        LibPublicSaleVault.TokenSaleInfo storage saleInfos = saleInfo[_l2token];\\n        uint256 liquidityTON = hardcapCalcul(_l2token);\\n        uint256 getAmount = saleInfos.total1rdTONAmount+(totalOpenPurchasedAmount(_l2token))-(liquidityTON);\\n\\n        require(getAmount <= address(this).balance, \\\"haven't token\\\");\\n\\n        manageInfos.adminWithdraw = true;\\n        uint256 burnAmount = manageInfos.set1rdTokenAmount+(manageInfos.set2rdTokenAmount)-(totalOpenSaleAmount(_l2token))-(saleInfos.total1rdSaleAmount);\\n\\n        if (burnAmount != 0) {\\n            IIL2ERC20Bridge(l2Bridge).withdrawTo(_l2token, l1burnVault, burnAmount, 0, '0x');\\n        }\\n\\n        IIVestingPublicFundAction(vestingFund).funding{value: getAmount}(_l2token);\\n\\n\\n        emit DepositWithdrawal(_l2token, msg.sender, getAmount, liquidityTON);\\n    }\\n\\n    //amountIn\\uc740 TON\\ub2e8\\uc704\\n    function exchangeWTONtoTOS(\\n        address _l2token,\\n        uint256 amountIn\\n    )\\n        external\\n        payable\\n        nonZero(amountIn)\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n        LibPublicSaleVault.TokenSaleManage storage manageInfos = manageInfo[_l2token];\\n        require(block.timestamp > timeInfos.round2EndTime, \\\"need to end the depositTime\\\");\\n\\n        uint256 liquidityTON = hardcapCalcul(_l2token);\\n        require(liquidityTON > 0, \\\"don't pass the hardCap\\\");\\n        if (manageInfos.exchangeTOS == false) {\\n            require(liquidityTON >= amountIn, \\\"amountIn over\\\");\\n            manageInfos.remainTON = liquidityTON;\\n            manageInfos.exchangeTOS = true;\\n        } else {\\n            require(manageInfos.remainTON >= amountIn, \\\"amountIn over\\\");\\n        }\\n\\n        address poolAddress = LibPublicSaleVault.getPoolAddress(ton,tos);\\n\\n        (uint160 sqrtPriceX96, int24 tick,,,,,) =  IIUniswapV3Pool(poolAddress).slot0();\\n        require(sqrtPriceX96 > 0, \\\"pool not initial\\\");\\n\\n        int24 timeWeightedAverageTick = OracleLibrary.consult(poolAddress, 120);\\n        require(\\n            tick < LibPublicSaleVault.acceptMaxTick(timeWeightedAverageTick, 60, 2),\\n            \\\"over changed tick range.\\\"\\n        );\\n\\n        (uint256 amountOutMinimum, , uint160 sqrtPriceLimitX96)\\n            = LibPublicSaleVault.limitPrameters(amountIn, poolAddress, ton, tos, manageInfos.changeTick);\\n\\n        (,bytes memory result) = address(quoter).call(\\n            abi.encodeWithSignature(\\n                \\\"quoteExactInputSingle(address,address,uint24,uint256,uint160)\\\",\\n                ton,tos,poolFee,amountIn,0\\n            )\\n        );\\n        uint256 amountOutMinimum2 = parseRevertReason(result);\\n        amountOutMinimum2 = amountOutMinimum2 * 995 / 1000; //slippage 0.5% apply\\n\\n        //quoter \\uac12\\uc774 \\ub354 \\ud06c\\ub2e4\\uba74 quoter\\uac12\\uc774 minimum\\uac12\\uc73c\\ub85c \\uc0ac\\uc6a9\\ub428\\n        //quoter \\uac12\\uc774 \\ub354 \\uc791\\uc73c\\uba74 priceImpact\\uac00 \\ub354\\ud06c\\uac8c \\uc791\\uc6a9\\ud558\\ub2c8 \\uac70\\ub798\\ub294 \\uc2e4\\ud328\\ud574\\uc57c\\ud568\\n\\n        // console.log(\\\"amountOutMinimum :\\\", amountOutMinimum);\\n        // console.log(\\\"amountOutMinimum2 \\\", amountOutMinimum2);\\n\\n        require(amountOutMinimum2 >= amountOutMinimum, \\\"priceImpact over\\\");\\n        address l2token = _l2token;\\n        uint256 _amountIn = amountIn;\\n        manageInfos.remainTON = manageInfos.remainTON - _amountIn;\\n\\n        _WETH.deposit{value: _amountIn}();\\n        ISwapRouter.ExactInputSingleParams memory params =\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: ton,\\n                tokenOut: tos,\\n                fee: poolFee,\\n                recipient: liquidityVault,\\n                deadline: block.timestamp,\\n                amountIn: _amountIn,\\n                amountOutMinimum: amountOutMinimum2,\\n                sqrtPriceLimitX96: sqrtPriceLimitX96\\n            });\\n        uint256 amountOut = ISwapRouter(uniswapRouter).exactInputSingle(params);\\n\\n        emit ExchangeSwap(l2token, msg.sender, _amountIn ,amountOut);\\n    }\\n\\n\\n    /* ========== INTERNAL ========== */\\n\\n    /* ========== PRIVATE ========== */\\n\\n   function parseRevertReason(bytes memory reason) private pure returns (uint256) {\\n        if (reason.length != 32) {\\n            if (reason.length < 68) revert('Unexpected error');\\n            assembly {\\n                reason := add(reason, 0x04)\\n            }\\n            revert(abi.decode(reason, (string)));\\n        }\\n        return abi.decode(reason, (uint256));\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    function hardcapCalcul(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibPublicSaleVault.TokenSaleInfo memory saleInfos = saleInfo[_l2token];\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        uint256 totalPurchaseTONamount = saleInfos.total1rdTONAmount+(totalOpenPurchasedAmount(_l2token));\\n        uint256 calculAmount;\\n        if (totalPurchaseTONamount >= manageInfos.hardCap) {\\n            return calculAmount = totalPurchaseTONamount*(manageInfos.changeTOS)/(100);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function calculSaleToken(\\n        address _l2token,\\n        uint256 _amount\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        uint256 tokenSaleAmount =\\n            _amount*(manageInfos.tonPrice)/(manageInfos.saleTokenPrice);\\n        return tokenSaleAmount;\\n    }\\n\\n    function calculPayToken(\\n        address _l2token,\\n        uint256 _amount\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        uint256 tokenPayAmount = _amount*(manageInfos.saleTokenPrice)/(manageInfos.tonPrice);\\n        return tokenPayAmount;\\n    }\\n\\n    function calculTier(\\n        address _l2token,\\n        address _account\\n    )\\n        public\\n        view\\n        nonZeroAddress(address(lockTOS))\\n        nonZero(tiers[_l2token][1])\\n        nonZero(tiers[_l2token][2])\\n        nonZero(tiers[_l2token][3])\\n        nonZero(tiers[_l2token][4])\\n        returns (uint8)\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n        uint256 sTOSBalance = IILockTOS(lockTOS).balanceOfAt(_account, timeInfos.snapshot);      //IILockTOS interface \\ucd94\\uac00 \\ud544\\uc694\\n        uint8 tier;\\n        if (sTOSBalance >= tiers[_l2token][1] && sTOSBalance < tiers[_l2token][2]) {\\n            tier = 1;\\n        } else if (sTOSBalance >= tiers[_l2token][2] && sTOSBalance < tiers[_l2token][3]) {\\n            tier = 2;\\n        } else if (sTOSBalance >= tiers[_l2token][3] && sTOSBalance < tiers[_l2token][4]) {\\n            tier = 3;\\n        } else if (sTOSBalance >= tiers[_l2token][4]) {\\n            tier = 4;\\n        } else if (sTOSBalance < tiers[_l2token][1]) {\\n            tier = 0;\\n        }\\n        return tier;\\n    }\\n\\n    function calculTierAmount(\\n        address _l2token,\\n        address _account,\\n        uint8 tier\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibPublicSaleVault.UserInfo1rd memory user1rds = user1rd[_l2token][_account];\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        uint256 salePossible;\\n        // uint8 tier = calculTier(_l2token,_account);\\n\\n        if (user1rds.join == true && tier > 0) {\\n            salePossible =\\n                manageInfos.set1rdTokenAmount\\n                    *(tiersPercents[_l2token][tier])\\n                    /(tiersCalculAccount[_l2token][tier])\\n                    /(10000);\\n            return salePossible;\\n        } else if (tier > 0) {\\n            uint256 tierAccount = tiersCalculAccount[_l2token][tier]+(1);\\n            salePossible =\\n                manageInfos.set1rdTokenAmount\\n                    *(tiersPercents[_l2token][tier])\\n                    /(tierAccount)\\n                    /(10000);\\n            return salePossible;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function calcul1RoundAmount(\\n        address _l2token,\\n        address _account\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint8 tier = calculTier(_l2token,_account);\\n        uint256 salePossible;\\n        if (tier > 0) {\\n            for (uint8 i = tier; i >0; i--) {\\n                salePossible = salePossible + calculTierAmount(_l2token,_account,i);\\n            }\\n            return salePossible;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function calculOpenSaleAmount(\\n        address _l2token,\\n        address _account,\\n        uint256 _amount\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        LibPublicSaleVault.UserInfo2rd memory user2rds = user2rd[_l2token][_account];\\n        uint256 depositAmount = user2rds.depositAmount+(_amount);\\n        uint256 openSalePossible =\\n            totalExpectOpenSaleAmountView(_l2token)\\n                *(depositAmount)\\n                /(totalDepositAmount[_l2token]+_amount);\\n        return openSalePossible;\\n    }\\n\\n    function currentRound(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns (uint256 round)\\n    {\\n        LibPublicSaleVault.TokenSaleClaim memory claimInfos = claimInfo[_l2token];\\n        if(claimInfos.firstClaimTime > block.timestamp) round = 0;\\n        if(claimInfos.firstClaimTime <= block.timestamp && block.timestamp < claimInfos.secondClaimTime) {\\n            round = 1;\\n        } else if(claimInfos.secondClaimTime <= block.timestamp) {\\n            round = (block.timestamp - claimInfos.secondClaimTime) / claimInfos.claimInterval + 2;\\n        }\\n        if (round > claimInfos.totalClaimCounts) round = claimInfos.totalClaimCounts;\\n    }\\n\\n    function calculClaimAmount(\\n        address _l2token,\\n        address _account,\\n        uint256 _round\\n    )\\n        public\\n        view\\n        returns (uint256 _reward, uint256 _totalClaim, uint256 _refundAmount)\\n    {\\n        LibPublicSaleVault.TokenSaleClaim memory claimInfos = claimInfo[_l2token];\\n        if (block.timestamp < claimInfos.firstClaimTime) return (0, 0, 0);\\n        if (_round > claimInfos.totalClaimCounts) return (0, 0, 0);\\n\\n        LibPublicSaleVault.UserClaim memory userClaims = userClaim[_l2token][_account];\\n        (, uint256 realSaleAmount, uint256 refundAmount) = totalSaleUserAmount(_l2token,_account);\\n\\n        if (realSaleAmount == 0 ) return (0, 0, 0);\\n        if (userClaims.claimAmount >= realSaleAmount) return (0, 0, 0);\\n\\n        uint256 curRound = currentRound(_l2token);\\n\\n        uint256 amount;\\n        if (claimInfos.totalClaimCounts == curRound && _round == 0) {\\n            amount = realSaleAmount-userClaims.claimAmount;\\n            return (amount, realSaleAmount, refundAmount);\\n        }\\n\\n        if(_round == 0) {\\n            if(curRound == 0) {\\n                return (amount, realSaleAmount, refundAmount);\\n            } else {\\n                amount = realSaleAmount*(claimInfos.firstClaimPercent)/(10000);\\n                amount = (amount + ((realSaleAmount - amount)/(claimInfos.totalClaimCounts-1) * (curRound -1))) - userClaims.claimAmount;\\n                return (amount, realSaleAmount, refundAmount);\\n            }\\n        } else if (_round == 1) {\\n            amount = realSaleAmount*(claimInfos.firstClaimPercent)/(10000);\\n            return (amount, realSaleAmount, refundAmount);\\n        } else {\\n            amount = realSaleAmount*(claimInfos.firstClaimPercent)/(10000);\\n            amount = (amount + ((realSaleAmount - amount)/(claimInfos.totalClaimCounts-1) * (_round -1))) - userClaims.claimAmount;\\n            return (amount, realSaleAmount, refundAmount);\\n        }\\n    }\\n\\n    function totalSaleUserAmount(\\n        address _l2token,\\n        address user\\n    )\\n        public\\n        view\\n        returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount)\\n    {\\n        LibPublicSaleVault.UserInfo1rd memory user1rds = user1rd[_l2token][user];\\n\\n        if (user1rds.join) {\\n            (uint256 realPayAmount, uint256 realSaleAmount, uint256 refundAmount) = openSaleUserAmount(_l2token,user);\\n            return ( realPayAmount+(user1rds.payAmount), realSaleAmount+(user1rds.saleAmount), refundAmount);\\n        } else {\\n            return openSaleUserAmount(_l2token,user);\\n        }\\n    }\\n\\n    function openSaleUserAmount(\\n        address _l2token,\\n        address user\\n    )\\n        public\\n        view\\n        returns (uint256 _realPayAmount, uint256 _realSaleAmount, uint256 _refundAmount)\\n    {\\n        LibPublicSaleVault.UserInfo2rd memory user2rds = user2rd[_l2token][user];\\n\\n        if (!user2rds.join || user2rds.depositAmount == 0) return (0, 0, 0);\\n\\n        uint256 openSalePossible = calculOpenSaleAmount(_l2token, user, 0);\\n        uint256 realPayAmount = calculPayToken(_l2token,openSalePossible);\\n        uint256 depositAmount = user2rds.depositAmount;\\n        uint256 realSaleAmount = 0;\\n        uint256 returnAmount = 0;\\n\\n        if (realPayAmount < depositAmount) {\\n            returnAmount = depositAmount-(realPayAmount);\\n            realSaleAmount = calculSaleToken(_l2token,realPayAmount);\\n        } else {\\n            realPayAmount = user2rds.depositAmount;\\n            realSaleAmount = calculSaleToken(_l2token,depositAmount);\\n        }\\n\\n        return (realPayAmount, realSaleAmount, returnAmount);\\n    }\\n\\n    function totalOpenSaleAmount(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _calculSaleToken = calculSaleToken(_l2token,totalDepositAmount[_l2token]);\\n        uint256 _totalAmount = totalExpectOpenSaleAmountView(_l2token);\\n\\n        if (_calculSaleToken < _totalAmount) return _calculSaleToken;\\n        else return _totalAmount;\\n    }\\n\\n    function totalOpenPurchasedAmount(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _calculSaleToken = calculSaleToken(_l2token,totalDepositAmount[_l2token]);\\n        uint256 _totalAmount = totalExpectOpenSaleAmountView(_l2token);\\n        if (_calculSaleToken < _totalAmount) return totalDepositAmount[_l2token];\\n        else return  calculPayToken(_l2token,_totalAmount);\\n    }\\n\\n    function totalWhitelists(\\n        address _l2token\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return whitelists[_l2token].length;\\n    }\\n\\n    function totalExpectOpenSaleAmountView(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns(uint256)\\n    {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[_l2token];\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        if (block.timestamp < timeInfos.round1EndTime) return manageInfos.set1rdTokenAmount;\\n        else return manageInfos.set2rdTokenAmount+(totalRound1NonSaleAmount(_l2token));\\n    }\\n\\n    function totalRound1NonSaleAmount(\\n        address _l2token\\n    )\\n        public\\n        view\\n        returns(uint256)\\n    {\\n        LibPublicSaleVault.TokenSaleInfo memory saleInfos = saleInfo[_l2token];\\n        LibPublicSaleVault.TokenSaleManage memory manageInfos = manageInfo[_l2token];\\n        return manageInfos.set1rdTokenAmount-saleInfos.total1rdSaleAmount;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x56894641cefa8dc7bb70fbfa3389176730353c394d3cbad42057f9921bcd7650\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2PublicSaleVaultStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibPublicSaleVault } from \\\"../../libraries/LibPublicSaleVault.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\ncontract L2PublicSaleVaultStorage {\\n    uint24 public constant poolFee = 3000;\\n\\n    address public constant wton = 0xc4A11aaf6ea915Ed7Ac194161d2fC9384F15bff2;\\n    \\n    address public quoter;\\n    address public vestingFund;\\n    address public liquidityVault;\\n    address public uniswapRouter;\\n    \\n    address public lockTOS;\\n    address public tos;\\n    address public ton;\\n\\n    IWETH public _WETH;\\n\\n    //L2PublicSaleContract\\uc744 manage\\ud558\\ub294 manager\\n    address public l2ProjectManager;\\n    address public l2Bridge;\\n    address public l1burnVault;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 min,maxPer (changeTOS\\ub97c \\uacb0\\uc815\\ud560 \\uc218 \\uc788\\ub294 \\ubc94\\uc704)\\n    uint8 public minPer;    //\\ud604\\uc7ac\\ub294 \\uc18c\\uc218\\uc810 \\uc790\\ub9ac\\uc218\\uac00 \\uc5c6\\uc774 \\uc0ac\\uc6a9\\ub418\\uc5b4\\uc11c uint8(0~255\\uae4c\\uc9c0 \\ubc94\\uc704)\\uc774 \\uc0ac\\uc6a9\\ub428.\\n    uint8 public maxPer;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 stanTier\\n    uint256 public stanTier1;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier1 \\uae30\\uc900\\uc774 \\uc81c\\uc77c \\uc791\\uc74c\\n    uint256 public stanTier2;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier2\\n    uint256 public stanTier3;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier3\\n    uint256 public stanTier4;     //\\ucd5c\\uc18c \\uae30\\uc900 Tier4 \\uae30\\uc900\\uc774 \\uc81c\\uc77c \\ud07c\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 contract\\ub97c deploy \\ud6c4 snapshot\\uc744 \\uc9c0\\uc815\\ud560 \\uc218 \\uc788\\ub294 \\ucd5c\\uc18c \\uc2dc\\uac04 \\uac04\\uaca9\\n    uint256 public delayTime;\\n\\n    //\\uad00\\ub9ac\\uc790\\uac00 \\uc124\\uc815\\ud558\\ub294 changeTick\\n    int24 public changeTick;    //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560\\ub54c \\ud5c8\\uc6a9\\ub418\\ub294 Tick \\ubc94\\uc704\\n    \\n    bool internal free = true;\\n\\n    //l2token\\uc758 \\ubaa8\\ub4e0 user\\uc758 totalDepositAmount\\n    mapping(address => uint256) public totalDepositAmount;\\n\\n    //l2token\\uc774 \\uae30\\uc900\\uc774 \\ub41c\\ub2e4. (l2token - tokenOwner)\\n    mapping(address => address) public vaultAdminOfToken;\\n\\n\\n    mapping(address => address[]) public depositors;            // l2token - depositors\\n    mapping(address => address[]) public whitelists;            // l2token - whitelists\\n\\n    mapping(address => uint256[]) public claimTimes;            // l2token - claimTimes\\n    mapping(address => uint256[]) public claimPercents;         // l2token - claimPercents\\n    \\n\\n    // l2token - struct\\n    mapping(address => LibPublicSaleVault.TokenTimeManage) public timeInfo;     // l2token - timeInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleManage) public manageInfo;       // l2token - manageInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleClaim) public claimInfo;       // l2token - manageInfo\\n    mapping(address => LibPublicSaleVault.TokenSaleInfo) public saleInfo;       // l2token - saleInfo\\n\\n    // l2token - account - struct\\n    mapping(address => mapping(address => LibPublicSaleVault.UserInfo1rd)) public user1rd;      //l2token - userAccount - userInfo1rd\\n    mapping(address => mapping(address => LibPublicSaleVault.UserInfo2rd)) public user2rd;      //l2token - userAccount - userInfo2rd\\n    mapping(address => mapping(address => LibPublicSaleVault.UserClaim)) public userClaim;      //l2token - userAccount - userClaim    \\n\\n\\n    // l2token - tierInfo\\n    mapping(address => mapping(uint8 => uint256)) public tiers;                 // l2token - tierNumber - tier sTOS value\\n    mapping(address => mapping(uint8 => uint256)) public tiersPercents;         // l2token - tierNumber - tier SalePercent (tierPercents sum is 10000)\\n    mapping(address => mapping(uint8 => uint256)) public tiersWhiteList;        // l2token - tierNumber - Number of whitelist participants by tier\\n    mapping(address => mapping(uint8 => uint256)) public tiersCalculAccount;    // l2token - tierNumber - Number of calculator for Amount by tier\\n    mapping(address => mapping(uint8 => uint256)) public tiers1stAccount;       // l2token - tierNumber - Number of 1round participants by tier\\n\\n    event SetVaultAdmin(address l2Token, address newAdmin);\\n    event SetInitializer(address newInitializer);\\n\\n    event AddedWhiteList(address l2Token, address indexed from, uint256 tier);\\n    event ExclusiveSaled(address l2Token, address indexed from, uint256 amount);\\n    event Deposited(address l2Token, address indexed from, uint256 amount);\\n    \\n    event Claimed(address l2Token, address indexed from, uint256 amount);\\n    event Refunded(address l2Token, address indexed from, uint256 amount);\\n\\n    event DepositWithdrawal(address l2Token, address indexed from, uint256 amount, uint256 liquidityAmount);\\n    event ExchangeSwap(address l2Token, address indexed from, uint256 amountIn, uint256 amountOut);\\n\\n    modifier onlyL2ProjectManager() {\\n        require(l2ProjectManager != address(0) && msg.sender == l2ProjectManager, \\\"caller is not l2ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultAdminOfToken(address l2token) {\\n        require(vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token] || msg.sender == l2ProjectManager, \\\"caller is not a vaultAdmin Of l2Token\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier beforeStartAddWhiteTime(address l2token) {\\n        LibPublicSaleVault.TokenTimeManage memory timeInfos = timeInfo[l2token];\\n        require(\\n            timeInfos.whiteListStartTime == 0 ||\\n                (timeInfos.whiteListStartTime > 0 && block.timestamp < timeInfos.whiteListStartTime),\\n            \\\"not beforewhiteListStartTime\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n}\\n\",\"keccak256\":\"0x345fd48abd8d1125b83d46fcaa66eeefe17cd80a1b01185d79776065342a3e16\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // Handle division by zero\\n        require(denominator > 0);\\n\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            // require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        // 2022.0314.modified\\n        //uint256 twos = -denominator & denominator;\\n        //uint256 twos = denominator & (~denominator + 1);\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n\\n        unchecked {\\n            prod0 |= prod1 * twos;\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\n            uint256 inv = (3 * denominator) ^ 2;\\n\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n        }\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1cb334770aafba8747f54d6ec0766049ab5f2174025f97ec0ada5e99c665c73\",\"license\":\"MIT\"},\"contracts/libraries/LibPublicSaleVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./TickMath.sol\\\";\\nimport \\\"./OracleLibrary.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ninterface IIUniswapV3Factory {\\n    function getPool(address,address,uint24) external view returns (address);\\n}\\n\\ninterface IIUniswapV3Pool {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n}\\n\\n/**\\n * @title LibPublicSaleVault\\n */\\nlibrary LibPublicSaleVault {\\n\\n    struct TokenTimeManage {\\n        uint256 deployTime;\\n        uint256 snapshot;\\n        uint256 whiteListStartTime;\\n        uint256 whiteListEndTime;\\n        uint256 round1StartTime;\\n        uint256 round1EndTime;\\n        uint256 round2StartTime;\\n        uint256 round2EndTime;\\n    }\\n\\n    struct TokenSaleManage {\\n        uint256 set1rdTokenAmount;      //1round\\uc5d0 token\\uc744 \\ud310\\ub9e4\\ud560 \\uc591\\n        uint256 set2rdTokenAmount;      //2round\\uc5d0 token\\uc744 \\ud310\\ub9e4\\ud560 \\uc591\\n        uint256 saleTokenPrice;\\n        uint256 tonPrice;\\n        uint256 hardCap;                //softcap \\uc218\\ub7c9 (\\ud310\\ub9e4 \\ucd5c\\uc800 \\ud558\\ud55c\\uc120)\\n        uint256 changeTOS;              //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud558\\ub294 %\\n        uint256 remainTON;              //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560 \\ub0a8\\uc740 TON\\n        int24 changeTick;             //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud560\\ub54c \\ud5c8\\uc6a9\\ub418\\ub294 Tick \\ubc94\\uc704\\n        bool exchangeTOS;               //TON -> TOS\\ub85c \\ubcc0\\uacbd\\ud558\\uc600\\ub294\\uc9c0 \\uccb4\\ud06c\\n        bool adminWithdraw;             //withdraw\\ud568\\uc218\\ub97c \\uc2e4\\ud589\\ud558\\uc600\\ub294\\uc9c0 \\uccb4\\ud06c\\n    }\\n\\n    struct TokenSaleClaim {\\n        uint256 totalClaimCounts;       //\\ucd1d \\ud074\\ub808\\uc784 \\uc218\\n        uint256 firstClaimPercent;      //\\ucd08\\uae30 \\ud074\\ub808\\uc784 percents\\n        uint256 firstClaimTime;         //\\uccab\\ubc88\\uc9f8 claim \\uc2dc\\uac04\\n        uint256 secondClaimTime;        //\\ub450\\ubc88\\uc9f8 claim \\uc2dc\\uac04\\n        uint256 claimInterval;          //\\ud074\\ub808\\uc784 \\uac04\\uaca9 (epochtime)\\n    }\\n\\n    struct TokenSaleInfo {\\n        uint256 total1rdSaleAmount;      //Token\\uc744 \\ud310\\ub9e4\\ud55c \\uc591\\n        uint256 total1rdTONAmount;       //Token\\ud310\\ub9e4\\ub85c \\ubc1b\\uc740 TON\\uc591\\n        uint256 totalUsers;             //\\uc804\\uccb4 \\uc138\\uc77c \\ucc38\\uc5ec\\uc790 (\\ub77c\\uc6b4\\ub4dc1,\\ub77c\\uc6b4\\ub4dc2 \\ud3ec\\ud568, \\uc720\\ub2c8\\ud06c)\\n        uint256 total1rdUsers;       //\\ub77c\\uc6b4\\ub4dc 1 \\ucc38\\uc5ec\\uc790\\n        uint256 total2rdUsers;       //\\ub77c\\uc6b4\\ub4dc 2 \\ucc38\\uc5ec\\uc790\\n        uint256 total2rdUsersClaim;  //\\ub77c\\uc6b4\\ub4dc 2 \\ucc38\\uc5ec\\uc790\\uc911 claim\\ud55c\\uc0ac\\ub78c\\n    }\\n\\n\\n    struct UserInfo1rd {\\n        bool join;\\n        uint8 tier;\\n        uint256 payAmount;\\n        uint256 saleAmount;\\n    }\\n\\n    struct UserInfo2rd {\\n        bool join;\\n        uint256 depositAmount;\\n    }\\n\\n    struct UserClaim {\\n        bool refund;\\n        uint256 claimAmount;\\n        uint256 refundAmount;\\n        uint256 latestClaimedRound;     //\\ub9c8\\uc9c0\\ub9c9 claim \\ub77c\\uc6b4\\ub4dc\\n    }\\n\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 amountIn,\\n        address baseToken,\\n        address quoteToken\\n    ) public pure returns (uint256 amountOut) {\\n        return OracleLibrary.getQuoteAtTick(tick, amountIn, baseToken, quoteToken);\\n    }\\n\\n    function getPoolAddress(address _wton, address _tos) public view returns(address) {\\n        // address factory = 0x1F98431c8aD98523631AE4a59f267346ea31F984;\\n        address factory = 0x755Ba335013C07CE35C9A2dd5746617Ac4c6c799;\\n        return IIUniswapV3Factory(factory).getPool(_wton, _tos, 3000);\\n    }\\n\\n    function getTimeWeightTick(address _pool,uint32 _period) public view returns (int24) {\\n        return OracleLibrary.consult(_pool, _period);\\n    }\\n\\n    function getTokenOrder(address _pool) public view returns(address,address,int24) {\\n        address token0 = IIUniswapV3Pool(_pool).token0();\\n        address token1 = IIUniswapV3Pool(_pool).token1();\\n        (,int24 nowtick,,,,,) = IIUniswapV3Pool(_pool).slot0();\\n        return (token0, token1,nowtick);\\n    }\\n\\n    function getMiniTick(int24 tickSpacings) public pure returns (int24){\\n        return (TickMath.MIN_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function getMaxTick(int24 tickSpacings) public pure  returns (int24){\\n        return (TickMath.MAX_TICK / tickSpacings) * tickSpacings ;\\n    }\\n\\n    function acceptMinTick(int24 _tick, int24 _tickSpacings, int24 _acceptTickInterval) public pure returns (int24) {\\n        int24 _minTick = getMiniTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick - (_tickSpacings * _acceptTickInterval);\\n\\n        if(_minTick < _acceptMinTick) return _acceptMinTick;\\n        else return _minTick;\\n    }\\n\\n    function acceptMaxTick(int24 _tick, int24 _tickSpacings, int24 _acceptTickInterval) public pure returns (int24) {\\n        int24 _maxTick = getMaxTick(_tickSpacings);\\n        int24 _acceptMinTick = _tick + (_tickSpacings * _acceptTickInterval);\\n\\n        if(_maxTick < _acceptMinTick) return _maxTick;\\n        else return _acceptMinTick;\\n    }\\n    \\n    function limitPrameters(\\n        uint256 amountIn,\\n        address _pool,\\n        address token0,\\n        address token1,\\n        int24 acceptTickCounts\\n    ) public view returns  (uint256 amountOutMinimum, uint256 priceLimit, uint160 sqrtPriceX96Limit) {\\n        IIUniswapV3Pool pool = IIUniswapV3Pool(_pool);\\n        (, int24 tick,,,,,) =  pool.slot0();\\n        int24 _tick = tick;\\n        if(token0 < token1) {\\n            _tick = tick - acceptTickCounts * 60;\\n            if(_tick < TickMath.MIN_TICK ) _tick =  TickMath.MIN_TICK ;\\n        } else {\\n            _tick = tick + acceptTickCounts * 60;\\n            if(_tick > TickMath.MAX_TICK ) _tick =  TickMath.MAX_TICK ;\\n        }\\n        address token1_ = token1;\\n        address token0_ = token0;\\n        return (\\n              getQuoteAtTick(\\n                _tick,\\n                uint128(amountIn),\\n                token0_,\\n                token1_\\n                ),\\n             getQuoteAtTick(\\n                _tick,\\n                uint128(10**27),\\n                token0_,\\n                token1_\\n             ),\\n             TickMath.getSqrtRatioAtTick(_tick)\\n        );\\n    }\\n\\n    function _decodeApproveData(\\n        bytes memory data\\n    ) public pure returns (uint256 approveData) {\\n        assembly {\\n            approveData := mload(add(data, 0x20))\\n        }\\n    }\\n}\",\"keccak256\":\"0xc73a2511abce2489532953217fcbe6c2a76963611c55f506c02afa78df24eb67\",\"license\":\"MIT\"},\"contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/FullMath.sol\\\";\\nimport \\\"../libraries/TickMath.sol\\\";\\n\\n\\ninterface IIIUniswapV3Pool {\\n\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n}\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n\\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\\n        require(period != 0, \\\"BP\\\");\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = period;\\n        secondAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, ) = IIIUniswapV3Pool(pool).observe(secondAgos);\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / int56( int32(period) ));\\n\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % int56( int32(period) ) != 0)) timeWeightedAverageTick--;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe60795ad694e4558eeca29c0206eb2e1569becd141356f09500c5a8e7d00c4e8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x7b2bbb42865a20de2f40a0cb20a10bd0ddc6189cd58db42551c87b41169a0904\",\"license\":\"GPL-2.0-or-later\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061053c5760003560e01c8063735de9f7116102af578063b005ed9111610179578063d13da444116100d6578063e0af36161161008a578063ef39b1491161006f578063ef39b149146112d9578063f3b08cb9146112f9578063f7e6e1ab1461131957600080fd5b8063e0af361614611299578063e7cd4a04146112b957600080fd5b8063d7b0b29d116100bb578063d7b0b29d14611194578063d97830b114611211578063dc560fcd1461128357600080fd5b8063d13da4441461113c578063d547741f1461117457600080fd5b8063c3ce874e1161012d578063cc48b94711610112578063cc48b947146110cf578063cf437a8f146110ef578063d01481a11461111c57600080fd5b8063c3ce874e1461108f578063c6bbd5a7146110af57600080fd5b8063b911135f1161015e578063b911135f14611019578063b9e982bb1461104f578063c0f22d4b1461106f57600080fd5b8063b005ed9114610f60578063b0a5ccd114610ff957600080fd5b806391d1485411610227578063a217fddf116101db578063a7b23fcf116101c0578063a7b23fcf14610f00578063ac3e8aa914610f20578063ae1f6aaf14610f4057600080fd5b8063a217fddf14610eb9578063a389595f14610ece57600080fd5b806397d785951161020c57806397d7859514610e3e5780639f32b29a14610e6b5780639f87b77f14610ea357600080fd5b806391d1485414610dd857806396e6f43f14610e1e57600080fd5b80637e2eee531161027e57806389293f651161026357806389293f6514610d1b57806389f395de14610d905780638d62d94914610db057600080fd5b80637e2eee5314610ccf5780637fc46ba814610ce557600080fd5b8063735de9f714610c4557806375829def14610c6557806375b238fc14610c85578063768b821f14610cb957600080fd5b80632f2ff15d1161040b578063550d01a3116103685780636100a7211161031c5780636e2272a2116103015780636e2272a214610bf25780637048027514610c05578063708666ad14610c2557600080fd5b80636100a72114610bb857806363a8fd8914610bd857600080fd5b80635af390921161034d5780635af3909214610b655780635b19e29414610b855780635f6ceddb14610ba557600080fd5b8063550d01a314610afd57806355d6d39b14610b2d57600080fd5b8063466c01b8116103bf57806350d2a276116103a457806350d2a27614610a9157806351ebde6d14610ac757806352351e8514610add57600080fd5b8063466c01b814610a515780634e6c446614610a7157600080fd5b806331bf2897116103f057806331bf2897146109c257806333efca3d146109d557806336568abe14610a3157600080fd5b80632f2ff15d1461098257806330ba4659146109a257600080fd5b80631785f53c116104b9578063229852461161046d57806324d7806c1161045257806324d7806c1461090a5780632ac9bab61461092a5780632bde5bfb1461096257600080fd5b806322985246146108a6578063248a9ca3146108da57600080fd5b80631c53f2561161049e5780631c53f256146108215780631d823697146108665780631e83409a1461088657600080fd5b80631785f53c1461078e5780631916e534146107ae57600080fd5b8063096cc4181161051057806312269758116104f557806312269758146106f25780631576baf4146107385780631784b3a61461075857600080fd5b8063096cc4181461067f5780630b7459eb146106ba57600080fd5b8062e710451461054157806301ffc9a714610556578063089fe6aa1461058b57806308ac3fcb146105b5575b600080fd5b61055461054f366004614d32565b611339565b005b34801561056257600080fd5b50610576610571366004614d4f565b611601565b60405190151581526020015b60405180910390f35b34801561059757600080fd5b506105a1610bb881565b60405162ffffff9091168152602001610582565b3480156105c157600080fd5b5061062e6105d0366004614d32565b601d6020526000908152604090208054600182015460028084015460038501546004860154600587015460068801546007909801549697959693959294919390929181900b9060ff630100000082048116916401000000009004168a565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260020b60e08401521515610100830152151561012082015261014001610582565b34801561068b57600080fd5b5061069f61069a366004614d79565b611638565b60408051938452602084019290925290820152606001610582565b3480156106c657600080fd5b506006546106da906001600160a01b031681565b6040516001600160a01b039091168152602001610582565b3480156106fe57600080fd5b5061072a61070d366004614dc9565b602460209081526000928352604080842090915290825290205481565b604051908152602001610582565b34801561074457600080fd5b5061072a610753366004614d32565b611899565b34801561076457600080fd5b5061072a610773366004614d32565b6001600160a01b031660009081526019602052604090205490565b34801561079a57600080fd5b506105546107a9366004614d32565b6118e4565b3480156107ba57600080fd5b506107ff6107c9366004614e02565b6022602090815260009283526040808420909152908252902080546001820154600283015460039093015460ff90921692909184565b6040805194151585526020850193909352918301526060820152608001610582565b34801561082d57600080fd5b50600f54610854907501000000000000000000000000000000000000000000900460ff1681565b60405160ff9091168152602001610582565b34801561087257600080fd5b50610854610881366004614e02565b611971565b34801561089257600080fd5b506105546108a1366004614d32565b611d9b565b3480156108b257600080fd5b5061072a7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b3480156108e657600080fd5b5061072a6108f5366004614e30565b60009081526004602052604090206001015490565b34801561091657600080fd5b50610576610925366004614d32565b6123c7565b34801561093657600080fd5b5061072a610945366004614dc9565b602760209081526000928352604080842090915290825290205481565b34801561096e57600080fd5b5061072a61097d366004614d32565b612407565b34801561098e57600080fd5b5061055461099d366004614e49565b612557565b3480156109ae57600080fd5b5061072a6109bd366004614d32565b612581565b6105546109d0366004614e6e565b6125ee565b3480156109e157600080fd5b50610a1a6109f0366004614e02565b60216020908152600092835260408084209091529082529020805460019091015460ff9091169082565b604080519215158352602083019190915201610582565b348015610a3d57600080fd5b50610554610a4c366004614e49565b612ea9565b348015610a5d57600080fd5b506106da610a6c366004614e6e565b612f35565b348015610a7d57600080fd5b506009546106da906001600160a01b031681565b348015610a9d57600080fd5b506106da610aac366004614d4f565b6003602052600090815260409020546001600160a01b031681565b348015610ad357600080fd5b5061072a60125481565b348015610ae957600080fd5b50600d546106da906001600160a01b031681565b348015610b0957600080fd5b50610576610b18366004614d32565b60026020526000908152604090205460ff1681565b348015610b3957600080fd5b5061072a610b48366004614dc9565b602560209081526000928352604080842090915290825290205481565b348015610b7157600080fd5b5061072a610b80366004614e02565b612f6d565b348015610b9157600080fd5b506106da610ba0366004614e6e565b612fd0565b610554610bb3366004614d32565b612fec565b348015610bc457600080fd5b5061072a610bd3366004614e6e565b613347565b348015610be457600080fd5b506000546105769060ff1681565b610554610c00366004614d32565b613404565b348015610c1157600080fd5b50610554610c20366004614d32565b6136ce565b348015610c3157600080fd5b506007546106da906001600160a01b031681565b348015610c5157600080fd5b506008546106da906001600160a01b031681565b348015610c7157600080fd5b50610554610c80366004614d32565b613758565b348015610c9157600080fd5b5061072a7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b348015610cc557600080fd5b5061072a60115481565b348015610cdb57600080fd5b5061072a60145481565b348015610cf157600080fd5b506106da610d00366004614d32565b6017602052600090815260409020546001600160a01b031681565b348015610d2757600080fd5b50610d6c610d36366004614e02565b60208080526000928352604080842090915290825290208054600182015460029092015460ff8083169361010090930416919084565b60408051941515855260ff9093166020850152918301526060820152608001610582565b348015610d9c57600080fd5b50600a546106da906001600160a01b031681565b348015610dbc57600080fd5b506106da73c4a11aaf6ea915ed7ac194161d2fc9384f15bff281565b348015610de457600080fd5b50610576610df3366004614e49565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b348015610e2a57600080fd5b5061072a610e39366004614e9a565b6138ba565b348015610e4a57600080fd5b5061072a610e59366004614d32565b60166020526000908152604090205481565b348015610e7757600080fd5b5061072a610e86366004614dc9565b602660209081526000928352604080842090915290825290205481565b348015610eaf57600080fd5b5061072a60105481565b348015610ec557600080fd5b5061072a600081565b348015610eda57600080fd5b50600f546108549074010000000000000000000000000000000000000000900460ff1681565b348015610f0c57600080fd5b5061072a610f1b366004614d32565b613ad6565b348015610f2c57600080fd5b5061069f610f3b366004614e02565b613ba3565b348015610f4c57600080fd5b50600e546106da906001600160a01b031681565b348015610f6c57600080fd5b50610fbe610f7b366004614d32565b601c602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610582565b34801561100557600080fd5b5061072a611014366004614d32565b613c86565b34801561102557600080fd5b506106da611034366004614e30565b6001602052600090815260409020546001600160a01b031681565b34801561105b57600080fd5b5061072a61106a366004614d32565b613e06565b34801561107b57600080fd5b5061072a61108a366004614e6e565b613f06565b34801561109b57600080fd5b5061072a6110aa366004614e6e565b613f37565b3480156110bb57600080fd5b506005546106da906001600160a01b031681565b3480156110db57600080fd5b50600b546106da906001600160a01b031681565b3480156110fb57600080fd5b506015546111099060020b81565b60405160029190910b8152602001610582565b34801561112857600080fd5b50600f546106da906001600160a01b031681565b34801561114857600080fd5b5061072a611157366004614dc9565b602360209081526000928352604080842090915290825290205481565b34801561118057600080fd5b5061055461118f366004614e49565b613fe2565b3480156111a057600080fd5b506111e46111af366004614d32565b601f60205260009081526040902080546001820154600283015460038401546004850154600590950154939492939192909186565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610582565b34801561121d57600080fd5b5061125b61122c366004614d32565b601e60205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610582565b34801561128f57600080fd5b5061072a60135481565b3480156112a557600080fd5b50600c546106da906001600160a01b031681565b3480156112c557600080fd5b506105546112d4366004614d32565b614007565b3480156112e557600080fd5b5061069f6112f4366004614e02565b6144c7565b34801561130557600080fd5b5061072a611314366004614e6e565b614588565b34801561132557600080fd5b5061072a611334366004614d79565b6145a4565b6001600160a01b0381166000908152601c6020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c0820181905260079092015460e0820152904210156114045760405162461bcd60e51b815260206004820152600f60248201527f6e6f74206465706f73697454696d65000000000000000000000000000000000060448201526064015b60405180910390fd5b8060e0015142106114575760405162461bcd60e51b815260206004820152600f60248201527f656e64206465706f73697454696d65000000000000000000000000000000000060448201526064016113fb565b6001600160a01b03821660008181526021602090815260408083203384528252808320938352601f9091529020815460ff16611567576001600160a01b038416600090815260186020908152604082208054600181810183559184529190922001805473ffffffffffffffffffffffffffffffffffffffff191633179055825460ff19168117835560048201546114ed91614efb565b60048201556001600160a01b03841660009081526020808052604080832033845282528083208151608081018352815460ff808216151583526101009091041693810193909352600181015491830182905260020154606083015290910361156557600282015461155f906001614efb565b60028301555b505b3482600101546115779190614efb565b60018301556001600160a01b0384166000908152601660205260409020546115a0903490614efb565b6001600160a01b038516600081815260166020908152604091829020939093558051918252349282019290925233917f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a791015b60405180910390a250505050565b60006001600160e01b03198216637965db0b60e01b148061163257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0383166000908152601e60209081526040808320815160a08101835281548152600182015493810193909352600281015491830182905260038101546060840152600401546080830152829182914210156116a557600080600093509350935050611890565b80518511156116bf57600080600093509350935050611890565b6001600160a01b038088166000908152602260209081526040808320938a1683529281528282208351608081018552815460ff16151581526001820154928101929092526002810154938201939093526003909201546060830152806117258a8a6144c7565b92509250508160000361174657600080600096509650965050505050611890565b8183602001511061176557600080600096509650965050505050611890565b60006117708b613ad6565b90506000818660000151148015611785575089155b156117ab5760208501516117999085614f0e565b98509296509094506118909350505050565b8960000361183b57816000036117cb579750919550935061189092505050565b6127108660200151856117de9190614f21565b6117e89190614f4e565b60208601519091506117fb600184614f0e565b875161180990600190614f0e565b6118138488614f0e565b61181d9190614f4e565b6118279190614f21565b6118319083614efb565b6117999190614f0e565b89600103611860576127108660200151856118569190614f21565b6117999190614f4e565b6127108660200151856118739190614f21565b61187d9190614f4e565b60208601519091506117fb60018c614f0e565b93509350939050565b6001600160a01b03811660009081526016602052604081205481906118bf908490613f37565b905060006118cc84613c86565b9050808210156118dd575092915050565b9392505050565b6118ed336123c7565b6119445760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016113fb565b61196e7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282612ea9565b50565b6009546000906001600160a01b0316806119b25760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016113fb565b6001600160a01b03841660009081526023602090815260408083206001845290915281205490819003611a0c5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016113fb565b6001600160a01b03851660009081526023602090815260408083206002845290915281205490819003611a665760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016113fb565b6001600160a01b03861660009081526023602090815260408083206003845290915281205490819003611ac05760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016113fb565b6001600160a01b03871660009081526023602090815260408083206004845290915281205490819003611b1a5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016113fb565b6001600160a01b038881166000908152601c60209081526040808320815161010081018352815481526001820154938101849052600282015481840152600382015460608201526004808301546080830152600583015460a0830152600683015460c083015260079092015460e0820152600954925163277166bf60e11b81528d871692810192909252602482019390935291931690634ee2cd7e90604401602060405180830381865afa158015611bd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfa9190614f62565b6001600160a01b038b16600090815260236020908152604080832060018452909152812054919250908210801590611c5557506001600160a01b038b1660009081526023602090815260408083206002845290915290205482105b15611c6257506001611d8d565b6001600160a01b038b166000908152602360209081526040808320600284529091529020548210801590611cb957506001600160a01b038b1660009081526023602090815260408083206003845290915290205482105b15611cc657506002611d8d565b6001600160a01b038b166000908152602360209081526040808320600384529091529020548210801590611d1d57506001600160a01b038b1660009081526023602090815260408083206004845290915290205482105b15611d2a57506003611d8d565b6001600160a01b038b166000908152602360209081526040808320600484529091529020548210611d5d57506004611d8d565b6001600160a01b038b16600090815260236020908152604080832060018452909152902054821015611d8d575060005b9a9950505050505050505050565b6001600160a01b0381166000908152601e6020908152604091829020825160a0810184528154815260018201549281019290925260028101549282018390526003810154606083015260040154608082015290421015611e3d5760405162461bcd60e51b815260206004820152600d60248201527f6e6f7420636c61696d54696d650000000000000000000000000000000000000060448201526064016113fb565b6001600160a01b03821660008181526021602090815260408083203380855290835281842094845260228352818420908452909152812090611e7e85612407565b90508060000361200357815460ff161515600103611ede5760405162461bcd60e51b815260206004820152601160248201527f616c726561647920676574526566756e6400000000000000000000000000000060448201526064016113fb565b6001600160a01b038516600090815260208080526040808320338452909152812060018086015490820154919291611f169190614efb565b845460ff1916600117855560028501819055604051909150600090339083908381818185875af1925050503d8060008114611f6d576040519150601f19603f3d011682016040523d82523d6000602084013e611f72565b606091505b5050905080611fb75760405162461bcd60e51b815260206004820152601160248201527018db185a5b481c99599d5b990819985a5b607a1b60448201526064016113fb565b604080516001600160a01b038a1681526020810184905233917fec1e5ed733e00f1a00915d56caef57b4f52312dde4f9b3165f213319a0da156b910160405180910390a25050506123c0565b600080600061201488336000611638565b9250925092506000821161206a5760405162461bcd60e51b815260206004820152601260248201527f6e6f20707572636861736520616d6f756e74000000000000000000000000000060448201526064016113fb565b600083116120a65760405162461bcd60e51b81526020600482015260096024820152681b9bc81c995dd85c9960ba1b60448201526064016113fb565b828560010154836120b79190614f0e565b10156121055760405162461bcd60e51b815260206004820152601460248201527f616c726561647920676574416c6c72657761726400000000000000000000000060448201526064016113fb565b6040516370a0823160e01b815230600482015283906001600160a01b038a16906370a0823190602401602060405180830381865afa15801561214b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216f9190614f62565b10156121bd5760405162461bcd60e51b815260206004820152601360248201527f646f6e7420686176652073616c65546f6b656e0000000000000000000000000060448201526064016113fb565b8285600101546121cd9190614efb565b60018601556121e66001600160a01b0389163385614647565b6001600160a01b0388166000908152601f60205260409020855460ff161580156122115750865460ff165b15612237576005810154612226906001614efb565b6005820155855460ff191660011786555b60008211801561224957506002860154155b15612377574782111561229e5760405162461bcd60e51b815260206004820152601460248201527f646f6e74206861766520726566756e6420746f6e00000000000000000000000060448201526064016113fb565b60028601829055604051600090339084908381818185875af1925050503d80600081146122e7576040519150601f19603f3d011682016040523d82523d6000602084013e6122ec565b606091505b50509050806123315760405162461bcd60e51b815260206004820152601160248201527018db185a5b481c99599d5b990819985a5b607a1b60448201526064016113fb565b604080516001600160a01b038c1681526020810185905233917fec1e5ed733e00f1a00915d56caef57b4f52312dde4f9b3165f213319a0da156b910160405180910390a2505b604080516001600160a01b038b1681526020810186905233917ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683910160405180910390a2505050505b5050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff16611632565b6001600160a01b0381166000818152601f60209081526040808320815160c0808201845282548252600180840154838701526002808501548487015260038086015460608087019190915260048088015460808089019190915260059889015460a0808a01919091529c8c52601d8b52898c208a5161014081018c5281548152968101549b87019b909b528a8501549986019990995291890154908401528701549582019590955292850154968301969096526006840154958201959095526007909201549081900b60e083015260ff63010000008204811615156101008401526401000000009091041615156101208201529091908261250785612581565b83602001516125169190614efb565b905060008260800151821061254b5760648360a00151836125379190614f21565b6125419190614f4e565b9695505050505050565b50600095945050505050565b6000828152600460205260409020600101546125728161475b565b61257c8383614765565b505050565b6001600160a01b03811660009081526016602052604081205481906125a7908490613f37565b905060006125b484613c86565b9050808210156125dc575050506001600160a01b031660009081526016602052604090205490565b6125e68482613347565b949350505050565b80806000036126245760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016113fb565b6001600160a01b0383166000818152601c60209081526040808320815161010081018352815481526001820154818501526002820154818401526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e08201908152948452601d909252909120915190919042116126f15760405162461bcd60e51b815260206004820152601b60248201527f6e65656420746f20656e6420746865206465706f73697454696d65000000000060448201526064016113fb565b60006126fc86612407565b90506000811161274e5760405162461bcd60e51b815260206004820152601660248201527f646f6e277420706173732074686520686172644361700000000000000000000060448201526064016113fb565b60078201546301000000900460ff1615156000036127c757848110156127a65760405162461bcd60e51b815260206004820152600d60248201526c30b6b7bab73a24b71037bb32b960991b60448201526064016113fb565b6006820181905560078201805463ff0000001916630100000017905561280b565b848260060154101561280b5760405162461bcd60e51b815260206004820152600d60248201526c30b6b7bab73a24b71037bb32b960991b60448201526064016113fb565b600b54600a546040516307f43c1960e31b81526001600160a01b0392831660048201529116602482015260009073__$86989bec654fe21c5325a7b16e11ff34c5$__90633fa1e0c890604401602060405180830381865af4158015612874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128989190614f7b565b9050600080826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156128db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ff9190614fd1565b5050505050915091506000826001600160a01b0316116129615760405162461bcd60e51b815260206004820152601060248201527f706f6f6c206e6f7420696e697469616c0000000000000000000000000000000060448201526064016113fb565b600061296e846078614807565b6040517fff9ceebd000000000000000000000000000000000000000000000000000000008152600282810b6004830152603c6024830152604482015290915073__$86989bec654fe21c5325a7b16e11ff34c5$__9063ff9ceebd90606401602060405180830381865af41580156129e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0d919061505b565b60020b8260020b12612a615760405162461bcd60e51b815260206004820152601860248201527f6f766572206368616e676564207469636b2072616e67652e000000000000000060448201526064016113fb565b600b54600a546007880154604051633e1644f160e11b8152600481018d90526001600160a01b038881166024830152938416604482015292909116606483015260020b6084820152600090819073__$86989bec654fe21c5325a7b16e11ff34c5$__90637c2c89e29060a401606060405180830381865af4158015612aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0e9190615076565b92505091506000600560009054906101000a90046001600160a01b03166001600160a01b0316600b60009054906101000a90046001600160a01b0316600a60009054906101000a90046001600160a01b0316610bb88f6000604051602401612bae9594939291906001600160a01b03958616815293909416602084015262ffffff919091166040830152606082015260ff91909116608082015260a00190565b60408051601f198184030181529181526020820180516001600160e01b031663f7729d4360e01b17905251612be391906150c8565b6000604051808303816000865af19150503d8060008114612c20576040519150601f19603f3d011682016040523d82523d6000602084013e612c25565b606091505b509150506000612c34826149c6565b90506103e8612c45826103e3614f21565b612c4f9190614f4e565b905083811015612ca15760405162461bcd60e51b815260206004820152601060248201527f7072696365496d70616374206f7665720000000000000000000000000000000060448201526064016113fb565b60068a01548e908e90612cb5908290614f0e565b60068d0155600c5460408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b158015612d0157600080fd5b505af1158015612d15573d6000803e3d6000fd5b50506040805161010081018252600b546001600160a01b039081168252600a5481166020830152610bb8828401526007548116606083015242608083015260a0820187905260c082018990528a811660e0830152600854925163414bf38960e01b81529195506000945091909116915063414bf38990612e039085906004016000610100820190506001600160a01b0380845116835280602085015116602084015262ffffff60408501511660408401528060608501511660608401526080840151608084015260a084015160a084015260c084015160c08401528060e08501511660e08401525092915050565b6020604051808303816000875af1158015612e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e469190614f62565b604080516001600160a01b03871681526020810186905290810182905290915033907f34c21668d9e0d31d289d483bfe1b46a335340504801ea7feebfbb347bc4fe5679060600160405180910390a2505050505050505050505050505050505050565b6001600160a01b0381163314612f275760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016113fb565b612f318282614a6a565b5050565b60186020528160005260406000208181548110612f5157600080fd5b6000918252602090912001546001600160a01b03169150829050565b600080612f7a8484611971565b9050600060ff821615612fc557815b60ff811615612fbb57612f9d8686836138ba565b612fa79083614efb565b915080612fb3816150e4565b915050612f89565b5091506116329050565b506000949350505050565b60196020528160005260406000208181548110612f5157600080fd5b6001600160a01b0381166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282019290925260038201546060820152600482015460808201819052600583015460a0830152600683015460c083015260079092015460e0820152904210156130b25760405162461bcd60e51b815260206004820152601260248201527f6e6f7420726f756e643153616c6554696d65000000000000000000000000000060448201526064016113fb565b8060a0015142106131055760405162461bcd60e51b815260206004820152601260248201527f656e6420726f756e643153616c6554696d65000000000000000000000000000060448201526064016113fb565b6001600160a01b0382166000908152602080805260408083203384529091529020805460ff16151560011461317c5760405162461bcd60e51b815260206004820152600c60248201527f6e6f2077686974656c697374000000000000000000000000000000000000000060448201526064016113fb565b60006131888433611971565b905060006131968534613f37565b905060006131a48633612f6d565b90508184600201546131b69190614efb565b8110156132055760405162461bcd60e51b815260206004820152600e60248201527f646f6e2774206f7665722062757900000000000000000000000000000000000060448201526064016113fb565b6001600160a01b0386166000908152601f6020526040812060018601549091036132ad576003810154613239906001614efb565b6003820155600281015461324e906001614efb565b60028201556001600160a01b038716600090815260276020908152604080832060ff88168452909152902054613285906001614efb565b6001600160a01b038816600090815260276020908152604080832060ff891684529091529020555b3485600101546132bd9190614efb565b600186015560028501546132d2908490614efb565b600286015560018101546132e7903490614efb565b600182015580546132f9908490614efb565b8155604080516001600160a01b038916815234602082015233917f9840f3ca16eed984a6ad48d36928a9cfb427c7f90a8d37e017b3385a747aa294910160405180910390a250505050505050565b6001600160a01b0382166000908152601d602090815260408083208151610140810183528154815260018201549381019390935260028082015492840183905260038201546060850181905260048301546080860152600583015460a0860152600683015460c08601526007909201549081900b60e085015260ff630100000082048116151561010086015264010000000090910416151561012084015283916133f19086614f21565b6133fb9190614f4e565b95945050505050565b6001600160a01b0381166000908152601d602052604090206007810154640100000000900460ff16151560011480159061344e575060078101546301000000900460ff1615156001145b61349a5760405162461bcd60e51b815260206004820152601a60248201527f6e656564207468652065786368616e676557544f4e746f544f5300000000000060448201526064016113fb565b6001600160a01b0382166000908152601f60205260408120906134bc84612407565b90506000816134ca86612581565b84600101546134d99190614efb565b6134e39190614f0e565b9050478111156135355760405162461bcd60e51b815260206004820152600d60248201527f686176656e277420746f6b656e0000000000000000000000000000000000000060448201526064016113fb565b60078401805464ff000000001916640100000000179055825460009061355a87611899565b6001870154875461356b9190614efb565b6135759190614f0e565b61357f9190614f0e565b9050801561361857600e54600f54604051631474f2a960e31b81526001600160a01b0389811660048301529182166024820152604481018490526000606482015260a06084820152600260a482015261060f60f31b60c482015291169063a3a795489060e401600060405180830381600087803b1580156135ff57600080fd5b505af1158015613613573d6000803e3d6000fd5b505050505b60065460405163024f96c560e11b81526001600160a01b0388811660048301529091169063049f2d8a9084906024016000604051808303818588803b15801561366057600080fd5b505af1158015613674573d6000803e3d6000fd5b5050604080516001600160a01b038b168152602081018790529081018790523393507f4c2c0ab6abacae9e08e6f826eee15e2782e65aaa46fa6d77cbaec9c94247aad59250606001905060405180910390a2505050505050565b6136d7336123c7565b61372e5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016113fb565b61196e7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282612557565b613761336123c7565b6137b85760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016113fb565b6001600160a01b03811661380e5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016113fb565b6001600160a01b03811633036138665760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016113fb565b6138907fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282612557565b61196e7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233612ea9565b6001600160a01b038084166000818152602080805260408083209487168352938152838220845160808082018752825460ff8082161515845261010091829004811684870152600180860154858b0152600295860154606080870191909152988852601d87528988208a5161014081018c52815481528183015498810198909852808701549a88019a909a5260038a015498870198909852600489015492860192909252600588015460a0860152600688015460c08601526007909701549283900b60e085015263010000008304811615159684019690965264010000000090910490941615156101208201528351919392909184919015151480156139c3575060008560ff16115b15613a33576001600160a01b038716600081815260266020908152604080832060ff8a16808552908352818420549484526024835281842090845290915290205483516127109291613a1491614f21565b613a1e9190614f4e565b613a289190614f4e565b93506118dd92505050565b60ff851615613ac9576001600160a01b038716600090815260266020908152604080832060ff89168452909152812054613a6e906001614efb565b6001600160a01b038916600090815260246020908152604080832060ff8b1684529091529020548451919250612710918391613aa991614f21565b613ab39190614f4e565b613abd9190614f4e565b94506118dd9350505050565b5060009695505050505050565b6001600160a01b0381166000908152601e60209081526040808320815160a08101835281548152600182015493810193909352600281015491830182905260038101546060840152600401546080830152421015613b3357600091505b42816040015111158015613b4a5750806060015142105b15613b585760019150613b8f565b42816060015111613b8f5760808101516060820151613b779042614f0e565b613b819190614f4e565b613b8c906002614efb565b91505b8051821115613b9d57805191505b50919050565b6001600160a01b03808316600090815260216020908152604080832093851683529281528282208351808501909452805460ff161580158552600190910154918401919091529091829182919080613bfd57506020810151155b15613c1357600080600093509350935050613c7f565b6000613c21878760006145a4565b90506000613c2f8883613347565b602084015190915060008082841015613c5f57613c4c8484614f0e565b9050613c588b85613f37565b9150613c73565b85602001519350613c708b84613f37565b91505b92975095509093505050505b9250925092565b600080601c6000846001600160a01b03166001600160a01b03168152602001908152602001600020604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152505090506000601d6000856001600160a01b03166001600160a01b0316815260200190815260200160002060405180610140016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820160009054906101000a900460020b60020b60020b81526020016007820160039054906101000a900460ff161515151581526020016007820160049054906101000a900460ff16151515158152505090508160a00151421015613dee57519392505050565b613df784613e06565b81602001516125e69190614efb565b6001600160a01b0381166000818152601f60209081526040808320815160c0808201845282548252600180840154838701526002808501548487015260038086015460608087019190915260048088015460808089019190915260059889015460a0808a01919091529c8c52601d8b52898c208a5161014081018c528154808252978201549c81019c909c52808601549a8c019a909a5292890154918a01919091528701549088015293850154978601979097526006840154908501526007909201549081900b60e084015260ff63010000008204811615156101008501526401000000009091041615156101208301528051929390926125e691614f0e565b601a6020528160005260406000208181548110613f2257600080fd5b90600052602060002001600091509150505481565b6001600160a01b0382166000908152601d602090815260408083208151610140810183528154815260018201549381019390935260028082015492840183905260038201546060850181905260048301546080860152600583015460a0860152600683015460c08601526007909201549081900b60e085015260ff63010000008204811615156101008601526401000000009091041615156101208401528391906133f19086614f21565b600082815260046020526040902060010154613ffd8161475b565b61257c8383614a6a565b6001600160a01b0381166000908152601c60209081526040918290208251610100810184528154815260018201549281019290925260028101549282018390526003810154606083015260048101546080830152600581015460a0830152600681015460c08301526007015460e0820152904210156140c85760405162461bcd60e51b815260206004820152601160248201527f6e6f742077686974656c69737454696d6500000000000000000000000000000060448201526064016113fb565b8060600151421061411b5760405162461bcd60e51b815260206004820152601160248201527f656e642077686974656c69737454696d6500000000000000000000000000000060448201526064016113fb565b60006141278333611971565b905060018160ff16101561417d5760405162461bcd60e51b815260206004820152601160248201527f6e65656420746f206d6f72652073544f5300000000000000000000000000000060448201526064016113fb565b6001600160a01b0383166000908152602080805260408083203384529091529020805460ff1615156001036141f45760405162461bcd60e51b815260206004820152601060248201527f616c726561647920617474656e6465640000000000000000000000000000000060448201526064016113fb565b6001600160a01b038416600081815260196020908152604080832080546001818101835591855283852001805473ffffffffffffffffffffffffffffffffffffffff191633179055855460ff8816610100810261ffff199092169190911782178755948452602583528184209484529390915290205461427391614efb565b6001600160a01b038516600090815260256020908152604080832060ff87168085529252909120919091556004036143ae576001600160a01b0384166000908152602660209081526040808320600484529091529020546142d5906001614efb565b6001600160a01b0385166000908152602660209081526040808320600484529091528082209290925560038152205461430f906001614efb565b6001600160a01b03851660009081526026602090815260408083206003845290915280822092909255600281522054614349906001614efb565b6001600160a01b0385166000908152602660209081526040808320600284529091528082209290925560018082529190205461438491614efb565b6001600160a01b038516600090815260266020908152604080832060018452909152902055614484565b8160ff166003036143e9576001600160a01b03841660009081526026602090815260408083206003845290915290205461430f906001614efb565b8160ff16600203614424576001600160a01b038416600090815260266020908152604080832060028452909152902054614349906001614efb565b8160ff16600103614484576001600160a01b0384166000908152602660209081526040808320600180855292529091205461445e91614efb565b6001600160a01b0385166000908152602660209081526040808320600184529091529020555b604080516001600160a01b038616815260ff8416602082015233917f80aaf28a2c7f80f586e64ede5c6c3b5433b8c6cf1351b6b51d8ab9febb8b5e7a91016115f3565b6001600160a01b0380831660009081526020808052604080832093851683529281528282208351608081018552815460ff808216158015845261010090920416938201939093526001820154948101949094526002015460608401529091829182919061457257600080600061453d8989613ba3565b9250925092508360400151836145539190614efb565b60608501516145629084614efb565b8296509650965050505050613c7f565b61457c8686613ba3565b93509350935050613c7f565b601b6020528160005260406000208181548110613f2257600080fd5b6001600160a01b03808416600090815260216020908152604080832093861683529281528282208351808501909452805460ff16151584526001015490830181905290919082906145f6908590614efb565b6001600160a01b0387166000908152601660205260408120549192509061461e908690614efb565b8261462889613c86565b6146329190614f21565b61463c9190614f4e565b979650505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916146a391906150c8565b6000604051808303816000865af19150503d80600081146146e0576040519150601f19603f3d011682016040523d82523d6000602084013e6146e5565b606091505b509150915081801561470f57508051158061470f57508080602001905181019061470f9190615101565b6123c05760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016113fb565b61196e8133614aed565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16612f315760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556147c33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008163ffffffff166000036148445760405162461bcd60e51b8152602060048201526002602482015261042560f41b60448201526064016113fb565b604080516002808252606082018352600092602083019080368337019050509050828160008151811061487957614879615132565b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106148a8576148a8615132565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526000906001600160a01b0386169063883bdbfd906148ec908590600401615148565b600060405180830381865afa158015614909573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052614931919081019061525b565b50905060008160008151811061494957614949615132565b60200260200101518260018151811061496457614964615132565b60200260200101516149769190615327565b9050614986600386900b82615354565b935060008160060b1280156149aa57506149a4600386900b82615392565b60060b15155b156149bd57836149b9816153b4565b9450505b50505092915050565b60008151602014614a5657604482511015614a235760405162461bcd60e51b815260206004820152601060248201527f556e6578706563746564206572726f720000000000000000000000000000000060448201526064016113fb565b60048201915081806020019051810190614a3d91906153cd565b60405162461bcd60e51b81526004016113fb9190615461565b818060200190518101906116329190614f62565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615612f315760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16612f3157614b2081614b62565b614b2b836020614b74565b604051602001614b3c929190615494565b60408051601f198184030181529082905262461bcd60e51b82526113fb91600401615461565b60606116326001600160a01b03831660145b60606000614b83836002614f21565b614b8e906002614efb565b67ffffffffffffffff811115614ba657614ba661511c565b6040519080825280601f01601f191660200182016040528015614bd0576020820181803683370190505b509050600360fc1b81600081518110614beb57614beb615132565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614c1a57614c1a615132565b60200101906001600160f81b031916908160001a9053506000614c3e846002614f21565b614c49906001614efb565b90505b6001811115614cce577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110614c8a57614c8a615132565b1a60f81b828281518110614ca057614ca0615132565b60200101906001600160f81b031916908160001a90535060049490941c93614cc781615515565b9050614c4c565b5083156118dd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016113fb565b6001600160a01b038116811461196e57600080fd5b600060208284031215614d4457600080fd5b81356118dd81614d1d565b600060208284031215614d6157600080fd5b81356001600160e01b0319811681146118dd57600080fd5b600080600060608486031215614d8e57600080fd5b8335614d9981614d1d565b92506020840135614da981614d1d565b929592945050506040919091013590565b60ff8116811461196e57600080fd5b60008060408385031215614ddc57600080fd5b8235614de781614d1d565b91506020830135614df781614dba565b809150509250929050565b60008060408385031215614e1557600080fd5b8235614e2081614d1d565b91506020830135614df781614d1d565b600060208284031215614e4257600080fd5b5035919050565b60008060408385031215614e5c57600080fd5b823591506020830135614df781614d1d565b60008060408385031215614e8157600080fd5b8235614e8c81614d1d565b946020939093013593505050565b600080600060608486031215614eaf57600080fd5b8335614eba81614d1d565b92506020840135614eca81614d1d565b91506040840135614eda81614dba565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082018082111561163257611632614ee5565b8181038181111561163257611632614ee5565b808202811582820484141761163257611632614ee5565b634e487b7160e01b600052601260045260246000fd5b600082614f5d57614f5d614f38565b500490565b600060208284031215614f7457600080fd5b5051919050565b600060208284031215614f8d57600080fd5b81516118dd81614d1d565b8051600281900b8114614faa57600080fd5b919050565b805161ffff81168114614faa57600080fd5b80518015158114614faa57600080fd5b600080600080600080600060e0888a031215614fec57600080fd5b8751614ff781614d1d565b965061500560208901614f98565b955061501360408901614faf565b945061502160608901614faf565b935061502f60808901614faf565b925060a088015161503f81614dba565b915061504d60c08901614fc1565b905092959891949750929550565b60006020828403121561506d57600080fd5b6118dd82614f98565b60008060006060848603121561508b57600080fd5b83519250602084015191506040840151614eda81614d1d565b60005b838110156150bf5781810151838201526020016150a7565b50506000910152565b600082516150da8184602087016150a4565b9190910192915050565b600060ff8216806150f7576150f7614ee5565b6000190192915050565b60006020828403121561511357600080fd5b6118dd82614fc1565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b8181101561518657835163ffffffff1683529284019291840191600101615164565b50909695505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156151bb576151bb61511c565b604052919050565b600067ffffffffffffffff8211156151dd576151dd61511c565b5060051b60200190565b600082601f8301126151f857600080fd5b8151602061520d615208836151c3565b615192565b82815260059290921b8401810191818101908684111561522c57600080fd5b8286015b8481101561525057805161524381614d1d565b8352918301918301615230565b509695505050505050565b6000806040838503121561526e57600080fd5b825167ffffffffffffffff8082111561528657600080fd5b818501915085601f83011261529a57600080fd5b815160206152aa615208836151c3565b82815260059290921b840181019181810190898411156152c957600080fd5b948201945b838610156152f75785518060060b81146152e85760008081fd5b825294820194908201906152ce565b9188015191965090935050508082111561531057600080fd5b5061531d858286016151e7565b9150509250929050565b600682810b9082900b03667fffffffffffff198112667fffffffffffff8213171561163257611632614ee5565b60008160060b8360060b8061536b5761536b614f38565b667fffffffffffff1982146000198214161561538957615389614ee5565b90059392505050565b60008260060b806153a5576153a5614f38565b808360060b0791505092915050565b60008160020b627fffff1981036150f7576150f7614ee5565b6000602082840312156153df57600080fd5b815167ffffffffffffffff808211156153f757600080fd5b818401915084601f83011261540b57600080fd5b81518181111561541d5761541d61511c565b615430601f8201601f1916602001615192565b915080825285602082850101111561544757600080fd5b6154588160208401602086016150a4565b50949350505050565b60208152600082518060208401526154808160408501602087016150a4565b601f01601f19169190910160400192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516154cc8160178501602088016150a4565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516155098160288401602088016150a4565b01602801949350505050565b60008161552457615524614ee5565b50600019019056fea164736f6c6343000812000a",
  "libraries": {
    "LibPublicSaleVault": "0xb125F83D2424C3b79719F05B45b40177D5313ddc"
  },
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10792,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10796,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10800,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10804,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5824,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "quoter",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5826,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "vestingFund",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5828,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "liquidityVault",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5830,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "uniswapRouter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5832,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "lockTOS",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5834,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tos",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5836,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "ton",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5839,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "_WETH",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IWETH)2037"
      },
      {
        "astId": 5841,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "l2ProjectManager",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 5843,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "l2Bridge",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5845,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "l1burnVault",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 5847,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "minPer",
        "offset": 20,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 5849,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "maxPer",
        "offset": 21,
        "slot": "15",
        "type": "t_uint8"
      },
      {
        "astId": 5851,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "stanTier1",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5853,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "stanTier2",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5855,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "stanTier3",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5857,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "stanTier4",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5859,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "delayTime",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5861,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "changeTick",
        "offset": 0,
        "slot": "21",
        "type": "t_int24"
      },
      {
        "astId": 5864,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "free",
        "offset": 3,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 5868,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "totalDepositAmount",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5872,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "vaultAdminOfToken",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5877,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "depositors",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5882,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "whitelists",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5887,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "claimTimes",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5892,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "claimPercents",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5897,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "timeInfo",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_struct(TokenTimeManage)9089_storage)"
      },
      {
        "astId": 5902,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "manageInfo",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_struct(TokenSaleManage)9110_storage)"
      },
      {
        "astId": 5907,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "claimInfo",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_struct(TokenSaleClaim)9121_storage)"
      },
      {
        "astId": 5912,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "saleInfo",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_struct(TokenSaleInfo)9134_storage)"
      },
      {
        "astId": 5919,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "user1rd",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo1rd)9143_storage))"
      },
      {
        "astId": 5926,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "user2rd",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo2rd)9148_storage))"
      },
      {
        "astId": 5933,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "userClaim",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserClaim)9157_storage))"
      },
      {
        "astId": 5939,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tiers",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5945,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tiersPercents",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5951,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tiersWhiteList",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5957,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tiersCalculAccount",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 5963,
        "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
        "label": "tiers1stAccount",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IWETH)2037": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserClaim)9157_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserClaim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserClaim)9157_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo1rd)9143_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserInfo1rd))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo1rd)9143_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo2rd)9148_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct LibPublicSaleVault.UserInfo2rd))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo2rd)9148_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_struct(TokenSaleClaim)9121_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleClaim)9121_storage"
      },
      "t_mapping(t_address,t_struct(TokenSaleInfo)9134_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleInfo)9134_storage"
      },
      "t_mapping(t_address,t_struct(TokenSaleManage)9110_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenSaleManage)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenSaleManage)9110_storage"
      },
      "t_mapping(t_address,t_struct(TokenTimeManage)9089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.TokenTimeManage)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenTimeManage)9089_storage"
      },
      "t_mapping(t_address,t_struct(UserClaim)9157_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserClaim)",
        "numberOfBytes": "32",
        "value": "t_struct(UserClaim)9157_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo1rd)9143_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserInfo1rd)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo1rd)9143_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo2rd)9148_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibPublicSaleVault.UserInfo2rd)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo2rd)9148_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenSaleClaim)9121_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleClaim",
        "members": [
          {
            "astId": 9112,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "totalClaimCounts",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9114,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "firstClaimPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9116,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "firstClaimTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9118,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "secondClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9120,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "claimInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenSaleInfo)9134_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleInfo",
        "members": [
          {
            "astId": 9123,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "total1rdSaleAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9125,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "total1rdTONAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9127,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "totalUsers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9129,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "total1rdUsers",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9131,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "total2rdUsers",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9133,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "total2rdUsersClaim",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TokenSaleManage)9110_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenSaleManage",
        "members": [
          {
            "astId": 9091,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "set1rdTokenAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9093,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "set2rdTokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9095,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "saleTokenPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9097,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "tonPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9099,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "hardCap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9101,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "changeTOS",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9103,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "remainTON",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9105,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "changeTick",
            "offset": 0,
            "slot": "7",
            "type": "t_int24"
          },
          {
            "astId": 9107,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "exchangeTOS",
            "offset": 3,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9109,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "adminWithdraw",
            "offset": 4,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(TokenTimeManage)9089_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.TokenTimeManage",
        "members": [
          {
            "astId": 9074,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "deployTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9076,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "snapshot",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9078,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "whiteListStartTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9080,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "whiteListEndTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9082,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "round1StartTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9084,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "round1EndTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9086,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "round2StartTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9088,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "round2EndTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserClaim)9157_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserClaim",
        "members": [
          {
            "astId": 9150,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "refund",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9152,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "claimAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9154,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "refundAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9156,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "latestClaimedRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo1rd)9143_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserInfo1rd",
        "members": [
          {
            "astId": 9136,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "join",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9138,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "tier",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 9140,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "payAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9142,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "saleAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo2rd)9148_storage": {
        "encoding": "inplace",
        "label": "struct LibPublicSaleVault.UserInfo2rd",
        "members": [
          {
            "astId": 9145,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "join",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 9147,
            "contract": "contracts/L2/vaults/L2PublicSaleVault.sol:L2PublicSaleVault",
            "label": "depositAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}