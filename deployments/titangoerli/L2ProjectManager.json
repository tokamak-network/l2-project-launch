{
  "address": "0x3A8a93e37cE6ca1bce6a9f66232Fe4d7D99716FB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "CreatedL2Project",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "DistributedL2Token",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "name": "createL2Project",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[]",
                      "name": "claimTimes",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "claimPercents",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "distributesL2Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stosTier1",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier2",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier3",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stosTier4",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier1Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier2Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier3Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tier4Percents",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total1roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "total2roundSaleAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "saleTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payTokenPrice",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "hardcapAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "changeTOSPercent",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "startWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endWhiteTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end1roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "snapshotTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "start2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "end2roundTime",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "claimCounts",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleVault",
                  "name": "vaultParams",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256[]",
                      "name": "claimTimes",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "claimPercents",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterPublicSaleClaim",
                  "name": "claimParams",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterPublicSale",
              "name": "publicSaleParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tosPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initSqrtPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "startTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "fee",
                  "type": "uint16"
                }
              ],
              "internalType": "struct LibProject.InitalParameterInitialLiquidityVault",
              "name": "initialVaultParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "claimer",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalAllocatedAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalClaimCount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "firstClaimAmount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint32",
                      "name": "firstClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "secondClaimTime",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "roundIntervalTime",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct LibProject.InitalParameterScheduleVault",
                  "name": "params",
                  "type": "tuple"
                }
              ],
              "internalType": "struct LibProject.InitalParameterLiquidityRewardVault",
              "name": "rewardParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tosAirdropParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "tonAirdropParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.TokamakVaults",
          "name": "tokamakVaults",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "claimer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAllocatedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalClaimCount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "firstClaimAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "firstClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "secondClaimTime",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "roundIntervalTime",
                  "type": "uint32"
                }
              ],
              "internalType": "struct LibProject.InitalParameterScheduleVault",
              "name": "params",
              "type": "tuple"
            }
          ],
          "internalType": "struct LibProject.InitalParameterSchedule[]",
          "name": "customScheduleVaults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "vaultName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAllocatedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibProject.InitalParameterNonScheduleVault[]",
          "name": "customNonScheduleVaults",
          "type": "tuple[]"
        }
      ],
      "name": "distributesL2TokenOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLiquidityVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2CrossDomainMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2TokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityRewardVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonScheduleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "projectOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "scheduleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1ProjectManager",
          "type": "address"
        }
      ],
      "name": "setL1ProjectManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2CrossDomainMessenger",
          "type": "address"
        }
      ],
      "name": "setL2CrossDomainMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2TokenFactory",
          "type": "address"
        }
      ],
      "name": "setL2TokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "publicSale",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initialLiquidity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tonAirdrop",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tosAirdrop",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_scheduleVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nonScheduleVault",
          "type": "address"
        }
      ],
      "name": "setTokamakVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenMaps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tonAirdropVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tosAirdropVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2token",
          "type": "address"
        }
      ],
      "name": "viewProject",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "projectOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l1Token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "l2Token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "projectName",
              "type": "string"
            }
          ],
          "internalType": "struct LibProject.L2ProjectInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdaa29afff72b2a92112f285471d32e4372c8521c5aa5cd003ae973ed10e3cff2",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x3A8a93e37cE6ca1bce6a9f66232Fe4d7D99716FB",
    "transactionIndex": 0,
    "gasUsed": "3345699",
    "logsBloom": "0x
    "blockHash": "0x7162ab87c55129de9f8a599ba7ec688cf56026d1d7f0a1e2301039b1b8064052",
    "transactionHash": "0xdaa29afff72b2a92112f285471d32e4372c8521c5aa5cd003ae973ed10e3cff2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 23719,
        "transactionHash": "0xdaa29afff72b2a92112f285471d32e4372c8521c5aa5cd003ae973ed10e3cff2",
        "address": "0x3A8a93e37cE6ca1bce6a9f66232Fe4d7D99716FB",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7162ab87c55129de9f8a599ba7ec688cf56026d1d7f0a1e2301039b1b8064052"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 23719,
        "transactionHash": "0xdaa29afff72b2a92112f285471d32e4372c8521c5aa5cd003ae973ed10e3cff2",
        "address": "0x3A8a93e37cE6ca1bce6a9f66232Fe4d7D99716FB",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6",
          "0x000000000000000000000000c1eba383d94c6021160042491a5dfaf1d82694e6"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x7162ab87c55129de9f8a599ba7ec688cf56026d1d7f0a1e2301039b1b8064052"
      }
    ],
    "blockNumber": 23719,
    "cumulativeGasUsed": "3345699",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "eab3c08e697a64ed47695ec2be145077",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"CreatedL2Project\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"DistributedL2Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"name\":\"createL2Project\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimPercents\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"distributesL2Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stosTier1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stosTier4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier1Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier2Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier3Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tier4Percents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total1roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total2roundSaleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"saleTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"changeTOSPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endWhiteTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end1roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"snapshotTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end2roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCounts\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleVault\",\"name\":\"vaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"claimTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimPercents\",\"type\":\"uint256[]\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSaleClaim\",\"name\":\"claimParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterPublicSale\",\"name\":\"publicSaleParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tosPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initSqrtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"internalType\":\"struct LibProject.InitalParameterInitialLiquidityVault\",\"name\":\"initialVaultParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterLiquidityRewardVault\",\"name\":\"rewardParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tosAirdropParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"tonAirdropParams\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.TokamakVaults\",\"name\":\"tokamakVaults\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"firstClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondClaimTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roundIntervalTime\",\"type\":\"uint32\"}],\"internalType\":\"struct LibProject.InitalParameterScheduleVault\",\"name\":\"params\",\"type\":\"tuple\"}],\"internalType\":\"struct LibProject.InitalParameterSchedule[]\",\"name\":\"customScheduleVaults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocatedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibProject.InitalParameterNonScheduleVault[]\",\"name\":\"customNonScheduleVaults\",\"type\":\"tuple[]\"}],\"name\":\"distributesL2TokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidityVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2CrossDomainMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2TokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRewardVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonScheduleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1ProjectManager\",\"type\":\"address\"}],\"name\":\"setL1ProjectManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2CrossDomainMessenger\",\"type\":\"address\"}],\"name\":\"setL2CrossDomainMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2TokenFactory\",\"type\":\"address\"}],\"name\":\"setL2TokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"publicSale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tonAirdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tosAirdrop\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_scheduleVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nonScheduleVault\",\"type\":\"address\"}],\"name\":\"setTokamakVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tonAirdropVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tosAirdropVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2token\",\"type\":\"address\"}],\"name\":\"viewProject\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"}],\"internalType\":\"struct LibProject.L2ProjectInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"createL2Project(address,address,address,string)\":{\"details\":\"\\ud504\\ub85c\\uc81d\\ud2b8 \\ucd94\\uac00\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setL1ProjectManager(address)\":{\"details\":\"l1ProjectManager \\uc8fc\\uc18c \\uc124\\uc815\"},\"setL2CrossDomainMessenger(address)\":{\"details\":\"l2CrossDomainMessenger \\uc8fc\\uc18c \\uc124\\uc815\"},\"setL2TokenFactory(address)\":{\"details\":\"l2TokenFactory \\uc8fc\\uc18c \\uc124\\uc815\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"title\":\"L2ProjectManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/L2ProjectManager.sol\":\"L2ProjectManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/L2ProjectManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../common/AccessibleCommon.sol\\\";\\nimport \\\"./L2ProjectManagerStorage.sol\\\";\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/LibProject.sol\\\";\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IL2CrossDomainMessenger {\\n    function xDomainMessageSender() external view returns (address);\\n}\\n\\ninterface IL2CustomVaultBase {\\n    function setVaultAdmin(\\n        address l2Token,\\n        address _newAdmin\\n    ) external;\\n\\n    function isVaultAdmin(address l2Token, address account) external view returns (bool);\\n}\\n\\ninterface IL2PublicSaleVault {\\n    function vaultInitialize(\\n        address l2Token,\\n        LibProject.InitalParameterPublicSaleVault memory vaultParams,\\n        LibProject.InitalParameterPublicSaleClaim memory claimParams\\n    ) external;\\n}\\n\\ninterface IL2InitialLiquidityVault {\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterInitialLiquidityVault memory params\\n    ) external;\\n}\\n\\ninterface IL2LiquidityRewardVault {\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterLiquidityRewardVault memory params\\n    ) external;\\n}\\n\\ninterface IL2ScheduleVault {\\n    function initialize(\\n        address l2Token,\\n        string memory vaultName,\\n        LibProject.InitalParameterScheduleVault memory params\\n    ) external;\\n}\\n\\ninterface IL2NonScheduleVault {\\n    function initialize(\\n        address l2Token,\\n        string memory vaultName,\\n        address claimer,\\n        uint256 totalAllocatedAmount\\n    ) external;\\n}\\n\\ninterface IL2AirdropStosVault {\\n    function initialize(\\n        address l2Token,\\n        LibProject.InitalParameterScheduleVault memory params\\n    ) external;\\n}\\n\\n\\n/**\\n * @title L2ProjectManager\\n * @dev\\n */\\ncontract L2ProjectManager is ProxyStorage, AccessibleCommon, L2ProjectManagerStorage {\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyL2TokenFactory() {\\n        require(l2TokenFactory != address(0) && msg.sender == l2TokenFactory, \\\"caller is not l2TokenFactory\\\");\\n        _;\\n    }\\n\\n    modifier onlyMessengerAndL1ProjectManager() {\\n        require(msg.sender == l2CrossDomainMessenger &&\\n        IL2CrossDomainMessenger(l2CrossDomainMessenger).xDomainMessageSender() == l1ProjectManager,\\n        \\\"not onlyMessengerAndL1ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n    event CreatedL2Project(address indexed l1Token, address indexed l2Token, address projectOwner, string projectName);\\n    event DistributedL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount\\n        );\\n\\n    /* ========== DEPENDENCIES ========== */\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor() {\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /* ========== onlyOwner ========== */\\n\\n    /// @dev l1ProjectManager \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL1ProjectManager(address _l1ProjectManager)\\n        external nonZeroAddress(_l1ProjectManager) onlyOwner\\n    {\\n        require(l1ProjectManager != _l1ProjectManager, \\\"same\\\");\\n        l1ProjectManager = _l1ProjectManager;\\n    }\\n\\n    /// @dev l2TokenFactory \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL2TokenFactory(address _l2TokenFactory)\\n        external nonZeroAddress(_l2TokenFactory) onlyOwner\\n    {\\n        require(l2TokenFactory != _l2TokenFactory, \\\"same\\\");\\n        l2TokenFactory = _l2TokenFactory;\\n    }\\n\\n    /// @dev l2CrossDomainMessenger \\uc8fc\\uc18c \\uc124\\uc815\\n    function setL2CrossDomainMessenger(address _l2CrossDomainMessenger)\\n        external nonZeroAddress(_l2CrossDomainMessenger) onlyOwner\\n    {\\n        require(l2CrossDomainMessenger != _l2CrossDomainMessenger, \\\"same\\\");\\n        l2CrossDomainMessenger = _l2CrossDomainMessenger;\\n    }\\n\\n    function setTokamakVaults(\\n        address publicSale,\\n        address initialLiquidity,\\n        address liquidityReward,\\n        address tonAirdrop,\\n        address tosAirdrop,\\n        address _scheduleVault,\\n        address _nonScheduleVault\\n        )\\n        external onlyOwner\\n        // nonZeroAddress(publicSale)\\n        nonZeroAddress(initialLiquidity)\\n        // nonZeroAddress(liquidityReward)\\n        nonZeroAddress(tosAirdrop)\\n        // nonZeroAddress(tonAirdrop)\\n        nonZeroAddress(_scheduleVault)\\n        nonZeroAddress(_nonScheduleVault)\\n    {\\n        // require(scheduleVault == address(0), \\\"already set\\\");\\n        // require(\\n        //     publicSaleVault != publicSale ||\\n        //     initialLiquidityVault != initialLiquidity ||\\n        //     liquidityRewardVault != liquidityReward ||\\n        //     tonAirdropVault != tonAirdrop ||\\n        //     tosAirdropVault != tosAirdrop\\n        //     , \\\"same\\\");\\n\\n        publicSaleVault = publicSale;\\n        initialLiquidityVault = initialLiquidity;\\n        liquidityReward = liquidityReward;\\n        tonAirdropVault = tonAirdrop;\\n        tosAirdropVault = tosAirdrop;\\n        scheduleVault = _scheduleVault;\\n        nonScheduleVault = _nonScheduleVault;\\n    }\\n\\n    /* ========== only L2TokenFactory ========== */\\n\\n    /// @dev \\ud504\\ub85c\\uc81d\\ud2b8 \\ucd94\\uac00\\n    function createL2Project(\\n        address projectOwner,\\n        address l1Token,\\n        address l2Token,\\n        string calldata projectName\\n    )\\n        external onlyL2TokenFactory\\n    {\\n        require(bytes(projectName).length != 0, \\\"projectName is null\\\");\\n        require(projects[l2Token].l1Token == address(0), \\\"already added\\\");\\n        projects[l2Token] = LibProject.L2ProjectInfo({\\n            projectId: 0,\\n            projectOwner: projectOwner,\\n            l1Token : l1Token,\\n            l2Token : l2Token,\\n            projectName : projectName\\n        });\\n        tokenMaps[l1Token] = l2Token;\\n        emit CreatedL2Project(l1Token, l2Token, projectOwner, projectName);\\n    }\\n\\n    /* ========== only L2CrossDomainMessengerAndL1ProjectManager ========== */\\n\\n    function _approveVaults(address l2Token, address vault, uint256 amount) internal {\\n\\n        // uint256 allowance = IERC20(l2Token).allowance(address(this), vault);\\n\\n        if (vault != address(0) && amount != 0 &&   IERC20(l2Token).allowance(address(this), vault) < amount) {\\n\\n            IERC20(l2Token).approve(vault, amount);\\n        }\\n    }\\n\\n    function distributesL2TokenOwner(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external\\n        nonZeroAddress(l1Token)\\n        nonZeroAddress(l2Token)\\n        nonZero(projectId) nonZero(totalAmount)\\n    {\\n        require(projects[l2Token].projectOwner == msg.sender, \\\"not projectOwner\\\");\\n\\n        _distributesL2Token(\\n            l1Token, l2Token, projectId, totalAmount,\\n            tokamakVaults, customScheduleVaults, customNonScheduleVaults\\n        );\\n    }\\n\\n    function distributesL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    )\\n        external onlyMessengerAndL1ProjectManager\\n        nonZeroAddress(l1Token)\\n        nonZeroAddress(l2Token)\\n        nonZero(projectId) nonZero(totalAmount)\\n    {\\n        _distributesL2Token(\\n            l1Token, l2Token, projectId, totalAmount,\\n            tokamakVaults, customScheduleVaults, customNonScheduleVaults\\n        );\\n    }\\n\\n    function _distributesL2Token(\\n        address l1Token,\\n        address l2Token,\\n        uint256 projectId,\\n        uint256 totalAmount,\\n        LibProject.TokamakVaults memory tokamakVaults,\\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\\n    ) internal {\\n        LibProject.L2ProjectInfo memory info = projects[l2Token];\\n\\n        require(info.l1Token == l1Token, \\\"not matched l1Token\\\");\\n        require(info.l2Token == l2Token, \\\"not matched l2Token\\\");\\n\\n        uint256 publicTotal = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n            + tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount;\\n\\n        uint256 total = publicTotal +\\n            tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n            tokamakVaults.rewardParams.params.totalAllocatedAmount +\\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        uint256 totalCustomSchedule = 0;\\n        uint256 totalNonCustomSchedule = 0;\\n\\n        for (uint256 i = 0; i < customScheduleVaults.length; i++)\\n            totalCustomSchedule += customScheduleVaults[i].params.totalAllocatedAmount;\\n\\n        for (uint256 j = 0; j < customNonScheduleVaults.length; j++)\\n            totalNonCustomSchedule += customNonScheduleVaults[j].totalAllocatedAmount;\\n\\n        total += (totalCustomSchedule + totalNonCustomSchedule);\\n\\n        require(total == totalAmount, \\\"not matched totalAmount\\\");\\n        require(totalAmount <= IERC20(l2Token).balanceOf(address(this)), \\\"insufficient balance\\\");\\n\\n        projects[info.l2Token].projectId = projectId;\\n        _approveVaults(info.l2Token, publicSaleVault, publicTotal);\\n        _approveVaults(info.l2Token, initialLiquidityVault, tokamakVaults.initialVaultParams.totalAllocatedAmount);\\n        _approveVaults(info.l2Token, liquidityRewardVault, tokamakVaults.rewardParams.params.totalAllocatedAmount);\\n        _approveVaults(info.l2Token, tonAirdropVault, tokamakVaults.tonAirdropParams.totalAllocatedAmount);\\n        _approveVaults(info.l2Token, tosAirdropVault, tokamakVaults.tosAirdropParams.totalAllocatedAmount);\\n\\n        if (publicTotal != 0) {\\n            IL2CustomVaultBase(publicSaleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n            IL2PublicSaleVault(publicSaleVault).vaultInitialize(\\n                info.l2Token,\\n                tokamakVaults.publicSaleParams.vaultParams,\\n                tokamakVaults.publicSaleParams.claimParams\\n            );\\n        }\\n        LibProject.InitalParameterInitialLiquidityVault memory initialVaultParams = tokamakVaults.initialVaultParams;\\n\\n        if (tokamakVaults.initialVaultParams.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(initialLiquidityVault).isVaultAdmin(info.l2Token, info.projectOwner)) IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n            IL2InitialLiquidityVault(initialLiquidityVault).initialize(\\n                info.l2Token,\\n                initialVaultParams);\\n        }\\n\\n        if (tokamakVaults.rewardParams.params.totalAllocatedAmount != 0) {\\n            // // liquidity reward\\n            // IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(l2Token, projects[l2Token].projectOwner);\\n            // IL2LiquidityRewardVault(liquidityRewardVault).initialize(\\n            //     l2Token,\\n            //     tokamakVaults.rewardParams);\\n        }\\n\\n        if (tokamakVaults.tosAirdropParams.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(tosAirdropVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(tosAirdropVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            IL2AirdropStosVault(tosAirdropVault).initialize(\\n                info.l2Token,\\n                tokamakVaults.tosAirdropParams);\\n        }\\n\\n        if (tokamakVaults.tonAirdropParams.totalAllocatedAmount != 0) {\\n            if(!IL2CustomVaultBase(tonAirdropVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(tonAirdropVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            IL2AirdropStosVault(tonAirdropVault).initialize(\\n                info.l2Token,\\n                tokamakVaults.tonAirdropParams);\\n        }\\n\\n        uint256 projectId_ = projectId;\\n        if (totalCustomSchedule != 0) {\\n            if(!IL2CustomVaultBase(scheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(scheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            for (uint256 i = 0; i < customScheduleVaults.length; i++){\\n                LibProject.InitalParameterSchedule memory params = customScheduleVaults[i];\\n\\n                _approveVaults(info.l2Token, scheduleVault, params.params.totalAllocatedAmount);\\n\\n                IL2ScheduleVault(scheduleVault).initialize(\\n                    info.l2Token,\\n                    params.vaultName,\\n                    params.params);\\n            }\\n        }\\n\\n        if (totalNonCustomSchedule != 0) {\\n            if(!IL2CustomVaultBase(nonScheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\\n                IL2CustomVaultBase(nonScheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\\n\\n            for (uint256 i = 0; i < customNonScheduleVaults.length; i++){\\n                LibProject.InitalParameterNonScheduleVault memory params = customNonScheduleVaults[i];\\n                _approveVaults(info.l2Token, nonScheduleVault, params.totalAllocatedAmount);\\n\\n                IL2NonScheduleVault(nonScheduleVault).initialize(\\n                    info.l2Token,\\n                    params.vaultName,\\n                    params.claimer,\\n                    params.totalAllocatedAmount );\\n            }\\n        }\\n\\n        emit DistributedL2Token(info.l1Token, info.l2Token, projectId_, total);\\n    }\\n\\n\\n    /* ========== Anyone can execute ========== */\\n\\n    /* ========== VIEW ========== */\\n\\n    function viewProject(address l2token) external view returns (LibProject.L2ProjectInfo memory) {\\n        return projects[l2token];\\n    }\\n    /* === ======= internal ========== */\\n\\n}\",\"keccak256\":\"0xd49f1bf8d8e531e59228fa692cba9b60a3482d3af8c0c63bfd83228ecbffec11\",\"license\":\"MIT\"},\"contracts/L2/L2ProjectManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\nimport { LibProject } from \\\"../libraries/LibProject.sol\\\";\\n\\n/**\\n * @title L2ProjectManagerStorage\\n * @dev\\n */\\ncontract L2ProjectManagerStorage {\\n\\n    bool internal free = true;\\n    address public l1ProjectManager;\\n    address public l2TokenFactory;\\n    address public l2CrossDomainMessenger;\\n\\n    // \\ud1a0\\ud070\\ubcc4\\ub85c \\ub300\\ud45c\\ub418\\ub294 \\ubcfc\\ud2b8\\n    address public publicSaleVault;\\n    address public initialLiquidityVault;\\n    address public liquidityRewardVault;\\n    address public tonAirdropVault;\\n    address public tosAirdropVault;\\n\\n    address public scheduleVault; // customScheduleVault\\n    address public nonScheduleVault;    // customNonScheduleVault\\n\\n    // l2token - L2ProjectInfo\\n    mapping(address => LibProject.L2ProjectInfo) public projects;\\n\\n    // l1token - l2token\\n    mapping(address => address) public tokenMaps;\\n\\n}\\n\",\"keccak256\":\"0x809825dcd965f575234470617a615db4435af4d640ee2f6660f0f6cdb24a846c\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x4dfcbed37adf9f54e4544d13382814f51c9ef5d52ca4277d2080f988857f3b23\",\"license\":\"MIT\"},\"contracts/libraries/LibProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface AddressManagerI {\\n    function getAddress(string memory _name) external view returns (address);\\n}\\n\\n/**\\n * @title LibProject\\n */\\nlibrary LibProject {\\n\\n    enum TOKEN_TYPE {\\n        ERC20_A,\\n        ERC20_B,\\n        ERC20_C,\\n        ERC20_D,\\n        NONE\\n    }\\n\\n    enum L2_TYPE {\\n        TOKAMAL_OPTIMISM,\\n        TOKAMAL_ZKEVM,\\n        NONE\\n    }\\n\\n    struct ProjectInfo {\\n        address projectOwner;\\n        address tokenOwner;\\n        address l1Token;\\n        address l2Token;\\n        address addressManager;\\n        uint256 initialTotalSupply;\\n        uint8 tokenType;\\n        uint8 l2Type;\\n        string projectName;\\n    }\\n\\n    struct L2Info {\\n        address l2TokenFactory;\\n        address l2ProjectManager;\\n        uint32 depositMinGasLimit;\\n        uint32 sendMsgMinGasLimit;\\n    }\\n\\n    struct L2ProjectInfo {\\n        uint256 projectId;\\n        address projectOwner;\\n        address l1Token;\\n        address l2Token;\\n        string projectName;\\n    }\\n\\n    struct TokamakVaults {\\n        InitalParameterPublicSale publicSaleParams;\\n        InitalParameterInitialLiquidityVault initialVaultParams;\\n        InitalParameterLiquidityRewardVault rewardParams;\\n        InitalParameterScheduleVault tosAirdropParams;\\n        InitalParameterScheduleVault tonAirdropParams;\\n    }\\n\\n    struct InitalParameterPublicSale {\\n        InitalParameterPublicSaleVault vaultParams;\\n        InitalParameterPublicSaleClaim claimParams;\\n    }\\n\\n    struct InitalParameterPublicSaleVault {\\n        uint256 stosTier1;\\n        uint256 stosTier2;\\n        uint256 stosTier3;\\n        uint256 stosTier4;\\n        uint256 tier1Percents;\\n        uint256 tier2Percents;\\n        uint256 tier3Percents;\\n        uint256 tier4Percents;\\n        uint256 total1roundSaleAmount;\\n        uint256 total2roundSaleAmount;\\n        uint256 saleTokenPrice;\\n        uint256 payTokenPrice;\\n        uint256 hardcapAmount;\\n        uint256 changeTOSPercent;\\n        uint256 startWhiteTime;\\n        uint256 endWhiteTime;\\n        uint256 start1roundTime;\\n        uint256 end1roundTime;\\n        uint256 snapshotTime;\\n        uint256 start2roundTime;\\n        uint256 end2roundTime;\\n        uint256 claimCounts;\\n    }\\n\\n    struct InitalParameterPublicSaleClaim {\\n        uint256[] claimTimes;\\n        uint256[] claimPercents;\\n    }\\n\\n    struct InitalParameterInitialLiquidityVault {\\n        uint256 totalAllocatedAmount;\\n        uint256 tosPrice;\\n        uint256 tokenPrice;\\n        uint256 initSqrtPrice;\\n        uint32 startTime;\\n        uint16 fee;\\n    }\\n\\n    struct InitalParameterLiquidityRewardVault {\\n        address poolAddress;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterSchedule {\\n        string vaultName;\\n        InitalParameterScheduleVault params;\\n    }\\n\\n    struct InitalParameterScheduleVault {\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n        uint256 totalClaimCount;\\n        uint256 firstClaimAmount;\\n        uint32 firstClaimTime;\\n        uint32 secondClaimTime;\\n        uint32 roundIntervalTime;\\n    }\\n\\n    struct InitalParameterNonScheduleVault {\\n        string vaultName;\\n        address claimer;\\n        uint256 totalAllocatedAmount;\\n    }\\n\\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function getL1Bridge(address addressManager) external view returns(address _address) {\\n        if (addressManager == address(0)) return address(0);\\n        try\\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\\n                _address = a;\\n        } catch (bytes memory ) {\\n            _address = address(0);\\n        }\\n    }\\n\\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\\n    public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        // if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\\n        //     +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\\n        //     tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\\n        // ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.tokenPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\\n        //     tokamakVaults.initialVaultParams.startTime == 0 ||\\n        //     tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.rewardParams.poolAddress == address(0) ||\\n        //     tokamakVaults.rewardParams.params.totalClaimCount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimAmount == 0 ||\\n        //     tokamakVaults.rewardParams.params.firstClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.secondClaimTime == 0 ||\\n        //     tokamakVaults.rewardParams.params.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tosAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n        // if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\\n        //     tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\\n        //     tokamakVaults.tonAirdropParams.roundIntervalTime == 0\\n        //     ) return (boolValidate, totalAmount);\\n\\n\\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\\n                    tokamakVaults.rewardParams.params.totalAllocatedAmount +\\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\\n\\n        if (totalAmount == 0) return (boolValidate, totalAmount);\\n\\n        boolValidate = true;\\n    }\\n\\n    function validateScheduleVault(\\n        InitalParameterSchedule[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i = 0; i < customs.length; i++){\\n                if (customs[i].params.totalAllocatedAmount == 0 ||\\n                    customs[i].params.totalClaimCount == 0 ||\\n                    customs[i].params.firstClaimAmount == 0 ||\\n                    customs[i].params.firstClaimTime == 0 ||\\n                    customs[i].params.secondClaimTime == 0 ||\\n                    customs[i].params.roundIntervalTime == 0\\n                    ) return (boolValidate, totalAmount);\\n\\n                totalAmount += customs[i].params.totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n    function validateNonScheduleVault(\\n        InitalParameterNonScheduleVault[] memory customs\\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\\n\\n        if (customs.length != 0) {\\n            for(uint256 i =0 ; i < customs.length; i++){\\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\\n                totalAmount += customs[i].totalAllocatedAmount;\\n            }\\n            boolValidate = true;\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x70aa30ad2bdcc19fee1890162b02f21077efadb0da73a0898d2806f96ff0ffe5\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff191660011790553480156200001e57600080fd5b506200003a60008051602062003b9d833981519152806200005b565b6200005560008051602062003b9d83398151915233620000a6565b6200015a565b600082815260046020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b620000b28282620000b6565b5050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16620000b25760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001163390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613a33806200016a6000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c80637048027511610160578063c519eeac116100d8578063e2ce07291161008c578063eca7b83611610071578063eca7b83614610601578063eddd5e8214610614578063fbef005a1461062757600080fd5b8063e2ce0729146105ce578063e748849b146105e157600080fd5b8063c5b53e68116100bd578063c5b53e681461057f578063d547741f146105a8578063dfb28354146105bb57600080fd5b8063c519eeac14610559578063c51c773a1461056c57600080fd5b8063840e78fd1161012f578063a217fddf11610114578063a217fddf14610515578063b911135f1461051d578063bb3f397a1461054657600080fd5b8063840e78fd146104b857806391d14854146104dc57600080fd5b8063704802751461045357806374a9f5c11461046657806375829def1461047e57806375b238fc1461049157600080fd5b806336568abe116101f3578063550d01a3116101c257806363a8fd89116101a757806363a8fd89146104205780636e53f4271461042d5780636e6e85731461044057600080fd5b8063550d01a3146103ea5780635f2144301461040d57600080fd5b806336568abe14610388578063425d70581461039b5780634bc4447b146103ae57806350d2a276146103c157600080fd5b8063248a9ca31161024a5780632966c4dd1161022f5780632966c4dd146103375780632c8917c8146103625780632f2ff15d1461037557600080fd5b8063248a9ca31461030157806324d7806c1461032457600080fd5b806301ffc9a71461027c5780631785f53c146102a457806322985246146102b95780632415d628146102ee575b600080fd5b61028f61028a366004612973565b61063a565b60405190151581526020015b60405180910390f35b6102b76102b23660046129b2565b610671565b005b6102e07ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161029b565b6102b76102fc36600461310e565b610703565b6102e061030f3660046131cf565b60009081526004602052604090206001015490565b61028f6103323660046129b2565b61086f565b600a5461034a906001600160a01b031681565b6040516001600160a01b03909116815260200161029b565b60085461034a906001600160a01b031681565b6102b76103833660046131e8565b6108af565b6102b76103963660046131e8565b6108d9565b6102b76103a9366004613218565b610965565b6102b76103bc3660046129b2565b610bf9565b61034a6103cf366004612973565b6003602052600090815260409020546001600160a01b031681565b61028f6103f83660046129b2565b60026020526000908152604090205460ff1681565b6102b761041b3660046129b2565b610cfe565b60005461028f9060ff1681565b600b5461034a906001600160a01b031681565b600e5461034a906001600160a01b031681565b6102b76104613660046129b2565b610e1b565b60055461034a9061010090046001600160a01b031681565b6102b761048c3660046129b2565b610ea5565b6102e07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6104cb6104c63660046129b2565b611007565b60405161029b959493929190613310565b61028f6104ea3660046131e8565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102e0600081565b61034a61052b3660046131cf565b6001602052600090815260409020546001600160a01b031681565b6102b76105543660046129b2565b6110ce565b600d5461034a906001600160a01b031681565b60095461034a906001600160a01b031681565b61034a61058d3660046129b2565b6010602052600090815260409020546001600160a01b031681565b6102b76105b63660046131e8565b6111d3565b6102b76105c9366004613355565b6111f8565b6102b76105dc36600461310e565b6113bc565b6105f46105ef3660046129b2565b611592565b60405161029b91906133eb565b600c5461034a906001600160a01b031681565b60065461034a906001600160a01b031681565b60075461034a906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061066b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61067a3361086f565b6106d65760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108d9565b50565b866001600160a01b03811661073f5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b866001600160a01b03811661077b5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b86806000036107b15760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b86806000036107e75760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b6001600160a01b038a81166000908152600f60205260409020600101541633146108535760405162461bcd60e51b815260206004820152601060248201527f6e6f742070726f6a6563744f776e65720000000000000000000000000000000060448201526064016106cd565b6108628b8b8b8b8b8b8b6116cf565b5050505050505050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661066b565b6000828152600460205260409020600101546108ca816124fc565b6108d48383612506565b505050565b6001600160a01b03811633146109575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106cd565b61096182826125a8565b5050565b6006546001600160a01b03161580159061098957506006546001600160a01b031633145b6109d55760405162461bcd60e51b815260206004820152601c60248201527f63616c6c6572206973206e6f74206c32546f6b656e466163746f72790000000060448201526064016106cd565b6000819003610a265760405162461bcd60e51b815260206004820152601360248201527f70726f6a6563744e616d65206973206e756c6c0000000000000000000000000060448201526064016106cd565b6001600160a01b038381166000908152600f60205260409020600201541615610a915760405162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646465640000000000000000000000000000000000000060448201526064016106cd565b6040518060a0016040528060008152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b0316815260200183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b038087168252600f602090815260409283902085518155908501516001820180549184166001600160a01b031992831617905592850151600282018054918416918516919091179055606085015160038201805491909316931692909217905560808301519091506004820190610b8690826134cf565b5050506001600160a01b038481166000818152601060205260409081902080546001600160a01b0319169387169384179055517f665c02e22efe28364a081a633646b8db53de75e45491bbd51cb302f6e1ab3a2190610bea9089908790879061358f565b60405180910390a35050505050565b806001600160a01b038116610c355760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b610c3e3361086f565b610c955760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6007546001600160a01b03808416911603610cdb5760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610d3a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b610d433361086f565b610d9a5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6005546001600160a01b038084166101009092041603610de55760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b610e243361086f565b610e7b5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108af565b610eae3361086f565b610f055760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6001600160a01b038116610f5b5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016106cd565b6001600160a01b0381163303610fb35760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016106cd565b610fdd7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108af565b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336108d9565b600f602052600090815260409020805460018201546002830154600384015460048501805494956001600160a01b0394851695938516949092169261104b90613447565b80601f016020809104026020016040519081016040528092919081815260200182805461107790613447565b80156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b5050505050905085565b806001600160a01b03811661110a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b6111133361086f565b61116a5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6006546001600160a01b038084169116036111b05760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600460205260409020600101546111ee816124fc565b6108d483836125a8565b6112013361086f565b6112585760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b856001600160a01b0381166112945760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b0381166112d05760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b03811661130c5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b0381166113485760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b5050600880546001600160a01b03199081166001600160a01b039b8c1617909155600980548216998b16999099179098555050600b8054871694881694909417909355600c8054861692871692909217909155600d80548516918616919091179055600e8054909316931692909217905550565b6007546001600160a01b031633148015611456575060055460075460408051636e296e4560e01b815290516101009093046001600160a01b0390811693921691636e296e45916004808201926020929091908290030181865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b91906135ce565b6001600160a01b0316145b6114ae5760405162461bcd60e51b8152602060048201526024808201527f6e6f74206f6e6c794d657373656e676572416e644c3150726f6a6563744d616e60448201526330b3b2b960e11b60648201526084016106cd565b866001600160a01b0381166114ea5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b866001600160a01b0381166115265760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b868060000361155c5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b86806000036108535760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b6115df6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6001600160a01b038083166000908152600f6020908152604091829020825160a08101845281548152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101805460808401919061164690613447565b80601f016020809104026020016040519081016040528092919081815260200182805461167290613447565b80156116bf5780601f10611694576101008083540402835291602001916116bf565b820191906000526020600020905b8154815290600101906020018083116116a257829003601f168201915b5050505050815250509050919050565b6001600160a01b038087166000908152600f60209081526040808320815160a0810183528154815260018201548616938101939093526002810154851691830191909152600381015490931660608201526004830180549293919260808401919061173990613447565b80601f016020809104026020016040519081016040528092919081815260200182805461176590613447565b80156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b5050505050815250509050876001600160a01b031681604001516001600160a01b0316146118225760405162461bcd60e51b815260206004820152601360248201527f6e6f74206d617463686564206c31546f6b656e0000000000000000000000000060448201526064016106cd565b866001600160a01b031681606001516001600160a01b0316146118875760405162461bcd60e51b815260206004820152601360248201527f6e6f74206d617463686564206c32546f6b656e0000000000000000000000000060448201526064016106cd565b835151610120810151610100909101516000916118a391613601565b9050600085608001516020015186606001516020015187604001516020015160200151886020015160000151856118da9190613601565b6118e49190613601565b6118ee9190613601565b6118f89190613601565b905060008060005b875181101561194a5787818151811061191b5761191b613614565b60200260200101516020015160200151836119369190613601565b9250806119428161362a565b915050611900565b5060005b86518110156119945786818151811061196957611969613614565b602002602001015160400151826119809190613601565b91508061198c8161362a565b91505061194e565b5061199f8183613601565b6119a99084613601565b92508883146119fa5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206d61746368656420746f74616c416d6f756e7400000000000000000060448201526064016106cd565b6040516370a0823160e01b81523060048201526001600160a01b038c16906370a0823190602401602060405180830381865afa158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a629190613643565b891115611ab15760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016106cd565b6060850180516001600160a01b039081166000908152600f602052604090208c90559051600854611ae392168661262b565b606085015160095460208a015151611b0592916001600160a01b03169061262b565b6060850151600a5460408a01516020908101510151611b2e92916001600160a01b03169061262b565b6060850151600b5460808a015160200151611b5392916001600160a01b03169061262b565b606080860151600c54918a015160200151611b77926001600160a01b03169061262b565b8315611c5d5760085460608601516020870151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611bd557600080fd5b505af1158015611be9573d6000803e3d6000fd5b505060085460608801518b5180516020909101516040516352bc80bd60e01b81526001600160a01b0390941695506352bc80bd9450611c2a936004016136ce565b600060405180830381600087803b158015611c4457600080fd5b505af1158015611c58573d6000803e3d6000fd5b505050505b6020880151805115611e0557600954606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190613810565b611d5d5760095460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b505050505b60095460608781015160408051632215f6f360e11b81526001600160a01b0392831660048201528551602482015260208601516044820152908501516064820152918401516084830152608084015163ffffffff1660a483015260a084015161ffff1660c48301529091169063442bede69060e401600060405180830381600087803b158015611dec57600080fd5b505af1158015611e00573d6000803e3d6000fd5b505050505b60608901516020015115611f7457600c54606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e929190613810565b611f0757600c5460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611eee57600080fd5b505af1158015611f02573d6000803e3d6000fd5b505050505b600c54606080880151908b01516040516356a6192d60e11b81526001600160a01b039093169263ad4c325a92611f41929091600401613832565b600060405180830381600087803b158015611f5b57600080fd5b505af1158015611f6f573d6000803e3d6000fd5b505050505b608089015160200151156120e357600b54606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190613810565b61207657600b5460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b15801561205d57600080fd5b505af1158015612071573d6000803e3d6000fd5b505050505b600b54606087015160808b01516040516356a6192d60e11b81526001600160a01b039093169263ad4c325a926120b0929091600401613832565b600060405180830381600087803b1580156120ca57600080fd5b505af11580156120de573d6000803e3d6000fd5b505050505b8a83156122ba57600d54606088015160208901516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015612145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121699190613810565b6121de57600d5460608801516020890151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b1580156121c557600080fd5b505af11580156121d9573d6000803e3d6000fd5b505050505b60005b89518110156122b85760008a82815181106121fe576121fe613614565b602002602001015190506122348960600151600d60009054906101000a90046001600160a01b031683602001516020015161262b565b600d5460608a01518251602084015160405163baf6ce1f60e01b81526001600160a01b039094169363baf6ce1f9361227293909290916004016138a6565b600060405180830381600087803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b505050505080806122b09061362a565b9150506121e1565b505b821561249357600e54606088015160208901516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa15801561231b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233f9190613810565b6123b457600e5460608801516020890151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b15801561239b57600080fd5b505af11580156123af573d6000803e3d6000fd5b505050505b60005b88518110156124915760008982815181106123d4576123d4613614565b602002602001015190506124068960600151600e60009054906101000a90046001600160a01b0316836040015161262b565b600e5460608a015182516020840151604080860151905163021a440560e01b81526001600160a01b039095169463021a44059461244b9490939092909160040161392f565b600060405180830381600087803b15801561246557600080fd5b505af1158015612479573d6000803e3d6000fd5b505050505080806124899061362a565b9150506123b7565b505b6040878101516060808a015183516001600160a01b03938416815292166020830152818301849052810187905290517fc09fbebfef0054b64085d21310e8621dd22206fc0a44cedfa0a2f0fa5b97f7199181900360800190a15050505050505050505050505050565b610700813361273c565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109615760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125643390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156109615760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382161580159061264257508015155b80156126be5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190613643565b105b156108d45760405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127369190613810565b50505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109615761276f816127b1565b61277a8360206127c3565b60405160200161278b929190613964565b60408051601f198184030181529082905262461bcd60e51b82526106cd916004016139e5565b606061066b6001600160a01b03831660145b606060006127d28360026139f8565b6127dd906002613601565b67ffffffffffffffff8111156127f5576127f56129cf565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050600360fc1b8160008151811061283a5761283a613614565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061286957612869613614565b60200101906001600160f81b031916908160001a905350600061288d8460026139f8565b612898906001613601565b90505b600181111561291d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106128d9576128d9613614565b1a60f81b8282815181106128ef576128ef613614565b60200101906001600160f81b031916908160001a90535060049490941c9361291681613a0f565b905061289b565b50831561296c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106cd565b9392505050565b60006020828403121561298557600080fd5b81356001600160e01b03198116811461296c57600080fd5b6001600160a01b038116811461070057600080fd5b6000602082840312156129c457600080fd5b813561296c8161299d565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612a0857612a086129cf565b60405290565b60405160a0810167ffffffffffffffff81118282101715612a0857612a086129cf565b6040516102c0810167ffffffffffffffff81118282101715612a0857612a086129cf565b6040516060810167ffffffffffffffff81118282101715612a0857612a086129cf565b604051601f8201601f1916810167ffffffffffffffff81118282101715612aa157612aa16129cf565b604052919050565b600067ffffffffffffffff821115612ac357612ac36129cf565b5060051b60200190565b600082601f830112612ade57600080fd5b81356020612af3612aee83612aa9565b612a78565b82815260059290921b84018101918181019086841115612b1257600080fd5b8286015b84811015612b2d5780358352918301918301612b16565b509695505050505050565b600060408284031215612b4a57600080fd5b612b526129e5565b9050813567ffffffffffffffff80821115612b6c57600080fd5b612b7885838601612acd565b83526020840135915080821115612b8e57600080fd5b50612b9b84828501612acd565b60208301525092915050565b803563ffffffff81168114612bbb57600080fd5b919050565b600060c08284031215612bd257600080fd5b60405160c0810181811067ffffffffffffffff82111715612bf557612bf56129cf565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152612c2b60808401612ba7565b608082015260a083013561ffff81168114612c4557600080fd5b60a0919091015292915050565b600060e08284031215612c6457600080fd5b60405160e0810181811067ffffffffffffffff82111715612c8757612c876129cf565b6040529050808235612c988161299d565b80825250602083013560208201526040830135604082015260608301356060820152612cc660808401612ba7565b6080820152612cd760a08401612ba7565b60a0820152612ce860c08401612ba7565b60c08201525092915050565b60006101008284031215612d0757600080fd5b612d0f6129e5565b90508135612d1c8161299d565b8152612d2b8360208401612c52565b602082015292915050565b60006103a08284031215612d4957600080fd5b612d51612a0e565b9050813567ffffffffffffffff80821115612d6b57600080fd5b908301908185036102e0811215612d8157600080fd5b612d896129e5565b6102c080831215612d9957600080fd5b612da1612a31565b853581526020808701359082015260408087013590820152606080870135908201526080808701359082015260a0808701359082015260c0808701359082015260e08087013590820152610100808701359082015261012080870135908201526101408087013590820152610160808701359082015261018080870135908201526101a080870135908201526101c080870135908201526101e08087013581830152610200808801359083015261022080880135908301526102408088013590830152610260808801359083015261028080880135908301526102a0808801359083015290835281860135935084841115612e9b57600080fd5b612ea789858801612b38565b6020840152828752612ebc8960208a01612bc0565b6020880152612ece8960e08a01612cf4565b6040880152612edf89828a01612c52565b606088015250612ef188828901612c52565b6080870152505050505092915050565b600082601f830112612f1257600080fd5b813567ffffffffffffffff811115612f2c57612f2c6129cf565b612f3f601f8201601f1916602001612a78565b818152846020838601011115612f5457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612f8257600080fd5b81356020612f92612aee83612aa9565b82815260059290921b84018101918181019086841115612fb157600080fd5b8286015b84811015612b2d57803567ffffffffffffffff80821115612fd65760008081fd5b90880190610100828b03601f19011215612ff05760008081fd5b612ff86129e5565b868301358281111561300a5760008081fd5b6130188c8983870101612f01565b8252506130288b60408501612c52565b8188015285525050918301918301612fb5565b600082601f83011261304c57600080fd5b8135602061305c612aee83612aa9565b82815260059290921b8401810191818101908684111561307b57600080fd5b8286015b84811015612b2d57803567ffffffffffffffff808211156130a05760008081fd5b908801906060828b03601f19018113156130ba5760008081fd5b6130c2612a55565b87840135838111156130d45760008081fd5b6130e28d8a83880101612f01565b82525060409250828401356130f68161299d565b8189015292013590820152835291830191830161307f565b600080600080600080600060e0888a03121561312957600080fd5b87356131348161299d565b965060208801356131448161299d565b95506040880135945060608801359350608088013567ffffffffffffffff8082111561316f57600080fd5b61317b8b838c01612d36565b945060a08a013591508082111561319157600080fd5b61319d8b838c01612f71565b935060c08a01359150808211156131b357600080fd5b506131c08a828b0161303b565b91505092959891949750929550565b6000602082840312156131e157600080fd5b5035919050565b600080604083850312156131fb57600080fd5b82359150602083013561320d8161299d565b809150509250929050565b60008060008060006080868803121561323057600080fd5b853561323b8161299d565b9450602086013561324b8161299d565b9350604086013561325b8161299d565b9250606086013567ffffffffffffffff8082111561327857600080fd5b818801915088601f83011261328c57600080fd5b81358181111561329b57600080fd5b8960208285010111156132ad57600080fd5b9699959850939650602001949392505050565b60005b838110156132db5781810151838201526020016132c3565b50506000910152565b600081518084526132fc8160208601602086016132c0565b601f01601f19169290920160200192915050565b85815260006001600160a01b038087166020840152808616604084015280851660608401525060a0608083015261334a60a08301846132e4565b979650505050505050565b600080600080600080600060e0888a03121561337057600080fd5b873561337b8161299d565b9650602088013561338b8161299d565b9550604088013561339b8161299d565b945060608801356133ab8161299d565b935060808801356133bb8161299d565b925060a08801356133cb8161299d565b915060c08801356133db8161299d565b8091505092959891949750929550565b6020815281516020820152600060208301516001600160a01b0380821660408501528060408601511660608501528060608601511660808501525050608083015160a08084015261343f60c08401826132e4565b949350505050565b600181811c9082168061345b57607f821691505b60208210810361347b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108d457600081815260208120601f850160051c810160208610156134a85750805b601f850160051c820191505b818110156134c7578281556001016134b4565b505050505050565b815167ffffffffffffffff8111156134e9576134e96129cf565b6134fd816134f78454613447565b84613481565b602080601f831160018114613532576000841561351a5750858301515b600019600386901b1c1916600185901b1785556134c7565b600085815260208120601f198616915b8281101561356157888601518255948401946001909101908401613542565b508582101561357f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000602082840312156135e057600080fd5b815161296c8161299d565b634e487b7160e01b600052601160045260246000fd5b8082018082111561066b5761066b6135eb565b634e487b7160e01b600052603260045260246000fd5b60006001820161363c5761363c6135eb565b5060010190565b60006020828403121561365557600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561368c57815187529582019590820190600101613670565b509495945050505050565b60008151604084526136ac604085018261365c565b9050602083015184820360208601526136c5828261365c565b95945050505050565b6001600160a01b0384168152825160208083019190915283015160408083019190915283015160608083019190915283015160808083019190915283015160a08083019190915283015160c08083019190915283015160e08083019190915283015161010080830191909152830151610120808301919091528301516101408083019190915283015161016080830191909152830151610180808301919091528301516101a0808301919091528301516101c0808301919091528301516101e08083019190915283015161020080830191909152830151610220808301919091528301516102408083019190915283015161026080830191909152830151610280808301919091528301516102a0808301919091528301516102c08201526103006102e0820181905260009061380683820185613697565b9695505050505050565b60006020828403121561382257600080fd5b8151801515811461296c57600080fd5b6001600160a01b0383168152610100810161296c60208301846001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b60006101206001600160a01b03861683528060208401526138c9818401866132e4565b91505061343f60408301846001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b60006001600160a01b0380871683526080602084015261395260808401876132e4565b94166040830152506060015292915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161399c8160178501602088016132c0565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139d98160288401602088016132c0565b01602801949350505050565b60208152600061296c60208301846132e4565b808202811582820484141761066b5761066b6135eb565b600081613a1e57613a1e6135eb565b50600019019056fea164736f6c6343000812000adf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c80637048027511610160578063c519eeac116100d8578063e2ce07291161008c578063eca7b83611610071578063eca7b83614610601578063eddd5e8214610614578063fbef005a1461062757600080fd5b8063e2ce0729146105ce578063e748849b146105e157600080fd5b8063c5b53e68116100bd578063c5b53e681461057f578063d547741f146105a8578063dfb28354146105bb57600080fd5b8063c519eeac14610559578063c51c773a1461056c57600080fd5b8063840e78fd1161012f578063a217fddf11610114578063a217fddf14610515578063b911135f1461051d578063bb3f397a1461054657600080fd5b8063840e78fd146104b857806391d14854146104dc57600080fd5b8063704802751461045357806374a9f5c11461046657806375829def1461047e57806375b238fc1461049157600080fd5b806336568abe116101f3578063550d01a3116101c257806363a8fd89116101a757806363a8fd89146104205780636e53f4271461042d5780636e6e85731461044057600080fd5b8063550d01a3146103ea5780635f2144301461040d57600080fd5b806336568abe14610388578063425d70581461039b5780634bc4447b146103ae57806350d2a276146103c157600080fd5b8063248a9ca31161024a5780632966c4dd1161022f5780632966c4dd146103375780632c8917c8146103625780632f2ff15d1461037557600080fd5b8063248a9ca31461030157806324d7806c1461032457600080fd5b806301ffc9a71461027c5780631785f53c146102a457806322985246146102b95780632415d628146102ee575b600080fd5b61028f61028a366004612973565b61063a565b60405190151581526020015b60405180910390f35b6102b76102b23660046129b2565b610671565b005b6102e07ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b60405190815260200161029b565b6102b76102fc36600461310e565b610703565b6102e061030f3660046131cf565b60009081526004602052604090206001015490565b61028f6103323660046129b2565b61086f565b600a5461034a906001600160a01b031681565b6040516001600160a01b03909116815260200161029b565b60085461034a906001600160a01b031681565b6102b76103833660046131e8565b6108af565b6102b76103963660046131e8565b6108d9565b6102b76103a9366004613218565b610965565b6102b76103bc3660046129b2565b610bf9565b61034a6103cf366004612973565b6003602052600090815260409020546001600160a01b031681565b61028f6103f83660046129b2565b60026020526000908152604090205460ff1681565b6102b761041b3660046129b2565b610cfe565b60005461028f9060ff1681565b600b5461034a906001600160a01b031681565b600e5461034a906001600160a01b031681565b6102b76104613660046129b2565b610e1b565b60055461034a9061010090046001600160a01b031681565b6102b761048c3660046129b2565b610ea5565b6102e07fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b6104cb6104c63660046129b2565b611007565b60405161029b959493929190613310565b61028f6104ea3660046131e8565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102e0600081565b61034a61052b3660046131cf565b6001602052600090815260409020546001600160a01b031681565b6102b76105543660046129b2565b6110ce565b600d5461034a906001600160a01b031681565b60095461034a906001600160a01b031681565b61034a61058d3660046129b2565b6010602052600090815260409020546001600160a01b031681565b6102b76105b63660046131e8565b6111d3565b6102b76105c9366004613355565b6111f8565b6102b76105dc36600461310e565b6113bc565b6105f46105ef3660046129b2565b611592565b60405161029b91906133eb565b600c5461034a906001600160a01b031681565b60065461034a906001600160a01b031681565b60075461034a906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b148061066b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61067a3361086f565b6106d65760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108d9565b50565b866001600160a01b03811661073f5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b866001600160a01b03811661077b5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b86806000036107b15760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b86806000036107e75760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b6001600160a01b038a81166000908152600f60205260409020600101541633146108535760405162461bcd60e51b815260206004820152601060248201527f6e6f742070726f6a6563744f776e65720000000000000000000000000000000060448201526064016106cd565b6108628b8b8b8b8b8b8b6116cf565b5050505050505050505050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661066b565b6000828152600460205260409020600101546108ca816124fc565b6108d48383612506565b505050565b6001600160a01b03811633146109575760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106cd565b61096182826125a8565b5050565b6006546001600160a01b03161580159061098957506006546001600160a01b031633145b6109d55760405162461bcd60e51b815260206004820152601c60248201527f63616c6c6572206973206e6f74206c32546f6b656e466163746f72790000000060448201526064016106cd565b6000819003610a265760405162461bcd60e51b815260206004820152601360248201527f70726f6a6563744e616d65206973206e756c6c0000000000000000000000000060448201526064016106cd565b6001600160a01b038381166000908152600f60205260409020600201541615610a915760405162461bcd60e51b815260206004820152600d60248201527f616c72656164792061646465640000000000000000000000000000000000000060448201526064016106cd565b6040518060a0016040528060008152602001866001600160a01b03168152602001856001600160a01b03168152602001846001600160a01b0316815260200183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160a01b038087168252600f602090815260409283902085518155908501516001820180549184166001600160a01b031992831617905592850151600282018054918416918516919091179055606085015160038201805491909316931692909217905560808301519091506004820190610b8690826134cf565b5050506001600160a01b038481166000818152601060205260409081902080546001600160a01b0319169387169384179055517f665c02e22efe28364a081a633646b8db53de75e45491bbd51cb302f6e1ab3a2190610bea9089908790879061358f565b60405180910390a35050505050565b806001600160a01b038116610c355760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b610c3e3361086f565b610c955760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6007546001600160a01b03808416911603610cdb5760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116610d3a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b610d433361086f565b610d9a5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6005546001600160a01b038084166101009092041603610de55760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b610e243361086f565b610e7b5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108af565b610eae3361086f565b610f055760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6001600160a01b038116610f5b5760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016106cd565b6001600160a01b0381163303610fb35760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016106cd565b610fdd7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826108af565b6107007fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42336108d9565b600f602052600090815260409020805460018201546002830154600384015460048501805494956001600160a01b0394851695938516949092169261104b90613447565b80601f016020809104026020016040519081016040528092919081815260200182805461107790613447565b80156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b5050505050905085565b806001600160a01b03811661110a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b6111133361086f565b61116a5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b6006546001600160a01b038084169116036111b05760405162461bcd60e51b81526004016106cd9060208082526004908201526373616d6560e01b604082015260600190565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600460205260409020600101546111ee816124fc565b6108d483836125a8565b6112013361086f565b6112585760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016106cd565b856001600160a01b0381166112945760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b0381166112d05760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b03811661130c5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b836001600160a01b0381166113485760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b5050600880546001600160a01b03199081166001600160a01b039b8c1617909155600980548216998b16999099179098555050600b8054871694881694909417909355600c8054861692871692909217909155600d80548516918616919091179055600e8054909316931692909217905550565b6007546001600160a01b031633148015611456575060055460075460408051636e296e4560e01b815290516101009093046001600160a01b0390811693921691636e296e45916004808201926020929091908290030181865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b91906135ce565b6001600160a01b0316145b6114ae5760405162461bcd60e51b8152602060048201526024808201527f6e6f74206f6e6c794d657373656e676572416e644c3150726f6a6563744d616e60448201526330b3b2b960e11b60648201526084016106cd565b866001600160a01b0381166114ea5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b866001600160a01b0381166115265760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016106cd565b868060000361155c5760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b86806000036108535760405162461bcd60e51b81526020600482015260026024820152615a3160f01b60448201526064016106cd565b6115df6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6001600160a01b038083166000908152600f6020908152604091829020825160a08101845281548152600182015485169281019290925260028101548416928201929092526003820154909216606083015260048101805460808401919061164690613447565b80601f016020809104026020016040519081016040528092919081815260200182805461167290613447565b80156116bf5780601f10611694576101008083540402835291602001916116bf565b820191906000526020600020905b8154815290600101906020018083116116a257829003601f168201915b5050505050815250509050919050565b6001600160a01b038087166000908152600f60209081526040808320815160a0810183528154815260018201548616938101939093526002810154851691830191909152600381015490931660608201526004830180549293919260808401919061173990613447565b80601f016020809104026020016040519081016040528092919081815260200182805461176590613447565b80156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b5050505050815250509050876001600160a01b031681604001516001600160a01b0316146118225760405162461bcd60e51b815260206004820152601360248201527f6e6f74206d617463686564206c31546f6b656e0000000000000000000000000060448201526064016106cd565b866001600160a01b031681606001516001600160a01b0316146118875760405162461bcd60e51b815260206004820152601360248201527f6e6f74206d617463686564206c32546f6b656e0000000000000000000000000060448201526064016106cd565b835151610120810151610100909101516000916118a391613601565b9050600085608001516020015186606001516020015187604001516020015160200151886020015160000151856118da9190613601565b6118e49190613601565b6118ee9190613601565b6118f89190613601565b905060008060005b875181101561194a5787818151811061191b5761191b613614565b60200260200101516020015160200151836119369190613601565b9250806119428161362a565b915050611900565b5060005b86518110156119945786818151811061196957611969613614565b602002602001015160400151826119809190613601565b91508061198c8161362a565b91505061194e565b5061199f8183613601565b6119a99084613601565b92508883146119fa5760405162461bcd60e51b815260206004820152601760248201527f6e6f74206d61746368656420746f74616c416d6f756e7400000000000000000060448201526064016106cd565b6040516370a0823160e01b81523060048201526001600160a01b038c16906370a0823190602401602060405180830381865afa158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a629190613643565b891115611ab15760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016106cd565b6060850180516001600160a01b039081166000908152600f602052604090208c90559051600854611ae392168661262b565b606085015160095460208a015151611b0592916001600160a01b03169061262b565b6060850151600a5460408a01516020908101510151611b2e92916001600160a01b03169061262b565b6060850151600b5460808a015160200151611b5392916001600160a01b03169061262b565b606080860151600c54918a015160200151611b77926001600160a01b03169061262b565b8315611c5d5760085460608601516020870151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611bd557600080fd5b505af1158015611be9573d6000803e3d6000fd5b505060085460608801518b5180516020909101516040516352bc80bd60e01b81526001600160a01b0390941695506352bc80bd9450611c2a936004016136ce565b600060405180830381600087803b158015611c4457600080fd5b505af1158015611c58573d6000803e3d6000fd5b505050505b6020880151805115611e0557600954606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce89190613810565b611d5d5760095460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b505050505b60095460608781015160408051632215f6f360e11b81526001600160a01b0392831660048201528551602482015260208601516044820152908501516064820152918401516084830152608084015163ffffffff1660a483015260a084015161ffff1660c48301529091169063442bede69060e401600060405180830381600087803b158015611dec57600080fd5b505af1158015611e00573d6000803e3d6000fd5b505050505b60608901516020015115611f7457600c54606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e929190613810565b611f0757600c5460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b158015611eee57600080fd5b505af1158015611f02573d6000803e3d6000fd5b505050505b600c54606080880151908b01516040516356a6192d60e11b81526001600160a01b039093169263ad4c325a92611f41929091600401613832565b600060405180830381600087803b158015611f5b57600080fd5b505af1158015611f6f573d6000803e3d6000fd5b505050505b608089015160200151156120e357600b54606087015160208801516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190613810565b61207657600b5460608701516020880151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b15801561205d57600080fd5b505af1158015612071573d6000803e3d6000fd5b505050505b600b54606087015160808b01516040516356a6192d60e11b81526001600160a01b039093169263ad4c325a926120b0929091600401613832565b600060405180830381600087803b1580156120ca57600080fd5b505af11580156120de573d6000803e3d6000fd5b505050505b8a83156122ba57600d54606088015160208901516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa158015612145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121699190613810565b6121de57600d5460608801516020890151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b1580156121c557600080fd5b505af11580156121d9573d6000803e3d6000fd5b505050505b60005b89518110156122b85760008a82815181106121fe576121fe613614565b602002602001015190506122348960600151600d60009054906101000a90046001600160a01b031683602001516020015161262b565b600d5460608a01518251602084015160405163baf6ce1f60e01b81526001600160a01b039094169363baf6ce1f9361227293909290916004016138a6565b600060405180830381600087803b15801561228c57600080fd5b505af11580156122a0573d6000803e3d6000fd5b505050505080806122b09061362a565b9150506121e1565b505b821561249357600e54606088015160208901516040516328f40a9560e11b81526001600160a01b03928316600482015290821660248201529116906351e8152a90604401602060405180830381865afa15801561231b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233f9190613810565b6123b457600e5460608801516020890151604051631adcd63360e11b81526001600160a01b03928316600482015290821660248201529116906335b9ac6690604401600060405180830381600087803b15801561239b57600080fd5b505af11580156123af573d6000803e3d6000fd5b505050505b60005b88518110156124915760008982815181106123d4576123d4613614565b602002602001015190506124068960600151600e60009054906101000a90046001600160a01b0316836040015161262b565b600e5460608a015182516020840151604080860151905163021a440560e01b81526001600160a01b039095169463021a44059461244b9490939092909160040161392f565b600060405180830381600087803b15801561246557600080fd5b505af1158015612479573d6000803e3d6000fd5b505050505080806124899061362a565b9150506123b7565b505b6040878101516060808a015183516001600160a01b03938416815292166020830152818301849052810187905290517fc09fbebfef0054b64085d21310e8621dd22206fc0a44cedfa0a2f0fa5b97f7199181900360800190a15050505050505050505050505050565b610700813361273c565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109615760008281526004602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125643390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16156109615760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0382161580159061264257508015155b80156126be5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190613643565b105b156108d45760405163095ea7b360e01b81526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127369190613810565b50505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff166109615761276f816127b1565b61277a8360206127c3565b60405160200161278b929190613964565b60408051601f198184030181529082905262461bcd60e51b82526106cd916004016139e5565b606061066b6001600160a01b03831660145b606060006127d28360026139f8565b6127dd906002613601565b67ffffffffffffffff8111156127f5576127f56129cf565b6040519080825280601f01601f19166020018201604052801561281f576020820181803683370190505b509050600360fc1b8160008151811061283a5761283a613614565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061286957612869613614565b60200101906001600160f81b031916908160001a905350600061288d8460026139f8565b612898906001613601565b90505b600181111561291d577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106128d9576128d9613614565b1a60f81b8282815181106128ef576128ef613614565b60200101906001600160f81b031916908160001a90535060049490941c9361291681613a0f565b905061289b565b50831561296c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106cd565b9392505050565b60006020828403121561298557600080fd5b81356001600160e01b03198116811461296c57600080fd5b6001600160a01b038116811461070057600080fd5b6000602082840312156129c457600080fd5b813561296c8161299d565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612a0857612a086129cf565b60405290565b60405160a0810167ffffffffffffffff81118282101715612a0857612a086129cf565b6040516102c0810167ffffffffffffffff81118282101715612a0857612a086129cf565b6040516060810167ffffffffffffffff81118282101715612a0857612a086129cf565b604051601f8201601f1916810167ffffffffffffffff81118282101715612aa157612aa16129cf565b604052919050565b600067ffffffffffffffff821115612ac357612ac36129cf565b5060051b60200190565b600082601f830112612ade57600080fd5b81356020612af3612aee83612aa9565b612a78565b82815260059290921b84018101918181019086841115612b1257600080fd5b8286015b84811015612b2d5780358352918301918301612b16565b509695505050505050565b600060408284031215612b4a57600080fd5b612b526129e5565b9050813567ffffffffffffffff80821115612b6c57600080fd5b612b7885838601612acd565b83526020840135915080821115612b8e57600080fd5b50612b9b84828501612acd565b60208301525092915050565b803563ffffffff81168114612bbb57600080fd5b919050565b600060c08284031215612bd257600080fd5b60405160c0810181811067ffffffffffffffff82111715612bf557612bf56129cf565b806040525080915082358152602083013560208201526040830135604082015260608301356060820152612c2b60808401612ba7565b608082015260a083013561ffff81168114612c4557600080fd5b60a0919091015292915050565b600060e08284031215612c6457600080fd5b60405160e0810181811067ffffffffffffffff82111715612c8757612c876129cf565b6040529050808235612c988161299d565b80825250602083013560208201526040830135604082015260608301356060820152612cc660808401612ba7565b6080820152612cd760a08401612ba7565b60a0820152612ce860c08401612ba7565b60c08201525092915050565b60006101008284031215612d0757600080fd5b612d0f6129e5565b90508135612d1c8161299d565b8152612d2b8360208401612c52565b602082015292915050565b60006103a08284031215612d4957600080fd5b612d51612a0e565b9050813567ffffffffffffffff80821115612d6b57600080fd5b908301908185036102e0811215612d8157600080fd5b612d896129e5565b6102c080831215612d9957600080fd5b612da1612a31565b853581526020808701359082015260408087013590820152606080870135908201526080808701359082015260a0808701359082015260c0808701359082015260e08087013590820152610100808701359082015261012080870135908201526101408087013590820152610160808701359082015261018080870135908201526101a080870135908201526101c080870135908201526101e08087013581830152610200808801359083015261022080880135908301526102408088013590830152610260808801359083015261028080880135908301526102a0808801359083015290835281860135935084841115612e9b57600080fd5b612ea789858801612b38565b6020840152828752612ebc8960208a01612bc0565b6020880152612ece8960e08a01612cf4565b6040880152612edf89828a01612c52565b606088015250612ef188828901612c52565b6080870152505050505092915050565b600082601f830112612f1257600080fd5b813567ffffffffffffffff811115612f2c57612f2c6129cf565b612f3f601f8201601f1916602001612a78565b818152846020838601011115612f5457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612f8257600080fd5b81356020612f92612aee83612aa9565b82815260059290921b84018101918181019086841115612fb157600080fd5b8286015b84811015612b2d57803567ffffffffffffffff80821115612fd65760008081fd5b90880190610100828b03601f19011215612ff05760008081fd5b612ff86129e5565b868301358281111561300a5760008081fd5b6130188c8983870101612f01565b8252506130288b60408501612c52565b8188015285525050918301918301612fb5565b600082601f83011261304c57600080fd5b8135602061305c612aee83612aa9565b82815260059290921b8401810191818101908684111561307b57600080fd5b8286015b84811015612b2d57803567ffffffffffffffff808211156130a05760008081fd5b908801906060828b03601f19018113156130ba5760008081fd5b6130c2612a55565b87840135838111156130d45760008081fd5b6130e28d8a83880101612f01565b82525060409250828401356130f68161299d565b8189015292013590820152835291830191830161307f565b600080600080600080600060e0888a03121561312957600080fd5b87356131348161299d565b965060208801356131448161299d565b95506040880135945060608801359350608088013567ffffffffffffffff8082111561316f57600080fd5b61317b8b838c01612d36565b945060a08a013591508082111561319157600080fd5b61319d8b838c01612f71565b935060c08a01359150808211156131b357600080fd5b506131c08a828b0161303b565b91505092959891949750929550565b6000602082840312156131e157600080fd5b5035919050565b600080604083850312156131fb57600080fd5b82359150602083013561320d8161299d565b809150509250929050565b60008060008060006080868803121561323057600080fd5b853561323b8161299d565b9450602086013561324b8161299d565b9350604086013561325b8161299d565b9250606086013567ffffffffffffffff8082111561327857600080fd5b818801915088601f83011261328c57600080fd5b81358181111561329b57600080fd5b8960208285010111156132ad57600080fd5b9699959850939650602001949392505050565b60005b838110156132db5781810151838201526020016132c3565b50506000910152565b600081518084526132fc8160208601602086016132c0565b601f01601f19169290920160200192915050565b85815260006001600160a01b038087166020840152808616604084015280851660608401525060a0608083015261334a60a08301846132e4565b979650505050505050565b600080600080600080600060e0888a03121561337057600080fd5b873561337b8161299d565b9650602088013561338b8161299d565b9550604088013561339b8161299d565b945060608801356133ab8161299d565b935060808801356133bb8161299d565b925060a08801356133cb8161299d565b915060c08801356133db8161299d565b8091505092959891949750929550565b6020815281516020820152600060208301516001600160a01b0380821660408501528060408601511660608501528060608601511660808501525050608083015160a08084015261343f60c08401826132e4565b949350505050565b600181811c9082168061345b57607f821691505b60208210810361347b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108d457600081815260208120601f850160051c810160208610156134a85750805b601f850160051c820191505b818110156134c7578281556001016134b4565b505050505050565b815167ffffffffffffffff8111156134e9576134e96129cf565b6134fd816134f78454613447565b84613481565b602080601f831160018114613532576000841561351a5750858301515b600019600386901b1c1916600185901b1785556134c7565b600085815260208120601f198616915b8281101561356157888601518255948401946001909101908401613542565b508582101561357f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b6000602082840312156135e057600080fd5b815161296c8161299d565b634e487b7160e01b600052601160045260246000fd5b8082018082111561066b5761066b6135eb565b634e487b7160e01b600052603260045260246000fd5b60006001820161363c5761363c6135eb565b5060010190565b60006020828403121561365557600080fd5b5051919050565b600081518084526020808501945080840160005b8381101561368c57815187529582019590820190600101613670565b509495945050505050565b60008151604084526136ac604085018261365c565b9050602083015184820360208601526136c5828261365c565b95945050505050565b6001600160a01b0384168152825160208083019190915283015160408083019190915283015160608083019190915283015160808083019190915283015160a08083019190915283015160c08083019190915283015160e08083019190915283015161010080830191909152830151610120808301919091528301516101408083019190915283015161016080830191909152830151610180808301919091528301516101a0808301919091528301516101c0808301919091528301516101e08083019190915283015161020080830191909152830151610220808301919091528301516102408083019190915283015161026080830191909152830151610280808301919091528301516102a0808301919091528301516102c08201526103006102e0820181905260009061380683820185613697565b9695505050505050565b60006020828403121561382257600080fd5b8151801515811461296c57600080fd5b6001600160a01b0383168152610100810161296c60208301846001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b60006101206001600160a01b03861683528060208401526138c9818401866132e4565b91505061343f60408301846001600160a01b038151168252602081015160208301526040810151604083015260608101516060830152608081015163ffffffff80821660808501528060a08401511660a08501528060c08401511660c085015250505050565b60006001600160a01b0380871683526080602084015261395260808401876132e4565b94166040830152506060015292915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161399c8160178501602088016132c0565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516139d98160288401602088016132c0565b01602801949350505050565b60208152600061296c60208301846132e4565b808202811582820484141761066b5761066b6135eb565b600081613a1e57613a1e6135eb565b50600019019056fea164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "createL2Project(address,address,address,string)": {
        "details": "프로젝트 추가"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setL1ProjectManager(address)": {
        "details": "l1ProjectManager 주소 설정"
      },
      "setL2CrossDomainMessenger(address)": {
        "details": "l2CrossDomainMessenger 주소 설정"
      },
      "setL2TokenFactory(address)": {
        "details": "l2TokenFactory 주소 설정"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "title": "L2ProjectManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3488,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3492,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3496,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3500,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2593,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 2595,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l1ProjectManager",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2597,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l2TokenFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2599,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "l2CrossDomainMessenger",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2601,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "publicSaleVault",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2603,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "initialLiquidityVault",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2605,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "liquidityRewardVault",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2607,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tonAirdropVault",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2609,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tosAirdropVault",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2611,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "scheduleVault",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2613,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "nonScheduleVault",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2618,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "projects",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(L2ProjectInfo)2884_storage)"
      },
      {
        "astId": 2622,
        "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
        "label": "tokenMaps",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(L2ProjectInfo)2884_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibProject.L2ProjectInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(L2ProjectInfo)2884_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(L2ProjectInfo)2884_storage": {
        "encoding": "inplace",
        "label": "struct LibProject.L2ProjectInfo",
        "members": [
          {
            "astId": 2875,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2877,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2879,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "l1Token",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2881,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "l2Token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2883,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "projectName",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/L2ProjectManager.sol:L2ProjectManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}