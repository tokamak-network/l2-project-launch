{
  "address": "0x980AD09F0ACDe650A0F93F7E5bc6f304e1E1DC01",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalClaimCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstClaimPercents",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstClaimTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondClaimTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundInterval",
          "type": "uint256"
        }
      ],
      "name": "InitializedL2VestingFundVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInitializer",
          "type": "address"
        }
      ],
      "name": "SetInitializer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "SetVaultAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLICY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aliveImplementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "calculClaimAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receivedAddress",
          "type": "address"
        }
      ],
      "name": "changeReceivedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "currentSqrtPriceX96",
      "outputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "funding",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receivedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimPercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isContract",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isVaultAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ProjectManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nowClaimRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimPercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_roundInterval",
          "type": "uint256"
        }
      ],
      "name": "ownerSetting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseProxy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxyImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receivedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Token",
          "type": "address"
        }
      ],
      "name": "remainAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "name": "selectorImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "settingChecks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tonToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tosToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAllocatedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalClaimsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAdminOfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClaimCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimPercents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "secondClaimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "roundInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9450efd364b72bd51a2a6683d3c9e49da0bdcc42bc95047d2973137e00a4aed2",
  "receipt": {
    "to": null,
    "from": "0xc1eba383D94c6021160042491A5dfaF1d82694E6",
    "contractAddress": "0x980AD09F0ACDe650A0F93F7E5bc6f304e1E1DC01",
    "transactionIndex": 0,
    "gasUsed": "2120345",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd4d225871a92a827b877988a58c36ea51f528beb501e389ab6399af6b661f72d",
    "transactionHash": "0x9450efd364b72bd51a2a6683d3c9e49da0bdcc42bc95047d2973137e00a4aed2",
    "logs": [],
    "blockNumber": 24328,
    "cumulativeGasUsed": "2120345",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2fbfd3a4f51a9e696f76f6a785c53bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstClaimPercents\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"name\":\"InitializedL2VestingFundVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInitializer\",\"type\":\"address\"}],\"name\":\"SetInitializer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"SetVaultAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLICY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliveImplementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"calculClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receivedAddress\",\"type\":\"address\"}],\"name\":\"changeReceivedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"currentSqrtPriceX96\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"funding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receivedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isVaultAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ProjectManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nowClaimRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundInterval\",\"type\":\"uint256\"}],\"name\":\"ownerSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receivedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Token\",\"type\":\"address\"}],\"name\":\"remainAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"selectorImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settingChecks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tonToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tosToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAllocatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAdminOfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClaimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimPercents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdmin(address)\":{\"details\":\"add admin\",\"params\":{\"account\":\"address to add\"}},\"constructor\":{\"details\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAdmin(address)\":{\"details\":\"whether admin\",\"params\":{\"account\":\"address to check\"}},\"removeAdmin(address)\":{\"details\":\"remove admin\",\"params\":{\"account\":\"address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"details\":\"transfer admin\",\"params\":{\"newAdmin\":\"new admin address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2/vaults/L2VestingFundVault.sol\":\"L2VestingFundVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":625},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/L2/vaults/L2VestingFundVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { ProxyStorage } from \\\"../../proxy/ProxyStorage.sol\\\";\\nimport { AccessibleCommon } from \\\"../../common/AccessibleCommon.sol\\\";\\nimport { L2VestingFundVaultStorage } from \\\"./L2VestingFundVaultStorage.sol\\\";\\n\\nimport { LibVestingFundVault } from \\\"../../libraries/LibVestingFundVault.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IIUniswapV3Pool {\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n}\\n\\ncontract L2VestingFundVault is\\n    ProxyStorage,\\n    AccessibleCommon,\\n    L2VestingFundVaultStorage\\n{\\n    // using SafeERC20 for IERC20;\\n\\n\\n    ///@dev constructor\\n    constructor() {\\n\\n    }\\n\\n    function changeReceivedAddress(\\n        address _l2Token,\\n        address _receivedAddress\\n    )\\n        external\\n        nonZeroAddress(_receivedAddress)\\n    {\\n        require(msg.sender == receivedAddress[_l2Token] || isVaultAdmin(_l2Token,msg.sender), \\\"caller is not receivedAddress or vaultAdmin\\\");\\n        receivedAddress[_l2Token] = _receivedAddress;\\n    }\\n\\n\\n    function ownerSetting(\\n        address _l2Token,\\n        uint256 _claimCounts,\\n        uint256 _firstClaimPercents,\\n        uint256 _firstClaimTime,\\n        uint256 _secondClaimTime,\\n        uint256 _roundInterval\\n    )\\n        external\\n        onlyOwner\\n    {\\n        _initialize(\\n            _l2Token,\\n            _claimCounts,\\n            _firstClaimPercents,\\n            _firstClaimTime,\\n            _secondClaimTime,\\n            _roundInterval\\n        );\\n\\n        if(settingChecks[_l2Token] != true) settingChecks[_l2Token] = true;\\n    }\\n\\n    function initialize(\\n        address _l2Token,\\n        address _receivedAddress,\\n        uint256 _claimCounts,\\n        uint256 _firstClaimPercents,\\n        uint256 _firstClaimTime,\\n        uint256 _secondClaimTime,\\n        uint256 _roundInterval,\\n        uint24 _fee\\n    )\\n        external\\n        nonZeroAddress(_l2Token)\\n        nonZeroAddress(_receivedAddress)\\n        // onlyVaultAdminOfToken(_l2Token)\\n        onlyL2PublicSale\\n    {\\n\\n        require(settingChecks[_l2Token] != true, \\\"Already initalized\\\");\\n        receivedAddress[_l2Token] = _receivedAddress;\\n        fees[_l2Token] = _fee;\\n\\n        _initialize(\\n            _l2Token,\\n            _claimCounts,\\n            _firstClaimPercents,\\n            _firstClaimTime,\\n            _secondClaimTime,\\n            _roundInterval\\n        );\\n\\n        settingChecks[_l2Token] = true;\\n    }\\n\\n    function _initialize(\\n        address _l2Token,\\n        uint256 _claimCounts,\\n        uint256 _firstClaimPercents,\\n        uint256 _firstClaimTime,\\n        uint256 _secondClaimTime,\\n        uint256 _roundInterval\\n    )\\n        internal\\n    {\\n\\n        require(_claimCounts != 0,\\n                \\\"claimCounts must be greater than zero\\\");\\n\\n        LibVestingFundVault.VaultInfo storage info = vaultInfo[_l2Token];\\n        info.totalClaimCount = _claimCounts;\\n        info.firstClaimPercents = _firstClaimPercents;\\n        info.firstClaimTime = _firstClaimTime;\\n        info.secondClaimTime = _secondClaimTime;\\n        info.roundInterval = _roundInterval;\\n\\n        emit InitializedL2VestingFundVault(_l2Token, _claimCounts, _firstClaimPercents, _firstClaimTime, _secondClaimTime, _roundInterval);\\n    }\\n\\n    function claim(\\n        address _l2Token\\n    )\\n        public\\n    {\\n        // require(currentSqrtPriceX96(_l2Token) != 0, \\\"pool's current sqrtPriceX96 is zero.\\\");\\n        LibVestingFundVault.VaultInfo memory info = vaultInfo[_l2Token];\\n        require(info.firstClaimTime != 0 && block.timestamp > info.firstClaimTime, \\\"Vault: not started yet\\\");\\n        require(totalAllocatedAmount[_l2Token] > totalClaimsAmount[_l2Token],\\\"Vault: already All get\\\");\\n        _claim(_l2Token);\\n    }\\n\\n    function _claim(\\n        address _l2Token\\n    )\\n        internal\\n    {\\n        uint256 curRound = currentRound(_l2Token);\\n        uint256 amount = calculClaimAmount(_l2Token);\\n        require(amount > 0, \\\"claimable amount is zero\\\");\\n        require(IERC20(tonToken).balanceOf(address(this)) >= amount,\\\"Vault: insufficient balance\\\");\\n        require(remainAmount(_l2Token) >= amount,\\\"Vault: over remain balance\\\");\\n\\n        nowClaimRound[_l2Token] = curRound;\\n        totalClaimsAmount[_l2Token] = totalClaimsAmount[_l2Token] + amount;\\n\\n        IERC20(tonToken).transfer(receivedAddress[_l2Token], amount);\\n\\n        emit Claimed(msg.sender, receivedAddress[_l2Token], amount);\\n    }\\n\\n    function funding(\\n        address _l2Token,\\n        uint256 amount\\n    )\\n        external\\n        onlyL2PublicSale\\n    {\\n        // require(currentSqrtPriceX96(_l2Token) != 0, \\\"pool's current sqrtPriceX96 is zero.\\\");\\n        LibVestingFundVault.VaultInfo memory info = vaultInfo[_l2Token];\\n        require(info.totalClaimCount != 0, \\\"set up a claim round for vesting\\\");\\n\\n        require(msg.sender == publicSaleVault, \\\"caller is not publicSaleVault.\\\");\\n        require(IERC20(tonToken).allowance(publicSaleVault, address(this)) >= amount, \\\"funding: insufficient allowance\\\");\\n        totalAllocatedAmount[_l2Token] += amount;\\n        IERC20(tonToken).transferFrom(publicSaleVault, address(this), amount);\\n\\n        emit Funded(msg.sender, amount);\\n\\n        uint256 curRound = currentRound(_l2Token);\\n\\n        if (curRound > 0 && calculClaimAmount(_l2Token) > 0 && totalAllocatedAmount[_l2Token] > totalClaimsAmount[_l2Token]) {\\n            _claim(_l2Token);\\n        }\\n    }\\n\\n    /* === ======= internal ========== */\\n\\n\\n    /* ========== VIEW ========== */\\n\\n    function currentRound(\\n        address _l2Token\\n    )\\n        public\\n        view\\n        returns (uint256 round)\\n    {\\n        LibVestingFundVault.VaultInfo memory info = vaultInfo[_l2Token];\\n        if(info.firstClaimTime == 0) return 0;\\n        if(info.firstClaimTime > block.timestamp) return 0;\\n        if(info.firstClaimTime != 0 && info.firstClaimTime <= block.timestamp && block.timestamp < info.secondClaimTime) {\\n            round = 1;\\n        } else if(info.secondClaimTime <= block.timestamp) {\\n            round = (block.timestamp - info.secondClaimTime) / info.roundInterval + 2;\\n        }\\n        if (round > info.totalClaimCount) round = info.totalClaimCount;\\n    }\\n\\n    function calculClaimAmount(\\n        address _l2Token\\n    )\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 curRound = currentRound(_l2Token);\\n        if (curRound == 0) return 0;\\n\\n        LibVestingFundVault.VaultInfo memory info = vaultInfo[_l2Token];\\n        if(nowClaimRound[_l2Token] < curRound) {\\n            if (curRound == 1) {\\n                amount = totalAllocatedAmount[_l2Token]*info.firstClaimPercents/(10000) - totalClaimsAmount[_l2Token];\\n            } else if (curRound < info.totalClaimCount) {\\n                amount = totalAllocatedAmount[_l2Token]*info.firstClaimPercents/(10000);\\n                amount = (amount + ((totalAllocatedAmount[_l2Token] - amount)/(info.totalClaimCount-1) * (curRound -1))) - totalClaimsAmount[_l2Token];\\n            } else {\\n                amount = totalAllocatedAmount[_l2Token] - totalClaimsAmount[_l2Token];\\n            }\\n        }\\n    }\\n\\n    function remainAmount(\\n        address _l2Token\\n    )\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        return totalAllocatedAmount[_l2Token] - totalClaimsAmount[_l2Token];\\n    }\\n\\n    function getPoolAddress(\\n        address _l2Token\\n    )\\n        public\\n        view\\n        returns (address pool)\\n    {\\n        //L2\\uc5d0\\uc11c\\ub294 \\ubcc0\\uacbd\\ub418\\uc5b4\\uc57c\\ud568\\n        bytes32 POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n        if (tosToken == address(0) || _l2Token == address(0) || fees[_l2Token] == 0\\n            || uniswapV3Factory == address(0) )  return address(0);\\n\\n        address token0 = tosToken;\\n        address token1 = _l2Token;\\n        if (tosToken > _l2Token) {\\n            token0 = _l2Token;\\n            token1 = tosToken;\\n        }\\n\\n        pool = address(\\n            uint160(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        uniswapV3Factory,\\n                        keccak256(abi.encode(token0, token1, fees[_l2Token])),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            ))\\n        );\\n    }\\n\\n    function currentSqrtPriceX96(\\n        address _l2Token\\n    )\\n        public\\n        view\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        sqrtPriceX96 = 0;\\n        address pool = getPoolAddress(_l2Token);\\n        // console.log(\\\"pool\\\", pool);\\n        if (pool != address(0) && isContract(pool)) {\\n            // (,tick,,,,,) = IIUniswapV3Pool(pool).slot0();\\n            (sqrtPriceX96,,,,,,) = IIUniswapV3Pool(pool).slot0();\\n        }\\n    }\\n\\n    function isContract(address _addr) public view returns (bool _isContract) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    // function availableInitializer(\\n    //     address _l2Token,\\n    //     address _addr\\n    // )\\n    //     external\\n    //     view\\n    //     returns (bool result)\\n    // {\\n    //     if (!settingCheck && (_addr == receivedAddress || isAdmin(_addr))) result = true;\\n    // }\\n\\n    // function isL2PublicSale(address account) public view returns (bool) {\\n    //     return (account != address(0) && publicSaleVault == account);\\n    // }\\n\\n    function isVaultAdmin(address l2Token, address account) public view returns (bool) {\\n        return (account != address(0) && vaultAdminOfToken[l2Token] == account);\\n    }\\n\\n}\",\"keccak256\":\"0x0031f46c702934321e346279960ca99d8d83f0ba10784f613818c84b6ef17c03\",\"license\":\"Unlicense\"},\"contracts/L2/vaults/L2VestingFundVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { LibVestingFundVault } from \\\"../../libraries/LibVestingFundVault.sol\\\";\\n\\n/**\\n * @title L2VestingFundVaultStorage\\n * @dev\\n */\\ncontract L2VestingFundVaultStorage {\\n\\n    bool internal free = true;\\n    address public l2ProjectManager;\\n    // address public initializer;\\n\\n    address public publicSaleVault;\\n\\n    address public tonToken;\\n    address public tosToken;\\n    address public uniswapV3Factory;\\n\\n    // address public projectToken;\\n\\n    // // l2token - projectToken\\n    // mapping(address => address) public projectToken;\\n\\n    // l2token - tokenOwner\\n    mapping(address => address) public vaultAdminOfToken;\\n\\n    // l2token - receivedAddress\\n    mapping(address => address) public receivedAddress;\\n    \\n    // l2token - fee\\n    mapping(address => uint24) public fees;          \\n\\n    // l2token - settingCheck\\n    mapping(address => bool) public settingChecks;\\n\\n    // l2token - claimTimes\\n    mapping(address => uint256[]) public claimTimes;            \\n\\n    // l2token - claimPercents\\n    mapping(address => uint256[]) public claimAmounts;\\n\\n    // l2token - totalAllocatedAmount\\n    mapping(address => uint256) public totalAllocatedAmount;\\n    \\n    // l2token - nowClaimRound\\n    mapping(address => uint256) public nowClaimRound;\\n\\n    // l2token - totalClaimsAmount\\n    mapping(address => uint256) public totalClaimsAmount;\\n\\n    // l2token - VaultInfo\\n    mapping(address => LibVestingFundVault.VaultInfo) public vaultInfo;\\n\\n    event SetVaultAdmin(\\n        address l2Token, \\n        address newAdmin\\n    );\\n    \\n    event SetInitializer(\\n        address newInitializer\\n    );\\n\\n    event InitializedL2VestingFundVault(\\n        address l2Token,\\n        uint256 totalClaimCount,\\n        uint256 firstClaimPercents,\\n        uint256 firstClaimTime,\\n        uint256 secondClaimTime,\\n        uint256 roundInterval\\n    );\\n\\n    \\n    event Claimed(\\n        address l2Token, \\n        address to, \\n        uint256 amount\\n    );\\n\\n    event Funded(\\n        address from,\\n        uint256 amount\\n    );\\n\\n    modifier onlyL2ProjectManager() {\\n        require(l2ProjectManager != address(0) && msg.sender == l2ProjectManager, \\\"caller is not l2ProjectManager\\\");\\n        _;\\n    }\\n\\n    modifier onlyL2PublicSale() {\\n        require(publicSaleVault != address(0) && msg.sender == publicSaleVault, \\\"caller is not L2PublicSale\\\");\\n        _;\\n    }\\n\\n    modifier onlyVaultAdminOfToken(address l2token) {\\n        require(vaultAdminOfToken[l2token] != address(0) && msg.sender == vaultAdminOfToken[l2token] || vaultAdminOfToken[l2token] != address(0) && msg.sender == publicSaleVault, \\\"caller is not a vaultAdmin\\\");\\n        _;\\n    }\\n\\n    // modifier onlyInitializerOrVaultAdmin(address l2token) {\\n    //     require(vaultAdminOfToken[l2token] != address(0) &&\\n    //         ( msg.sender == initializer || msg.sender == vaultAdminOfToken[l2token]),\\n    //         \\\"caller is not a vaultAdmin Of l2Token\\\");\\n    //     _;\\n    // }\\n\\n    modifier nonZero(uint256 value) {\\n        require(value != 0, \\\"Z1\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroAddress(address account) {\\n        require(account != address(0), \\\"Z2\\\");\\n        _;\\n    }\\n\\n    modifier ifFree {\\n        require(free, \\\"lock\\\");\\n        free = false;\\n        _;\\n        free = true;\\n    }\\n\\n\\n}\",\"keccak256\":\"0x50f9e9703c58b15f98a8c7c9202463fdbe0acb48f24c397031ab981190c29b04\",\"license\":\"MIT\"},\"contracts/common/AccessRoleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AccessRoleCommon {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant POLICY_ROLE = keccak256(\\\"POLICY_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xd33c0944095da18c41a9434b86d34de8ce9c3667b57072c6b8b0567d406c814a\",\"license\":\"MIT\"},\"contracts/common/AccessibleCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./AccessRoleCommon.sol\\\";\\n\\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\\n    modifier onlyOwner() {\\n        require(isAdmin(msg.sender), \\\"Accessible: Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /// @dev add admin\\n    /// @param account  address to add\\n    function addAdmin(address account) public virtual onlyOwner {\\n        grantRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev remove admin\\n    /// @param account  address to remove\\n    function removeAdmin(address account) public virtual onlyOwner {\\n        renounceRole(ADMIN_ROLE, account);\\n    }\\n\\n    /// @dev transfer admin\\n    /// @param newAdmin new admin address\\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\\n        require(newAdmin != address(0), \\\"Accessible: zero address\\\");\\n        require(msg.sender != newAdmin, \\\"Accessible: same admin\\\");\\n\\n        grantRole(ADMIN_ROLE, newAdmin);\\n        renounceRole(ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev whether admin\\n    /// @param account  address to check\\n    function isAdmin(address account) public view virtual returns (bool) {\\n        return hasRole(ADMIN_ROLE, account);\\n    }\\n}\\n\",\"keccak256\":\"0x846f0a4ecf6c7598f710d256c400f5fd47f23ce38df5ff9fe1fed41104568613\",\"license\":\"MIT\"},\"contracts/libraries/LibVestingFundVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title LibVestingFundVault\\n */\\nlibrary LibVestingFundVault {\\n    struct VaultInfo {\\n        uint256 totalClaimCount;        // total number of claims\\n        uint256 firstClaimPercents;       // first claim amount\\n        uint256 firstClaimTime;          // first claim time\\n        uint256 secondClaimTime;         // second claim time\\n        uint256 roundInterval;    // round interval (seconds)\\n    }\\n}\",\"keccak256\":\"0x91829ba5a595f60aceabf835968586692d698d6a99c2a3176c85d48fcadc992c\",\"license\":\"MIT\"},\"contracts/proxy/ProxyStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.4;\\n\\ncontract ProxyStorage  {\\n\\n    bool public pauseProxy;\\n\\n    mapping(uint256 => address) public proxyImplementation;\\n    mapping(address => bool) public aliveImplementation;\\n    mapping(bytes4 => address) public selectorImplementation;\\n\\n}\",\"keccak256\":\"0x0c29ab2e9f114400a3825c2a0ed8c0594cbf19e0322b7465140b61f5b5de6d96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526005805460ff1916600117905534801561001d57600080fd5b506125058061002d6000396000f3fe608060405234801561001057600080fd5b50600436106102f45760003560e01c80635b54918211610191578063a217fddf116100e3578063b911135f11610097578063f5af342b11610071578063f5af342b1461078b578063faaebd211461079e578063ff946053146107d757600080fd5b8063b911135f1461073c578063c0f22d4b14610765578063d547741f1461077857600080fd5b8063a7b23fcf116100c8578063a7b23fcf146106f6578063aa2c814714610709578063ad13e1d81461072957600080fd5b8063a217fddf146106c5578063a4004108146106cd57600080fd5b8063781a4852116101455780639164359a1161011f5780639164359a1461061457806391d1485414610679578063925c3e64146106b257600080fd5b8063781a4852146105c55780637fc46ba8146105d8578063877aaf4f1461060157600080fd5b80637048027511610176578063704802751461057857806375829def1461058b57806375b238fc1461059e57600080fd5b80635b5491821461055857806363a8fd891461056b57600080fd5b80632c8917c81161024a578063465864b6116101fe57806351e8152a116101d857806351e8152a1461050a57806352351e851461051d578063550d01a31461053557600080fd5b8063465864b6146104bb5780634ab82f77146104ce57806350d2a276146104e157600080fd5b806335eee5831161022f57806335eee5831461047557806336568abe1461049557806340f01222146104a857600080fd5b80632c8917c81461044f5780632f2ff15d1461046257600080fd5b80631ce2b85e116102ac57806322d630231161028657806322d6302314610406578063248a9ca31461041957806324d7806c1461043c57600080fd5b80631ce2b85e1461039e5780631e83409a146103cc57806322985246146103df57600080fd5b80631228cbee116102dd5780631228cbee14610344578063162790551461036f5780631785f53c1461038957600080fd5b806301ffc9a7146102f957806304b6a0f514610321575b600080fd5b61030c6103073660046120a4565b6107ea565b60405190151581526020015b60405180910390f35b61030c61032f3660046120e3565b600d6020526000908152604090205460ff1681565b6103576103523660046120e3565b610821565b6040516001600160a01b039091168152602001610318565b61030c61037d3660046120e3565b3b63ffffffff16151590565b61039c6103973660046120e3565b610998565b005b6103be6103ac3660046120e3565b60126020526000908152604090205481565b604051908152602001610318565b61039c6103da3660046120e3565b610a2a565b6103be7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b6103576104143660046120e3565b610b59565b6103be610427366004612100565b60009081526004602052604090206001015490565b61030c61044a3660046120e3565b610bfc565b600654610357906001600160a01b031681565b61039c610470366004612119565b610c3c565b6103be6104833660046120e3565b60116020526000908152604090205481565b61039c6104a3366004612119565b610c66565b61039c6104b6366004612149565b610cee565b61039c6104c93660046121cd565b610ed5565b6103be6104dc3660046120e3565b610fec565b6103576104ef3660046120a4565b6003602052600090815260409020546001600160a01b031681565b61030c6105183660046121cd565b61101a565b6005546103579061010090046001600160a01b031681565b61030c6105433660046120e3565b60026020526000908152604090205460ff1681565b600954610357906001600160a01b031681565b60005461030c9060ff1681565b61039c6105863660046120e3565b611057565b61039c6105993660046120e3565b6110e1565b6103be7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b600754610357906001600160a01b031681565b6103576105e63660046120e3565b600a602052600090815260409020546001600160a01b031681565b600854610357906001600160a01b031681565b6106516106223660046120e3565b601360205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610318565b61030c610687366004612119565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61039c6106c03660046121fb565b611243565b6103be600081565b6103576106db3660046120e3565b600b602052600090815260409020546001600160a01b031681565b6103be6107043660046120e3565b611302565b6103be6107173660046120e3565b60106020526000908152604090205481565b61039c610737366004612247565b6113f2565b61035761074a366004612100565b6001602052600090815260409020546001600160a01b031681565b6103be610773366004612247565b611772565b61039c610786366004612119565b6117a3565b6103be6107993660046120e3565b6117c8565b6107c36107ac3660046120e3565b600c6020526000908152604090205462ffffff1681565b60405162ffffff9091168152602001610318565b6103be6107e5366004612247565b61198f565b60006001600160e01b03198216637965db0b60e01b148061081b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6008546000907fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54906001600160a01b0316158061086557506001600160a01b038316155b8061088b57506001600160a01b0383166000908152600c602052604090205462ffffff16155b8061089f57506009546001600160a01b0316155b156108ad5750600092915050565b6008546001600160a01b0390811690849081168211156108d857505060085483906001600160a01b03165b6009546001600160a01b039586166000908152600c602090815260409182902054825195891686830152939097168482015262ffffff9092166060808501919091528251808503820181526080850184528051908801207fff0000000000000000000000000000000000000000000000000000000000000060a086015291901b6bffffffffffffffffffffffff191660a184015260b583015260d5808301939093528051808303909301835260f590910190528051920191909120919050565b6109a133610bfc565b6109fd5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c66565b50565b6001600160a01b038116600090815260136020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301526004015460808201529015801590610a8e5750806040015142115b610ada5760405162461bcd60e51b815260206004820152601660248201527f5661756c743a206e6f742073746172746564207965740000000000000000000060448201526064016109f4565b6001600160a01b03821660009081526012602090815260408083205460109092529091205411610b4c5760405162461bcd60e51b815260206004820152601660248201527f5661756c743a20616c726561647920416c6c206765740000000000000000000060448201526064016109f4565b610b55826119ab565b5050565b600080610b6583610821565b90506001600160a01b03811615801590610b855750803b63ffffffff1615155b15610bf657806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec919061229a565b5094965050505050505b50919050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661081b565b600082815260046020526040902060010154610c5781611c4f565b610c618383611c59565b505050565b6001600160a01b0381163314610ce45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109f4565b610b558282611cfb565b876001600160a01b038116610d2a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b876001600160a01b038116610d665760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b6006546001600160a01b031615801590610d8a57506006546001600160a01b031633145b610dd65760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74204c325075626c696353616c6500000000000060448201526064016109f4565b6001600160a01b038a166000908152600d602052604090205460ff161515600103610e435760405162461bcd60e51b815260206004820152601260248201527f416c726561647920696e6974616c697a6564000000000000000000000000000060448201526064016109f4565b6001600160a01b038a81166000908152600b60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916948e1694909417909355600c905220805462ffffff191662ffffff8516179055610ea68a8989898989611d7e565b5050506001600160a01b039096166000908152600d60205260409020805460ff19166001179055505050505050565b806001600160a01b038116610f115760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b6001600160a01b038381166000908152600b602052604090205416331480610f3e5750610f3e833361101a565b610fb05760405162461bcd60e51b815260206004820152602b60248201527f63616c6c6572206973206e6f7420726563656976656441646472657373206f7260448201527f207661756c7441646d696e00000000000000000000000000000000000000000060648201526084016109f4565b506001600160a01b039182166000908152600b60205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b038116600090815260126020908152604080832054601090925282205461081b919061234a565b60006001600160a01b0382161580159061105057506001600160a01b038381166000908152600a60205260409020548116908316145b9392505050565b61106033610bfc565b6110b75760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c3c565b6110ea33610bfc565b6111415760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b6001600160a01b0381166111975760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016109f4565b6001600160a01b03811633036111ef5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016109f4565b6112197fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c3c565b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610c66565b61124c33610bfc565b6112a35760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b6112b1868686868686611d7e565b6001600160a01b0386166000908152600d602052604090205460ff1615156001146112fa576001600160a01b0386166000908152600d60205260409020805460ff191660011790555b505050505050565b6001600160a01b0381166000908152601360209081526040808320815160a0810183528154815260018201549381019390935260028101549183018290526003810154606084015260040154608083015282036113625750600092915050565b42816040015111156113775750600092915050565b60408101511580159061138e575042816040015111155b801561139d5750806060015142105b156113ab57600191506113e2565b428160600151116113e257608081015160608201516113ca904261234a565b6113d4919061235d565b6113df90600261237f565b91505b8051821115610bf6575192915050565b6006546001600160a01b03161580159061141657506006546001600160a01b031633145b6114625760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74204c325075626c696353616c6500000000000060448201526064016109f4565b6001600160a01b0382166000908152601360209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083015260040154608082015291036115035760405162461bcd60e51b815260206004820181905260248201527f736574207570206120636c61696d20726f756e6420666f722076657374696e6760448201526064016109f4565b6006546001600160a01b0316331461155d5760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207075626c696353616c655661756c742e000060448201526064016109f4565b600754600654604051636eb1769f60e11b81526001600160a01b0391821660048201523060248201528492919091169063dd62ed3e90604401602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d79190612392565b10156116255760405162461bcd60e51b815260206004820152601f60248201527f66756e64696e673a20696e73756666696369656e7420616c6c6f77616e63650060448201526064016109f4565b6001600160a01b0383166000908152601060205260408120805484929061164d90849061237f565b90915550506007546006546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018590529116906323b872dd906064016020604051808303816000875af11580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906123ab565b5060408051338152602081018490527f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a524910160405180910390a1600061171684611302565b90506000811180156117305750600061172e856117c8565b115b801561175e57506001600160a01b038416600090815260126020908152604080832054601090925290912054115b1561176c5761176c846119ab565b50505050565b600e602052816000526040600020818154811061178e57600080fd5b90600052602060002001600091509150505481565b6000828152600460205260409020600101546117be81611c4f565b610c618383611cfb565b6000806117d483611302565b9050806000036117e75750600092915050565b6001600160a01b0383166000818152601360209081526040808320815160a081018352815481526001820154818501526002820154818401526003820154606082015260049091015460808201529383526011909152902054821115611988578160010361189f576001600160a01b03841660009081526012602090815260408083205484830151601090935292205461271091611884916123c6565b61188e919061235d565b611898919061234a565b9250611988565b8051821015611956576020808201516001600160a01b03861660009081526010909252604090912054612710916118d5916123c6565b6118df919061235d565b6001600160a01b03851660009081526012602052604090205490935061190660018461234a565b82516119149060019061234a565b6001600160a01b03871660009081526010602052604090205461193890879061234a565b611942919061235d565b61194c91906123c6565b61188e908561237f565b6001600160a01b038416600090815260126020908152604080832054601090925290912054611985919061234a565b92505b5050919050565b600f602052816000526040600020818154811061178e57600080fd5b60006119b682611302565b905060006119c3836117c8565b905060008111611a155760405162461bcd60e51b815260206004820152601860248201527f636c61696d61626c6520616d6f756e74206973207a65726f000000000000000060448201526064016109f4565b6007546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190612392565b1015611acf5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20696e73756666696369656e742062616c616e6365000000000060448201526064016109f4565b80611ad984610fec565b1015611b275760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206f7665722072656d61696e2062616c616e636500000000000060448201526064016109f4565b6001600160a01b03831660009081526011602090815260408083208590556012909152902054611b5890829061237f565b6001600160a01b03848116600090815260126020908152604080832094909455600754600b9091529083902054925163a9059cbb60e01b8152928216600484015260248301849052169063a9059cbb906044016020604051808303816000875af1158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee91906123ab565b506001600160a01b038381166000908152600b602090815260409182902054825133815293169083015281018290527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060600160405180910390a1505050565b610a278133611e74565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b555760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cb73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610b555760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b84600003611ddc5760405162461bcd60e51b815260206004820152602560248201527f636c61696d436f756e7473206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016109f4565b6001600160a01b038616600081815260136020908152604091829020888155600181018890556002810187905560038101869055600481018590558251938452908301889052908201869052606082018590526080820184905260a08201839052907f6386a376abc06f4c32c67ba8b0f9ad3c1298ba7514feee1bb154d0707595837d9060c00160405180910390a150505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b5557611ea781611ee9565b611eb2836020611efb565b604051602001611ec3929190612401565b60408051601f198184030181529082905262461bcd60e51b82526109f491600401612482565b606061081b6001600160a01b03831660145b60606000611f0a8360026123c6565b611f1590600261237f565b67ffffffffffffffff811115611f2d57611f2d6124b5565b6040519080825280601f01601f191660200182016040528015611f57576020820181803683370190505b509050600360fc1b81600081518110611f7257611f726124cb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fa157611fa16124cb565b60200101906001600160f81b031916908160001a9053506000611fc58460026123c6565b611fd090600161237f565b90505b6001811115612055577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612011576120116124cb565b1a60f81b828281518110612027576120276124cb565b60200101906001600160f81b031916908160001a90535060049490941c9361204e816124e1565b9050611fd3565b5083156110505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f4565b6000602082840312156120b657600080fd5b81356001600160e01b03198116811461105057600080fd5b6001600160a01b0381168114610a2757600080fd5b6000602082840312156120f557600080fd5b8135611050816120ce565b60006020828403121561211257600080fd5b5035919050565b6000806040838503121561212c57600080fd5b82359150602083013561213e816120ce565b809150509250929050565b600080600080600080600080610100898b03121561216657600080fd5b8835612171816120ce565b97506020890135612181816120ce565b965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013562ffffff811681146121bc57600080fd5b809150509295985092959890939650565b600080604083850312156121e057600080fd5b82356121eb816120ce565b9150602083013561213e816120ce565b60008060008060008060c0878903121561221457600080fd5b863561221f816120ce565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000806040838503121561225a57600080fd5b8235612265816120ce565b946020939093013593505050565b805161ffff8116811461228557600080fd5b919050565b8051801515811461228557600080fd5b600080600080600080600060e0888a0312156122b557600080fd5b87516122c0816120ce565b8097505060208801518060020b81146122d857600080fd5b95506122e660408901612273565b94506122f460608901612273565b935061230260808901612273565b925060a088015160ff8116811461231857600080fd5b915061232660c0890161228a565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561081b5761081b612334565b60008261237a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561081b5761081b612334565b6000602082840312156123a457600080fd5b5051919050565b6000602082840312156123bd57600080fd5b6110508261228a565b808202811582820484141761081b5761081b612334565b60005b838110156123f85781810151838201526020016123e0565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124398160178501602088016123dd565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124768160288401602088016123dd565b01602801949350505050565b60208152600082518060208401526124a18160408501602087016123dd565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816124f0576124f0612334565b50600019019056fea164736f6c6343000812000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f45760003560e01c80635b54918211610191578063a217fddf116100e3578063b911135f11610097578063f5af342b11610071578063f5af342b1461078b578063faaebd211461079e578063ff946053146107d757600080fd5b8063b911135f1461073c578063c0f22d4b14610765578063d547741f1461077857600080fd5b8063a7b23fcf116100c8578063a7b23fcf146106f6578063aa2c814714610709578063ad13e1d81461072957600080fd5b8063a217fddf146106c5578063a4004108146106cd57600080fd5b8063781a4852116101455780639164359a1161011f5780639164359a1461061457806391d1485414610679578063925c3e64146106b257600080fd5b8063781a4852146105c55780637fc46ba8146105d8578063877aaf4f1461060157600080fd5b80637048027511610176578063704802751461057857806375829def1461058b57806375b238fc1461059e57600080fd5b80635b5491821461055857806363a8fd891461056b57600080fd5b80632c8917c81161024a578063465864b6116101fe57806351e8152a116101d857806351e8152a1461050a57806352351e851461051d578063550d01a31461053557600080fd5b8063465864b6146104bb5780634ab82f77146104ce57806350d2a276146104e157600080fd5b806335eee5831161022f57806335eee5831461047557806336568abe1461049557806340f01222146104a857600080fd5b80632c8917c81461044f5780632f2ff15d1461046257600080fd5b80631ce2b85e116102ac57806322d630231161028657806322d6302314610406578063248a9ca31461041957806324d7806c1461043c57600080fd5b80631ce2b85e1461039e5780631e83409a146103cc57806322985246146103df57600080fd5b80631228cbee116102dd5780631228cbee14610344578063162790551461036f5780631785f53c1461038957600080fd5b806301ffc9a7146102f957806304b6a0f514610321575b600080fd5b61030c6103073660046120a4565b6107ea565b60405190151581526020015b60405180910390f35b61030c61032f3660046120e3565b600d6020526000908152604090205460ff1681565b6103576103523660046120e3565b610821565b6040516001600160a01b039091168152602001610318565b61030c61037d3660046120e3565b3b63ffffffff16151590565b61039c6103973660046120e3565b610998565b005b6103be6103ac3660046120e3565b60126020526000908152604090205481565b604051908152602001610318565b61039c6103da3660046120e3565b610a2a565b6103be7ffb5864e8ff833c3cb2d2d08505e82ff02a43554c74a35d4f5a64e8526127831181565b6103576104143660046120e3565b610b59565b6103be610427366004612100565b60009081526004602052604090206001015490565b61030c61044a3660046120e3565b610bfc565b600654610357906001600160a01b031681565b61039c610470366004612119565b610c3c565b6103be6104833660046120e3565b60116020526000908152604090205481565b61039c6104a3366004612119565b610c66565b61039c6104b6366004612149565b610cee565b61039c6104c93660046121cd565b610ed5565b6103be6104dc3660046120e3565b610fec565b6103576104ef3660046120a4565b6003602052600090815260409020546001600160a01b031681565b61030c6105183660046121cd565b61101a565b6005546103579061010090046001600160a01b031681565b61030c6105433660046120e3565b60026020526000908152604090205460ff1681565b600954610357906001600160a01b031681565b60005461030c9060ff1681565b61039c6105863660046120e3565b611057565b61039c6105993660046120e3565b6110e1565b6103be7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b600754610357906001600160a01b031681565b6103576105e63660046120e3565b600a602052600090815260409020546001600160a01b031681565b600854610357906001600160a01b031681565b6106516106223660046120e3565b601360205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a001610318565b61030c610687366004612119565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61039c6106c03660046121fb565b611243565b6103be600081565b6103576106db3660046120e3565b600b602052600090815260409020546001600160a01b031681565b6103be6107043660046120e3565b611302565b6103be6107173660046120e3565b60106020526000908152604090205481565b61039c610737366004612247565b6113f2565b61035761074a366004612100565b6001602052600090815260409020546001600160a01b031681565b6103be610773366004612247565b611772565b61039c610786366004612119565b6117a3565b6103be6107993660046120e3565b6117c8565b6107c36107ac3660046120e3565b600c6020526000908152604090205462ffffff1681565b60405162ffffff9091168152602001610318565b6103be6107e5366004612247565b61198f565b60006001600160e01b03198216637965db0b60e01b148061081b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6008546000907fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54906001600160a01b0316158061086557506001600160a01b038316155b8061088b57506001600160a01b0383166000908152600c602052604090205462ffffff16155b8061089f57506009546001600160a01b0316155b156108ad5750600092915050565b6008546001600160a01b0390811690849081168211156108d857505060085483906001600160a01b03165b6009546001600160a01b039586166000908152600c602090815260409182902054825195891686830152939097168482015262ffffff9092166060808501919091528251808503820181526080850184528051908801207fff0000000000000000000000000000000000000000000000000000000000000060a086015291901b6bffffffffffffffffffffffff191660a184015260b583015260d5808301939093528051808303909301835260f590910190528051920191909120919050565b6109a133610bfc565b6109fd5760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084015b60405180910390fd5b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c66565b50565b6001600160a01b038116600090815260136020908152604091829020825160a081018452815481526001820154928101929092526002810154928201839052600381015460608301526004015460808201529015801590610a8e5750806040015142115b610ada5760405162461bcd60e51b815260206004820152601660248201527f5661756c743a206e6f742073746172746564207965740000000000000000000060448201526064016109f4565b6001600160a01b03821660009081526012602090815260408083205460109092529091205411610b4c5760405162461bcd60e51b815260206004820152601660248201527f5661756c743a20616c726561647920416c6c206765740000000000000000000060448201526064016109f4565b610b55826119ab565b5050565b600080610b6583610821565b90506001600160a01b03811615801590610b855750803b63ffffffff1615155b15610bf657806001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec919061229a565b5094965050505050505b50919050565b6001600160a01b03811660009081527f2fb794d17134dfdec181ddbac1babb5ab1eb140204ef4d982f294e7fc8b69022602052604081205460ff1661081b565b600082815260046020526040902060010154610c5781611c4f565b610c618383611c59565b505050565b6001600160a01b0381163314610ce45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016109f4565b610b558282611cfb565b876001600160a01b038116610d2a5760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b876001600160a01b038116610d665760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b6006546001600160a01b031615801590610d8a57506006546001600160a01b031633145b610dd65760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74204c325075626c696353616c6500000000000060448201526064016109f4565b6001600160a01b038a166000908152600d602052604090205460ff161515600103610e435760405162461bcd60e51b815260206004820152601260248201527f416c726561647920696e6974616c697a6564000000000000000000000000000060448201526064016109f4565b6001600160a01b038a81166000908152600b60209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1916948e1694909417909355600c905220805462ffffff191662ffffff8516179055610ea68a8989898989611d7e565b5050506001600160a01b039096166000908152600d60205260409020805460ff19166001179055505050505050565b806001600160a01b038116610f115760405162461bcd60e51b81526020600482015260026024820152612d1960f11b60448201526064016109f4565b6001600160a01b038381166000908152600b602052604090205416331480610f3e5750610f3e833361101a565b610fb05760405162461bcd60e51b815260206004820152602b60248201527f63616c6c6572206973206e6f7420726563656976656441646472657373206f7260448201527f207661756c7441646d696e00000000000000000000000000000000000000000060648201526084016109f4565b506001600160a01b039182166000908152600b60205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b038116600090815260126020908152604080832054601090925282205461081b919061234a565b60006001600160a01b0382161580159061105057506001600160a01b038381166000908152600a60205260409020548116908316145b9392505050565b61106033610bfc565b6110b75760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c3c565b6110ea33610bfc565b6111415760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b6001600160a01b0381166111975760405162461bcd60e51b815260206004820152601860248201527f41636365737369626c653a207a65726f2061646472657373000000000000000060448201526064016109f4565b6001600160a01b03811633036111ef5760405162461bcd60e51b815260206004820152601660248201527f41636365737369626c653a2073616d652061646d696e0000000000000000000060448201526064016109f4565b6112197fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4282610c3c565b610a277fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610c66565b61124c33610bfc565b6112a35760405162461bcd60e51b815260206004820152602260248201527f41636365737369626c653a2043616c6c6572206973206e6f7420616e2061646d60448201526134b760f11b60648201526084016109f4565b6112b1868686868686611d7e565b6001600160a01b0386166000908152600d602052604090205460ff1615156001146112fa576001600160a01b0386166000908152600d60205260409020805460ff191660011790555b505050505050565b6001600160a01b0381166000908152601360209081526040808320815160a0810183528154815260018201549381019390935260028101549183018290526003810154606084015260040154608083015282036113625750600092915050565b42816040015111156113775750600092915050565b60408101511580159061138e575042816040015111155b801561139d5750806060015142105b156113ab57600191506113e2565b428160600151116113e257608081015160608201516113ca904261234a565b6113d4919061235d565b6113df90600261237f565b91505b8051821115610bf6575192915050565b6006546001600160a01b03161580159061141657506006546001600160a01b031633145b6114625760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74204c325075626c696353616c6500000000000060448201526064016109f4565b6001600160a01b0382166000908152601360209081526040808320815160a08101835281548082526001830154948201949094526002820154928101929092526003810154606083015260040154608082015291036115035760405162461bcd60e51b815260206004820181905260248201527f736574207570206120636c61696d20726f756e6420666f722076657374696e6760448201526064016109f4565b6006546001600160a01b0316331461155d5760405162461bcd60e51b815260206004820152601e60248201527f63616c6c6572206973206e6f74207075626c696353616c655661756c742e000060448201526064016109f4565b600754600654604051636eb1769f60e11b81526001600160a01b0391821660048201523060248201528492919091169063dd62ed3e90604401602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d79190612392565b10156116255760405162461bcd60e51b815260206004820152601f60248201527f66756e64696e673a20696e73756666696369656e7420616c6c6f77616e63650060448201526064016109f4565b6001600160a01b0383166000908152601060205260408120805484929061164d90849061237f565b90915550506007546006546040516323b872dd60e01b81526001600160a01b039182166004820152306024820152604481018590529116906323b872dd906064016020604051808303816000875af11580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d191906123ab565b5060408051338152602081018490527f5af8184bef8e4b45eb9f6ed7734d04da38ced226495548f46e0c8ff8d7d9a524910160405180910390a1600061171684611302565b90506000811180156117305750600061172e856117c8565b115b801561175e57506001600160a01b038416600090815260126020908152604080832054601090925290912054115b1561176c5761176c846119ab565b50505050565b600e602052816000526040600020818154811061178e57600080fd5b90600052602060002001600091509150505481565b6000828152600460205260409020600101546117be81611c4f565b610c618383611cfb565b6000806117d483611302565b9050806000036117e75750600092915050565b6001600160a01b0383166000818152601360209081526040808320815160a081018352815481526001820154818501526002820154818401526003820154606082015260049091015460808201529383526011909152902054821115611988578160010361189f576001600160a01b03841660009081526012602090815260408083205484830151601090935292205461271091611884916123c6565b61188e919061235d565b611898919061234a565b9250611988565b8051821015611956576020808201516001600160a01b03861660009081526010909252604090912054612710916118d5916123c6565b6118df919061235d565b6001600160a01b03851660009081526012602052604090205490935061190660018461234a565b82516119149060019061234a565b6001600160a01b03871660009081526010602052604090205461193890879061234a565b611942919061235d565b61194c91906123c6565b61188e908561237f565b6001600160a01b038416600090815260126020908152604080832054601090925290912054611985919061234a565b92505b5050919050565b600f602052816000526040600020818154811061178e57600080fd5b60006119b682611302565b905060006119c3836117c8565b905060008111611a155760405162461bcd60e51b815260206004820152601860248201527f636c61696d61626c6520616d6f756e74206973207a65726f000000000000000060448201526064016109f4565b6007546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015611a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a819190612392565b1015611acf5760405162461bcd60e51b815260206004820152601b60248201527f5661756c743a20696e73756666696369656e742062616c616e6365000000000060448201526064016109f4565b80611ad984610fec565b1015611b275760405162461bcd60e51b815260206004820152601a60248201527f5661756c743a206f7665722072656d61696e2062616c616e636500000000000060448201526064016109f4565b6001600160a01b03831660009081526011602090815260408083208590556012909152902054611b5890829061237f565b6001600160a01b03848116600090815260126020908152604080832094909455600754600b9091529083902054925163a9059cbb60e01b8152928216600484015260248301849052169063a9059cbb906044016020604051808303816000875af1158015611bca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bee91906123ab565b506001600160a01b038381166000908152600b602090815260409182902054825133815293169083015281018290527ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060600160405180910390a1505050565b610a278133611e74565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b555760008281526004602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cb73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff1615610b555760008281526004602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b84600003611ddc5760405162461bcd60e51b815260206004820152602560248201527f636c61696d436f756e7473206d7573742062652067726561746572207468616e604482015264207a65726f60d81b60648201526084016109f4565b6001600160a01b038616600081815260136020908152604091829020888155600181018890556002810187905560038101869055600481018590558251938452908301889052908201869052606082018590526080820184905260a08201839052907f6386a376abc06f4c32c67ba8b0f9ad3c1298ba7514feee1bb154d0707595837d9060c00160405180910390a150505050505050565b60008281526004602090815260408083206001600160a01b038516845290915290205460ff16610b5557611ea781611ee9565b611eb2836020611efb565b604051602001611ec3929190612401565b60408051601f198184030181529082905262461bcd60e51b82526109f491600401612482565b606061081b6001600160a01b03831660145b60606000611f0a8360026123c6565b611f1590600261237f565b67ffffffffffffffff811115611f2d57611f2d6124b5565b6040519080825280601f01601f191660200182016040528015611f57576020820181803683370190505b509050600360fc1b81600081518110611f7257611f726124cb565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fa157611fa16124cb565b60200101906001600160f81b031916908160001a9053506000611fc58460026123c6565b611fd090600161237f565b90505b6001811115612055577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612011576120116124cb565b1a60f81b828281518110612027576120276124cb565b60200101906001600160f81b031916908160001a90535060049490941c9361204e816124e1565b9050611fd3565b5083156110505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109f4565b6000602082840312156120b657600080fd5b81356001600160e01b03198116811461105057600080fd5b6001600160a01b0381168114610a2757600080fd5b6000602082840312156120f557600080fd5b8135611050816120ce565b60006020828403121561211257600080fd5b5035919050565b6000806040838503121561212c57600080fd5b82359150602083013561213e816120ce565b809150509250929050565b600080600080600080600080610100898b03121561216657600080fd5b8835612171816120ce565b97506020890135612181816120ce565b965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013562ffffff811681146121bc57600080fd5b809150509295985092959890939650565b600080604083850312156121e057600080fd5b82356121eb816120ce565b9150602083013561213e816120ce565b60008060008060008060c0878903121561221457600080fd5b863561221f816120ce565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b6000806040838503121561225a57600080fd5b8235612265816120ce565b946020939093013593505050565b805161ffff8116811461228557600080fd5b919050565b8051801515811461228557600080fd5b600080600080600080600060e0888a0312156122b557600080fd5b87516122c0816120ce565b8097505060208801518060020b81146122d857600080fd5b95506122e660408901612273565b94506122f460608901612273565b935061230260808901612273565b925060a088015160ff8116811461231857600080fd5b915061232660c0890161228a565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b8181038181111561081b5761081b612334565b60008261237a57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561081b5761081b612334565b6000602082840312156123a457600080fd5b5051919050565b6000602082840312156123bd57600080fd5b6110508261228a565b808202811582820484141761081b5761081b612334565b60005b838110156123f85781810151838201526020016123e0565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516124398160178501602088016123dd565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516124768160288401602088016123dd565b01602801949350505050565b60208152600082518060208401526124a18160408501602087016123dd565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816124f0576124f0612334565b50600019019056fea164736f6c6343000812000a",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdmin(address)": {
        "details": "add admin",
        "params": {
          "account": "address to add"
        }
      },
      "constructor": {
        "details": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAdmin(address)": {
        "details": "whether admin",
        "params": {
          "account": "address to check"
        }
      },
      "removeAdmin(address)": {
        "details": "remove admin",
        "params": {
          "account": "address to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "details": "transfer admin",
        "params": {
          "newAdmin": "new admin address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7808,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "pauseProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7812,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "proxyImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 7816,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "aliveImplementation",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7820,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "selectorImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 24,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "_roles",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 5279,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "free",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 5281,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "l2ProjectManager",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5283,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "publicSaleVault",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5285,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "tonToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5287,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "tosToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 5289,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "uniswapV3Factory",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5293,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "vaultAdminOfToken",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5297,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "receivedAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5301,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "fees",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint24)"
      },
      {
        "astId": 5305,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "settingChecks",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5310,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "claimTimes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5315,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "claimAmounts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5319,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "totalAllocatedAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5323,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "nowClaimRound",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5327,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "totalClaimsAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5332,
        "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
        "label": "vaultInfo",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_struct(VaultInfo)6869_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(VaultInfo)6869_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct LibVestingFundVault.VaultInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultInfo)6869_storage"
      },
      "t_mapping(t_address,t_uint24)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultInfo)6869_storage": {
        "encoding": "inplace",
        "label": "struct LibVestingFundVault.VaultInfo",
        "members": [
          {
            "astId": 6860,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "totalClaimCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6862,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "firstClaimPercents",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6864,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "firstClaimTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6866,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "secondClaimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6868,
            "contract": "contracts/L2/vaults/L2VestingFundVault.sol:L2VestingFundVault",
            "label": "roundInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}