{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/common/AccessibleCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./AccessRoleCommon.sol\";\n\ncontract AccessibleCommon is AccessRoleCommon, AccessControl {\n    modifier onlyOwner() {\n        require(isAdmin(msg.sender), \"Accessible: Caller is not an admin\");\n        _;\n    }\n\n    /// @dev add admin\n    /// @param account  address to add\n    function addAdmin(address account) public virtual onlyOwner {\n        grantRole(ADMIN_ROLE, account);\n    }\n\n    /// @dev remove admin\n    /// @param account  address to remove\n    function removeAdmin(address account) public virtual onlyOwner {\n        renounceRole(ADMIN_ROLE, account);\n    }\n\n    /// @dev transfer admin\n    /// @param newAdmin new admin address\n    function transferAdmin(address newAdmin) external virtual onlyOwner {\n        require(newAdmin != address(0), \"Accessible: zero address\");\n        require(msg.sender != newAdmin, \"Accessible: same admin\");\n\n        grantRole(ADMIN_ROLE, newAdmin);\n        renounceRole(ADMIN_ROLE, msg.sender);\n    }\n\n    /// @dev whether admin\n    /// @param account  address to check\n    function isAdmin(address account) public view virtual returns (bool) {\n        return hasRole(ADMIN_ROLE, account);\n    }\n}\n"
    },
    "contracts/common/AccessRoleCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AccessRoleCommon {\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n    bytes32 public constant POLICY_ROLE = keccak256(\"POLICY_ROLE\");\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(address account, uint256 amount) external returns (bool);\n\n    function burn(address account, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/L2/L2ProjectManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n\nimport \"../proxy/ProxyStorage.sol\";\nimport { AccessibleCommon } from \"../common/AccessibleCommon.sol\";\nimport \"./L2ProjectManagerStorage.sol\";\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\nimport \"../libraries/LibProject.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface IL2CrossDomainMessenger {\n    function xDomainMessageSender() external view returns (address);\n}\n\ninterface IL2CustomVaultBase {\n    function setVaultAdmin(\n        address l2Token,\n        address _newAdmin\n    ) external;\n\n    function isVaultAdmin(address l2Token, address account) external view returns (bool);\n}\n\ninterface IL2PublicSaleVault {\n    function vaultInitialize(\n        address l2Token,\n        LibProject.InitalParameterPublicSaleVault memory vaultParams,\n        LibProject.InitalParameterPublicSaleClaim memory claimParams\n    ) external;\n}\n\ninterface IL2InitialLiquidityVault {\n    function initialize(\n        address l2Token,\n        LibProject.InitalParameterInitialLiquidityVault memory params\n    ) external;\n}\n\ninterface IL2LiquidityRewardVault {\n    function initialize(\n        address l2Token,\n        LibProject.InitalParameterLiquidityRewardVault memory params\n    ) external;\n}\n\ninterface IL2ScheduleVault {\n    function initialize(\n        address l2Token,\n        string memory vaultName,\n        LibProject.InitalParameterScheduleVault memory params\n    ) external;\n}\n\ninterface IL2NonScheduleVault {\n    function initialize(\n        address l2Token,\n        string memory vaultName,\n        address claimer,\n        uint256 totalAllocatedAmount\n    ) external;\n}\n/**\n * @title L2ProjectManager\n * @dev\n */\ncontract L2ProjectManager is ProxyStorage, AccessibleCommon, L2ProjectManagerStorage {\n    using SafeERC20 for IERC20;\n\n    modifier onlyL2TokenFactory() {\n        require(l2TokenFactory != address(0) && msg.sender == l2TokenFactory, \"caller is not l2TokenFactory\");\n        _;\n    }\n\n    modifier onlyMessengerAndL1ProjectManager() {\n        require(msg.sender == l2CrossDomainMessenger &&\n        IL2CrossDomainMessenger(l2CrossDomainMessenger).xDomainMessageSender() == l1ProjectManager,\n        \"not onlyMessengerAndL1ProjectManager\");\n        _;\n    }\n\n    modifier nonZero(uint256 value) {\n        require(value != 0, \"Z1\");\n        _;\n    }\n\n    modifier nonZeroAddress(address account) {\n        require(account != address(0), \"Z2\");\n        _;\n    }\n\n    modifier ifFree {\n        require(free, \"lock\");\n        free = false;\n        _;\n        free = true;\n    }\n\n    event CreatedL2Project(address indexed l1Token, address indexed l2Token, address projectOwner, string projectName);\n    event DistributedL2Token(\n        address l1Token,\n        address l2Token,\n        uint256 projectId,\n        uint256 totalAmount\n        );\n\n    /* ========== DEPENDENCIES ========== */\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor() {\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setupRole(ADMIN_ROLE, msg.sender);\n    }\n\n    /* ========== onlyOwner ========== */\n\n    /// @dev l1ProjectManager 주소 설정\n    function setL1ProjectManager(address _l1ProjectManager)\n        external nonZeroAddress(_l1ProjectManager) onlyOwner\n    {\n        require(l1ProjectManager != _l1ProjectManager, \"same\");\n        l1ProjectManager = _l1ProjectManager;\n    }\n\n    /// @dev l2TokenFactory 주소 설정\n    function setL2TokenFactory(address _l2TokenFactory)\n        external nonZeroAddress(_l2TokenFactory) onlyOwner\n    {\n        require(l2TokenFactory != _l2TokenFactory, \"same\");\n        l2TokenFactory = _l2TokenFactory;\n    }\n\n    /// @dev l2CrossDomainMessenger 주소 설정\n    function setL2CrossDomainMessenger(address _l2CrossDomainMessenger)\n        external nonZeroAddress(_l2CrossDomainMessenger) onlyOwner\n    {\n        require(l2CrossDomainMessenger != _l2CrossDomainMessenger, \"same\");\n        l2CrossDomainMessenger = _l2CrossDomainMessenger;\n    }\n\n    function setTokamakVaults(\n        address publicSale,\n        address initialLiquidity,\n        address liquidityReward,\n        address tonAirdrop,\n        address tosAirdrop,\n        address _scheduleVault,\n        address _nonScheduleVault\n        )\n        external onlyOwner\n        // nonZeroAddress(publicSale)\n        nonZeroAddress(initialLiquidity)\n        // nonZeroAddress(liquidityReward)\n        // nonZeroAddress(tosAirdrop)\n        // nonZeroAddress(tonAirdrop)\n        nonZeroAddress(_scheduleVault)\n        nonZeroAddress(_nonScheduleVault)\n    {\n        // require(scheduleVault == address(0), \"already set\");\n        // require(\n        //     publicSaleVault != publicSale ||\n        //     initialLiquidityVault != initialLiquidity ||\n        //     liquidityRewardVault != liquidityReward ||\n        //     tonAirdropVault != tonAirdrop ||\n        //     tosAirdropVault != tosAirdrop\n        //     , \"same\");\n\n        publicSaleVault = publicSale;\n        initialLiquidityVault = initialLiquidity;\n        liquidityReward = liquidityReward;\n        tonAirdropVault = tonAirdrop;\n        tosAirdropVault = tosAirdrop;\n        scheduleVault = _scheduleVault;\n        nonScheduleVault = _nonScheduleVault;\n    }\n\n    /* ========== only L2TokenFactory ========== */\n\n    /// @dev 프로젝트 추가\n    function createL2Project(\n        address projectOwner,\n        address l1Token,\n        address l2Token,\n        string calldata projectName\n    )\n        external onlyL2TokenFactory\n    {\n        require(bytes(projectName).length != 0, \"projectName is null\");\n        require(projects[l2Token].l1Token == address(0), \"already added\");\n        projects[l2Token] = LibProject.L2ProjectInfo({\n            projectId: 0,\n            projectOwner: projectOwner,\n            l1Token : l1Token,\n            l2Token : l2Token,\n            projectName : projectName\n        });\n        tokenMaps[l1Token] = l2Token;\n        emit CreatedL2Project(l1Token, l2Token, projectOwner, projectName);\n    }\n\n    /* ========== only L2CrossDomainMessengerAndL1ProjectManager ========== */\n\n    function _approveVaults(address l2Token, address vault, uint256 amount) internal {\n\n        // uint256 allowance = IERC20(l2Token).allowance(address(this), vault);\n\n        if (vault != address(0) && amount != 0 &&   IERC20(l2Token).allowance(address(this), vault) < amount) {\n\n            IERC20(l2Token).approve(vault, amount);\n        }\n    }\n\n    function distributesL2Token(\n        address l1Token,\n        address l2Token,\n        uint256 projectId,\n        uint256 totalAmount,\n        LibProject.TokamakVaults memory tokamakVaults,\n        LibProject.InitalParameterSchedule[] memory customScheduleVaults,\n        LibProject.InitalParameterNonScheduleVault[] memory customNonScheduleVaults\n    )\n        external onlyMessengerAndL1ProjectManager\n        nonZeroAddress(l1Token)\n        nonZeroAddress(l2Token)\n        nonZero(projectId) nonZero(totalAmount)\n    {\n        LibProject.L2ProjectInfo memory info = projects[l2Token];\n\n        require(info.l1Token == l1Token, \"not matched l1Token\");\n        require(info.l2Token == l2Token, \"not matched l2Token\");\n\n        uint256 publicTotal = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\n            + tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount;\n\n        uint256 total = publicTotal +\n            tokamakVaults.initialVaultParams.totalAllocatedAmount +\n            tokamakVaults.rewardParams.params.totalAllocatedAmount +\n            tokamakVaults.tosAirdropParams.totalAllocatedAmount +\n            tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\n\n        uint256 totalCustomSchedule = 0;\n        uint256 totalNonCustomSchedule = 0;\n\n        for (uint256 i = 0; i < customScheduleVaults.length; i++)\n            totalCustomSchedule += customScheduleVaults[i].params.totalAllocatedAmount;\n\n        for (uint256 j = 0; j < customNonScheduleVaults.length; j++)\n            totalNonCustomSchedule += customNonScheduleVaults[j].totalAllocatedAmount;\n\n        total += (totalCustomSchedule + totalNonCustomSchedule);\n\n        require(total == totalAmount, \"not matched totalAmount\");\n\n        projects[info.l2Token].projectId = projectId;\n        _approveVaults(info.l2Token, publicSaleVault, publicTotal);\n        _approveVaults(info.l2Token, initialLiquidityVault, tokamakVaults.initialVaultParams.totalAllocatedAmount);\n        _approveVaults(info.l2Token, liquidityRewardVault, tokamakVaults.rewardParams.params.totalAllocatedAmount);\n        _approveVaults(info.l2Token, tonAirdropVault, tokamakVaults.tonAirdropParams.totalAllocatedAmount);\n        _approveVaults(info.l2Token, tosAirdropVault, tokamakVaults.tosAirdropParams.totalAllocatedAmount);\n\n        if (publicTotal != 0) {\n            IL2CustomVaultBase(publicSaleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n            IL2PublicSaleVault(publicSaleVault).vaultInitialize(\n                info.l2Token,\n                tokamakVaults.publicSaleParams.vaultParams,\n                tokamakVaults.publicSaleParams.claimParams\n            );\n        }\n        LibProject.InitalParameterInitialLiquidityVault memory initialVaultParams = tokamakVaults.initialVaultParams;\n\n        if (tokamakVaults.initialVaultParams.totalAllocatedAmount != 0) {\n\n            if(!IL2CustomVaultBase(initialLiquidityVault).isVaultAdmin(info.l2Token, info.projectOwner)) IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(info.l2Token, info.projectOwner);\n            IL2CustomVaultBase(initialLiquidityVault).isVaultAdmin(info.l2Token, info.projectOwner);\n\n            IL2InitialLiquidityVault(initialLiquidityVault).initialize(\n                info.l2Token,\n                initialVaultParams);\n        }\n\n        if (tokamakVaults.rewardParams.params.totalAllocatedAmount != 0) {\n            // // liquidity reward\n            // IL2CustomVaultBase(initialLiquidityVault).setVaultAdmin(l2Token, projects[l2Token].projectOwner);\n            // IL2LiquidityRewardVault(liquidityRewardVault).initialize(\n            //     l2Token,\n            //     tokamakVaults.rewardParams);\n        }\n\n        if (tokamakVaults.tosAirdropParams.totalAllocatedAmount != 0) {\n            //\n        }\n\n        if (tokamakVaults.tonAirdropParams.totalAllocatedAmount != 0) {\n            //\n        }\n\n        uint256 projectId_ = projectId;\n        if (totalCustomSchedule != 0) {\n            if(!IL2CustomVaultBase(scheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\n                IL2CustomVaultBase(scheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n\n            for (uint256 i = 0; i < customScheduleVaults.length; i++){\n                LibProject.InitalParameterSchedule memory params = customScheduleVaults[i];\n\n                _approveVaults(info.l2Token, scheduleVault, params.params.totalAllocatedAmount);\n\n                IL2ScheduleVault(scheduleVault).initialize(\n                    info.l2Token,\n                    params.vaultName,\n                    params.params);\n            }\n        }\n\n        if (totalNonCustomSchedule != 0) {\n            if(!IL2CustomVaultBase(nonScheduleVault).isVaultAdmin(info.l2Token, info.projectOwner))\n                IL2CustomVaultBase(nonScheduleVault).setVaultAdmin(info.l2Token, info.projectOwner);\n\n            for (uint256 i = 0; i < customNonScheduleVaults.length; i++){\n                LibProject.InitalParameterNonScheduleVault memory params = customNonScheduleVaults[i];\n                _approveVaults(info.l2Token, nonScheduleVault, params.totalAllocatedAmount);\n\n                IL2NonScheduleVault(nonScheduleVault).initialize(\n                    info.l2Token,\n                    params.vaultName,\n                    params.claimer,\n                    params.totalAllocatedAmount );\n            }\n        }\n\n        emit DistributedL2Token(info.l1Token, info.l2Token, projectId_, total);\n    }\n\n    /* ========== Anyone can execute ========== */\n\n    /* ========== VIEW ========== */\n\n    function viewProject(address l2token) external view returns (LibProject.L2ProjectInfo memory) {\n        return projects[l2token];\n    }\n    /* === ======= internal ========== */\n\n}"
    },
    "contracts/L2/L2ProjectManagerStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport { LibProject } from \"../libraries/LibProject.sol\";\n\n/**\n * @title L2ProjectManagerStorage\n * @dev\n */\ncontract L2ProjectManagerStorage {\n\n    bool internal free = true;\n    address public l1ProjectManager;\n    address public l2TokenFactory;\n    address public l2CrossDomainMessenger;\n\n    // 토큰별로 대표되는 볼트\n    address public publicSaleVault;\n    address public initialLiquidityVault;\n    address public liquidityRewardVault;\n    address public tonAirdropVault;\n    address public tosAirdropVault;\n\n    address public scheduleVault; // customScheduleVault\n    address public nonScheduleVault;    // customNonScheduleVault\n\n    // l2token - L2ProjectInfo\n    mapping(address => LibProject.L2ProjectInfo) public projects;\n\n    // l1token - l2token\n    mapping(address => address) public tokenMaps;\n\n}\n"
    },
    "contracts/libraries/LibProject.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface AddressManagerI {\n    function getAddress(string memory _name) external view returns (address);\n}\n\n/**\n * @title LibProject\n */\nlibrary LibProject {\n\n    enum TOKEN_TYPE {\n        ERC20_A,\n        ERC20_B,\n        ERC20_C,\n        ERC20_D,\n        NONE\n    }\n\n    enum L2_TYPE {\n        TOKAMAL_OPTIMISM,\n        TOKAMAL_ZKEVM,\n        NONE\n    }\n\n    struct ProjectInfo {\n        address projectOwner;\n        address tokenOwner;\n        address l1Token;\n        address l2Token;\n        address addressManager;\n        uint256 initialTotalSupply;\n        uint8 tokenType;\n        uint8 l2Type;\n        string projectName;\n    }\n\n    struct L2Info {\n        address l2TokenFactory;\n        address l2ProjectManager;\n        uint32 depositMinGasLimit;\n        uint32 sendMsgMinGasLimit;\n    }\n\n    struct L2ProjectInfo {\n        uint256 projectId;\n        address projectOwner;\n        address l1Token;\n        address l2Token;\n        string projectName;\n    }\n\n    struct TokamakVaults {\n        InitalParameterPublicSale publicSaleParams;\n        InitalParameterInitialLiquidityVault initialVaultParams;\n        InitalParameterLiquidityRewardVault rewardParams;\n        InitalParameterScheduleVault tosAirdropParams;\n        InitalParameterScheduleVault tonAirdropParams;\n    }\n\n    struct InitalParameterPublicSale {\n        InitalParameterPublicSaleVault vaultParams;\n        InitalParameterPublicSaleClaim claimParams;\n    }\n\n    struct InitalParameterPublicSaleVault {\n        uint256 stosTier1;\n        uint256 stosTier2;\n        uint256 stosTier3;\n        uint256 stosTier4;\n        uint256 tier1Percents;\n        uint256 tier2Percents;\n        uint256 tier3Percents;\n        uint256 tier4Percents;\n        uint256 total1roundSaleAmount;\n        uint256 total2roundSaleAmount;\n        uint256 saleTokenPrice;\n        uint256 payTokenPrice;\n        uint256 hardcapAmount;\n        uint256 changeTOSPercent;\n        uint256 startWhiteTime;\n        uint256 endWhiteTime;\n        uint256 start1roundTime;\n        uint256 end1roundTime;\n        uint256 snapshotTime;\n        uint256 start2roundTime;\n        uint256 end2roundTime;\n        uint256 claimCounts;\n    }\n\n    struct InitalParameterPublicSaleClaim {\n        uint256[] claimTimes;\n        uint256[] claimPercents;\n    }\n\n    struct InitalParameterInitialLiquidityVault {\n        uint256 totalAllocatedAmount;\n        uint256 tosPrice;\n        uint256 tokenPrice;\n        uint256 initSqrtPrice;\n        uint32 startTime;\n        uint16 fee;\n    }\n\n    struct InitalParameterLiquidityRewardVault {\n        address poolAddress;\n        InitalParameterScheduleVault params;\n    }\n\n    struct InitalParameterSchedule {\n        string vaultName;\n        InitalParameterScheduleVault params;\n    }\n\n    struct InitalParameterScheduleVault {\n        address claimer;\n        uint256 totalAllocatedAmount;\n        uint256 totalClaimCount;\n        uint256 firstClaimAmount;\n        uint32 firstClaimTime;\n        uint32 secondClaimTime;\n        uint32 roundIntervalTime;\n    }\n\n    struct InitalParameterNonScheduleVault {\n        string vaultName;\n        address claimer;\n        uint256 totalAllocatedAmount;\n    }\n\n    function getL1CommunicationMessenger(address addressManager) external view returns(address _address) {\n        if (addressManager == address(0)) return address(0);\n        try\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1CrossDomainMessenger') returns (address a) {\n                _address = a;\n        } catch (bytes memory ) {\n            _address = address(0);\n        }\n    }\n\n    function getL1Bridge(address addressManager) external view returns(address _address) {\n        if (addressManager == address(0)) return address(0);\n        try\n            AddressManagerI(addressManager).getAddress('Proxy__OVM_L1StandardBridge') returns (address a) {\n                _address = a;\n        } catch (bytes memory ) {\n            _address = address(0);\n        }\n    }\n\n    function validateTokamakVaults(TokamakVaults memory tokamakVaults)\n    public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        // if ((tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount\n        //     +tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount) == 0 ||\n        //     tokamakVaults.initialVaultParams.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.rewardParams.params.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.tosAirdropParams.totalAllocatedAmount == 0 ||\n        //     tokamakVaults.tonAirdropParams.totalAllocatedAmount == 0\n        // ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.initialVaultParams.tosPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.tokenPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.initSqrtPrice == 0 ||\n        //     tokamakVaults.initialVaultParams.startTime == 0 ||\n        //     tokamakVaults.initialVaultParams.fee == 0) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.rewardParams.poolAddress == address(0) ||\n        //     tokamakVaults.rewardParams.params.totalClaimCount == 0 ||\n        //     tokamakVaults.rewardParams.params.firstClaimAmount == 0 ||\n        //     tokamakVaults.rewardParams.params.firstClaimTime == 0 ||\n        //     tokamakVaults.rewardParams.params.secondClaimTime == 0 ||\n        //     tokamakVaults.rewardParams.params.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.tosAirdropParams.totalClaimCount == 0 ||\n        //     tokamakVaults.tosAirdropParams.firstClaimAmount == 0 ||\n        //     tokamakVaults.tosAirdropParams.firstClaimTime == 0 ||\n        //     tokamakVaults.tosAirdropParams.secondClaimTime == 0 ||\n        //     tokamakVaults.tosAirdropParams.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n        // if (tokamakVaults.tonAirdropParams.totalClaimCount == 0 ||\n        //     tokamakVaults.tonAirdropParams.firstClaimAmount == 0 ||\n        //     tokamakVaults.tonAirdropParams.firstClaimTime == 0 ||\n        //     tokamakVaults.tonAirdropParams.secondClaimTime == 0 ||\n        //     tokamakVaults.tonAirdropParams.roundIntervalTime == 0\n        //     ) return (boolValidate, totalAmount);\n\n\n        totalAmount = tokamakVaults.publicSaleParams.vaultParams.total1roundSaleAmount +\n                    tokamakVaults.publicSaleParams.vaultParams.total2roundSaleAmount +\n                    tokamakVaults.initialVaultParams.totalAllocatedAmount +\n                    tokamakVaults.rewardParams.params.totalAllocatedAmount +\n                    tokamakVaults.tosAirdropParams.totalAllocatedAmount +\n                    tokamakVaults.tonAirdropParams.totalAllocatedAmount ;\n\n        if (totalAmount == 0) return (boolValidate, totalAmount);\n\n        boolValidate = true;\n    }\n\n    function validateScheduleVault(\n        InitalParameterSchedule[] memory customs\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        if (customs.length != 0) {\n            for(uint256 i = 0; i < customs.length; i++){\n                if (customs[i].params.totalAllocatedAmount == 0 ||\n                    customs[i].params.totalClaimCount == 0 ||\n                    customs[i].params.firstClaimAmount == 0 ||\n                    customs[i].params.firstClaimTime == 0 ||\n                    customs[i].params.secondClaimTime == 0 ||\n                    customs[i].params.roundIntervalTime == 0\n                    ) return (boolValidate, totalAmount);\n\n                totalAmount += customs[i].params.totalAllocatedAmount;\n            }\n            boolValidate = true;\n        }\n    }\n\n    function validateNonScheduleVault(\n        InitalParameterNonScheduleVault[] memory customs\n    ) public pure returns (bool boolValidate, uint256 totalAmount) {\n\n        if (customs.length != 0) {\n            for(uint256 i =0 ; i < customs.length; i++){\n                if (customs[i].totalAllocatedAmount == 0) return (boolValidate, totalAmount);\n                totalAmount += customs[i].totalAllocatedAmount;\n            }\n            boolValidate = true;\n        }\n    }\n\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/proxy/ProxyStorage.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.4;\n\ncontract ProxyStorage  {\n\n    bool public pauseProxy;\n\n    mapping(uint256 => address) public proxyImplementation;\n    mapping(address => bool) public aliveImplementation;\n    mapping(bytes4 => address) public selectorImplementation;\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 625
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}